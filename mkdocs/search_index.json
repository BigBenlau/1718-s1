{
    "docs": [
        {
            "location": "/index.html",
            "text": "CS2030 Programming Methodologies II\n\n\n27 August, 2017\n\n\nLecture 3\n and \nExercise 3\n are posted.  \n\n\n20 August, 2017\n\n\nLecture 2\n and \nExercise 2\n are posted.  \n\n\nYou should have received an email from the School of Computing about creating an account on \nsunfire\n.  If you have not done so, please do so ASAP at \nhttps://mysoc.nus.edu.sg/~newacct/\n.\n\n\n11 August, 2017\n\n\nMany of you are starting a new and exciting journey at NUS.  Congratulations, and welcome to NUS Computing!\n\n\nYou are looking at the main website for CS2030.  This is where you will get all of your module information (labs, lecture notes, etc).  \n\n\nThere are two other websites that we will use regularly over the course of the semester:\n\n\n\n\nPiazza\n, which we will use for Q&A, and\n\n\nIVLE\n, which we will use for \ngrade dissemination\n, \nclass roster\n, etc.\n\n\n\n\nHere are some things that you can read on this site, before the first class:\n\n\n\n\nAssumed prior knowledge\n: What we expect you to know before the class, from CS1010 or its equivalent;\n\n\nSome readings for 1\nst\n year students\n: Useful for senior students as well;\n\n\nAnd, if you feel up for it, \nthe notes for Lecture 1\n\n\n\n\nAlready have a question?  Ask us over at \nPiazza\n!",
            "title": "Home"
        },
        {
            "location": "/index.html#cs2030-programming-methodologies-ii",
            "text": "",
            "title": "CS2030 Programming Methodologies II"
        },
        {
            "location": "/index.html#27-august-2017",
            "text": "Lecture 3  and  Exercise 3  are posted.",
            "title": "27 August, 2017"
        },
        {
            "location": "/index.html#20-august-2017",
            "text": "Lecture 2  and  Exercise 2  are posted.    You should have received an email from the School of Computing about creating an account on  sunfire .  If you have not done so, please do so ASAP at  https://mysoc.nus.edu.sg/~newacct/ .",
            "title": "20 August, 2017"
        },
        {
            "location": "/index.html#11-august-2017",
            "text": "Many of you are starting a new and exciting journey at NUS.  Congratulations, and welcome to NUS Computing!  You are looking at the main website for CS2030.  This is where you will get all of your module information (labs, lecture notes, etc).    There are two other websites that we will use regularly over the course of the semester:   Piazza , which we will use for Q&A, and  IVLE , which we will use for  grade dissemination ,  class roster , etc.   Here are some things that you can read on this site, before the first class:   Assumed prior knowledge : What we expect you to know before the class, from CS1010 or its equivalent;  Some readings for 1 st  year students : Useful for senior students as well;  And, if you feel up for it,  the notes for Lecture 1   Already have a question?  Ask us over at  Piazza !",
            "title": "11 August, 2017"
        },
        {
            "location": "/about/index.html",
            "text": "CS2030 Programming Methodology II\n\n\nAbout\n\n\nThis module is a follow up to CS1010.  It explores two modern programming paradigms, object-oriented programming and functional programming.  Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using object-oriented design principles and advanced programming constructs available in the two paradigms.  Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.  \n\n\nWho/When/Where\n\n\n\n\nLecture:\n 10am - 12noon, every Monday\n\n\nVenue:\n LT19\n\n\nInstructor:\n \nOoi Wei Tsang\n (\nooiwt@comp.nus.edu.sg\n)\n\n\nTeaching Assistant:\n Kenneth Lu (\nlu.yang.kenneth@u.nus.edu\n)\n\n\nLab:\n Every Thursday (Week 3 - Week 13)\n\n\nMidterm Test:\n October 2, 2017, Monday, 10am\n\n\nFinal Assessment:\n November 29, 2017, Wednesday, 9am.\n\n\n\n\nWorkload\n\n\nBesides the 4-hour contact time for lecture and lab, students are expected to spend about 6 hours on average weekly on homework and on preparing the class.\n\n\nHistory\n\n\nCS2030 is a new module, required for all students in Bachelor of Computing (Computer Science) and Second Major in Computer Science students, cohort 17/18 onwards.  In 2017, the Department of Computer Science reorganized the two module series on data structures and algorithms (CS1020, CS2010) into (CS2030, CS2040).  CS2040 focuses on data structures and algorithms, while the advanced programming methodologies from CS1020 are moved into CS2030.  CS2030 will also covers some basics OO design that previously were covered in CS2103, and introduces students to functional programming, concurrent programming, event-based programming, and other paradigms that are increasingly important.\n\n\nLearning Outcomes\n\n\nAfter completing the module, students should:\n\n\n\n\nbe confident in reading and developing medium-scale programs (up to 10K lines of code)\n\n\nbe familiarize enough with common OO concepts to understand software code written in common OO language and understand documentation of software libraries in OO\n\n\nbe able to apply OO concepts to design and implement medium to large scale  programs, including\n\n\ndesign and implement a class\n\n\ndecompose a problem solution into classes and define members and methods for each class\n\n\nuse polymorphism effectively\n\n\nuse inheritance to design simple class hierarchies that allow code reuse\n\n\ntrace the control flow of a programs that use dynamic dispatch\n\n\nuse encapsulation mechanisms such as interfaces, private methods/members\n\n\n\n\n\n\nbe familiarize enough with common functional programming concepts and constructs, including lambda expression, effect-free programming, first class functions, infinite streams.\n\n\nbe able to apply functional programming concepts to design and implement , including:\n\n\nImplement basic algorithms in functions that are effect free.\n\n\nImplement useful functions that take/return another function\n\n\nWrite correct and effective code using lambda expressions and/or infinite streams\n\n\n\n\n\n\nbe able to compare and contrast imperative programming, OO programming, and function programming paradigms, and select the most natural paradigms for each situation\n\n\nbe aware of how the OOP and FP concepts are implemented in different ways in different programming languages\n\n\nbe confident enough to learn new programming languages that uses OOP and FP paradigm\n\n\nattain proficiency in Java 8 (and above)\n\n\nbe equipped with solid programming foundations for further studies in computer science\n\n\n\n\nTextbook\n\n\nThere is no textbook for this class.\n\n\nThere are many good books and online articles written about the topics covered in the module.  These will be listed under the \nReadings\n section.",
            "title": "About"
        },
        {
            "location": "/about/index.html#cs2030-programming-methodology-ii",
            "text": "",
            "title": "CS2030 Programming Methodology II"
        },
        {
            "location": "/about/index.html#about",
            "text": "This module is a follow up to CS1010.  It explores two modern programming paradigms, object-oriented programming and functional programming.  Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using object-oriented design principles and advanced programming constructs available in the two paradigms.  Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.",
            "title": "About"
        },
        {
            "location": "/about/index.html#whowhenwhere",
            "text": "Lecture:  10am - 12noon, every Monday  Venue:  LT19  Instructor:   Ooi Wei Tsang  ( ooiwt@comp.nus.edu.sg )  Teaching Assistant:  Kenneth Lu ( lu.yang.kenneth@u.nus.edu )  Lab:  Every Thursday (Week 3 - Week 13)  Midterm Test:  October 2, 2017, Monday, 10am  Final Assessment:  November 29, 2017, Wednesday, 9am.",
            "title": "Who/When/Where"
        },
        {
            "location": "/about/index.html#workload",
            "text": "Besides the 4-hour contact time for lecture and lab, students are expected to spend about 6 hours on average weekly on homework and on preparing the class.",
            "title": "Workload"
        },
        {
            "location": "/about/index.html#history",
            "text": "CS2030 is a new module, required for all students in Bachelor of Computing (Computer Science) and Second Major in Computer Science students, cohort 17/18 onwards.  In 2017, the Department of Computer Science reorganized the two module series on data structures and algorithms (CS1020, CS2010) into (CS2030, CS2040).  CS2040 focuses on data structures and algorithms, while the advanced programming methodologies from CS1020 are moved into CS2030.  CS2030 will also covers some basics OO design that previously were covered in CS2103, and introduces students to functional programming, concurrent programming, event-based programming, and other paradigms that are increasingly important.",
            "title": "History"
        },
        {
            "location": "/about/index.html#learning-outcomes",
            "text": "After completing the module, students should:   be confident in reading and developing medium-scale programs (up to 10K lines of code)  be familiarize enough with common OO concepts to understand software code written in common OO language and understand documentation of software libraries in OO  be able to apply OO concepts to design and implement medium to large scale  programs, including  design and implement a class  decompose a problem solution into classes and define members and methods for each class  use polymorphism effectively  use inheritance to design simple class hierarchies that allow code reuse  trace the control flow of a programs that use dynamic dispatch  use encapsulation mechanisms such as interfaces, private methods/members    be familiarize enough with common functional programming concepts and constructs, including lambda expression, effect-free programming, first class functions, infinite streams.  be able to apply functional programming concepts to design and implement , including:  Implement basic algorithms in functions that are effect free.  Implement useful functions that take/return another function  Write correct and effective code using lambda expressions and/or infinite streams    be able to compare and contrast imperative programming, OO programming, and function programming paradigms, and select the most natural paradigms for each situation  be aware of how the OOP and FP concepts are implemented in different ways in different programming languages  be confident enough to learn new programming languages that uses OOP and FP paradigm  attain proficiency in Java 8 (and above)  be equipped with solid programming foundations for further studies in computer science",
            "title": "Learning Outcomes"
        },
        {
            "location": "/about/index.html#textbook",
            "text": "There is no textbook for this class.  There are many good books and online articles written about the topics covered in the module.  These will be listed under the  Readings  section.",
            "title": "Textbook"
        },
        {
            "location": "/schedule/index.html",
            "text": "Schedule and Learning Material\n\n\n\n\n\n\n\n\nWeek\n\n\nDate\n\n\nTopics\n\n\nResources\n\n\n\n\n\n\n\n\n\n\n\n\n1\n\n\n2017-08-14\n\n\nAbstraction and Encapsulation\n\n\nNotes\n . \nSlides\n . \nVideo\n\n\n\n\n\n\n\n\n2\n\n\n2017-08-21\n\n\nInheritance and Polymorphism\n\n\nNotes\n . \nSlides\n . \nVideo\n\n\n\n\n\n\n\n\n3\n\n\n2017-08-28\n\n\nInheritance, Continued\n\n\nNotes\n . \nSlides\n . \nVideo\n\n\n\n\n\n\n\n\n4\n\n\n2017-09-04\n\n\nMemory, Generics, and Exceptions\n\n\n\n\n\n\n\n\n\n\n5\n\n\n2017-09-11\n\n\nExamples from Java Packages\n\n\n\n\n\n\n\n\n\n\n6\n\n\n2017-09-18\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2017-09-25\n\n\nBreak\n\n\n\n\n\n\n\n\n\n\n7\n\n\n2017-10-02\n\n\nMidterm\n\n\n\n\n\n\n\n\n\n\n8\n\n\n2017-10-09\n\n\n\n\n\n\n\n\n\n\n\n\n9\n\n\n2017-10-16\n\n\n\n\n\n\n\n\n\n\n\n\n10\n\n\n2017-10-23\n\n\n\n\n\n\n\n\n\n\n\n\n11\n\n\n2017-10-30\n\n\n\n\n\n\n\n\n\n\n\n\n12\n\n\n2017-11-06\n\n\n\n\n\n\n\n\n\n\n\n\n13\n\n\n2017-11-13",
            "title": "Schedule"
        },
        {
            "location": "/schedule/index.html#schedule-and-learning-material",
            "text": "Week  Date  Topics  Resources       1  2017-08-14  Abstraction and Encapsulation  Notes  .  Slides  .  Video     2  2017-08-21  Inheritance and Polymorphism  Notes  .  Slides  .  Video     3  2017-08-28  Inheritance, Continued  Notes  .  Slides  .  Video     4  2017-09-04  Memory, Generics, and Exceptions      5  2017-09-11  Examples from Java Packages      6  2017-09-18        2017-09-25  Break      7  2017-10-02  Midterm      8  2017-10-09       9  2017-10-16       10  2017-10-23       11  2017-10-30       12  2017-11-06       13  2017-11-13",
            "title": "Schedule and Learning Material"
        },
        {
            "location": "/prereqs/index.html",
            "text": "Assumed Prior Knowledge\n\n\nCS2030 has the prerequisite of CS1010 or its equivalent.  There are, however, several versions of CS1010, and some students are waived from doing CS1010 due to prior programming knowledge.  This document here outlines the prior knowledge that the instructors assume the students have before entering CS2030.\n\n\nBasic computational problem solving and programming skills\n\n\nHere are some learning outcomes that students should attained after taking CS1010.  Students should be familiar with:\n\n\n\n\nthe computational thinking process of formulating a problem and coming up with a solution,\n\n\nfundamental programming concepts, including variables, assignments, conditions, branches, loops, expressions, functions, recursions, and structures\n\n\nhow to program a given solution in a programming language\n\n\ndifferent classes of programming errors (logical errors, syntax errors, run-time errors)\n\n\ncommon debugging techniques and strategies\n\n\ngood programming practices (comments, naming convention, indentation, modular code)\n\n\nsimple data structures (e.g., arrays)\n\n\nwriting test cases to check correctness of own program\n\n\nhow a program is executed and represented in a computing device (at a high level)\n\n\nthe compilation process (at a high level)\n\n\nthe concept of reusability and the use of standard/3\nrd\n party software\n\n\nbubble sort, insertion sort, linear search, and binary search\n\n\n\n\nStudents who take CS2030 are assumed to have sufficient knowledge of the above.  If there are specific components that you are not familiar with, please pick up the notes from CS1010 and self-learn.\n\n\nUNIX command line\n\n\nWe will use the \nsunfire\n computing server for this module.  As such, you are expected to be comfortable with using CLI (command line interface) and the basic UNIX commands, in a text window without fancy windows and mouse, and the concept of \nssh\n-ing into a remote host and work remotely.\n\n\nIf you are not familiar with this concept, take a look at the \nslides from the CS1010/CS1020 workshop\n.\n\n\nSource code editors\n\n\nYou are expected to be familiar with one or more source code editors.  Note that source code editor is not the same as text editor (e.g., Notepad).  A source code editor automatically highlights syntax, indents the code, matches parenthesis, supports autocompletion and code folding, and integrates with the software development process (such as revision control).\n\n\nCS1010 started (or would have started) you off with \nvim\n.  Many good source code editors exists, such as \nAtom\n, \nVS Code\n, and of course \nemacs\n1\n!\n\n\nFor your career, you should pick one and master it.  If you want to learn \nvim\n, the command \nvimtutor\n is a good place to start.  There are also many tutorials, webcasts, games, etc, online to help you learn \nvim\n.  Just google.\n\n\nDeveloper's Friendly OS\n\n\nYour life through the computing modules would be much much better if you are using a developer's friendly operating system on your personal computer.  \n\n\n\n\n\n\nIf you uses Linux or macOS, you are all set.  For macOS users, \nbrew\n is highly recommended.\n\n\n\n\n\n\nIf you use Windows 10, you should definitely install the Ubuntu Bash Shell.  There are many excellent tutorials online (such as \nthis one\n).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI can't mention \nvim\n without mentioning \nemacs\n\u00a0\n\u21a9",
            "title": "Prerequisites"
        },
        {
            "location": "/prereqs/index.html#assumed-prior-knowledge",
            "text": "CS2030 has the prerequisite of CS1010 or its equivalent.  There are, however, several versions of CS1010, and some students are waived from doing CS1010 due to prior programming knowledge.  This document here outlines the prior knowledge that the instructors assume the students have before entering CS2030.",
            "title": "Assumed Prior Knowledge"
        },
        {
            "location": "/prereqs/index.html#basic-computational-problem-solving-and-programming-skills",
            "text": "Here are some learning outcomes that students should attained after taking CS1010.  Students should be familiar with:   the computational thinking process of formulating a problem and coming up with a solution,  fundamental programming concepts, including variables, assignments, conditions, branches, loops, expressions, functions, recursions, and structures  how to program a given solution in a programming language  different classes of programming errors (logical errors, syntax errors, run-time errors)  common debugging techniques and strategies  good programming practices (comments, naming convention, indentation, modular code)  simple data structures (e.g., arrays)  writing test cases to check correctness of own program  how a program is executed and represented in a computing device (at a high level)  the compilation process (at a high level)  the concept of reusability and the use of standard/3 rd  party software  bubble sort, insertion sort, linear search, and binary search   Students who take CS2030 are assumed to have sufficient knowledge of the above.  If there are specific components that you are not familiar with, please pick up the notes from CS1010 and self-learn.",
            "title": "Basic computational problem solving and programming skills"
        },
        {
            "location": "/prereqs/index.html#unix-command-line",
            "text": "We will use the  sunfire  computing server for this module.  As such, you are expected to be comfortable with using CLI (command line interface) and the basic UNIX commands, in a text window without fancy windows and mouse, and the concept of  ssh -ing into a remote host and work remotely.  If you are not familiar with this concept, take a look at the  slides from the CS1010/CS1020 workshop .",
            "title": "UNIX command line"
        },
        {
            "location": "/prereqs/index.html#source-code-editors",
            "text": "You are expected to be familiar with one or more source code editors.  Note that source code editor is not the same as text editor (e.g., Notepad).  A source code editor automatically highlights syntax, indents the code, matches parenthesis, supports autocompletion and code folding, and integrates with the software development process (such as revision control).  CS1010 started (or would have started) you off with  vim .  Many good source code editors exists, such as  Atom ,  VS Code , and of course  emacs 1 !  For your career, you should pick one and master it.  If you want to learn  vim , the command  vimtutor  is a good place to start.  There are also many tutorials, webcasts, games, etc, online to help you learn  vim .  Just google.",
            "title": "Source code editors"
        },
        {
            "location": "/prereqs/index.html#developers-friendly-os",
            "text": "Your life through the computing modules would be much much better if you are using a developer's friendly operating system on your personal computer.      If you uses Linux or macOS, you are all set.  For macOS users,  brew  is highly recommended.    If you use Windows 10, you should definitely install the Ubuntu Bash Shell.  There are many excellent tutorials online (such as  this one ).        I can't mention  vim  without mentioning  emacs \u00a0 \u21a9",
            "title": "Developer's Friendly OS"
        },
        {
            "location": "/readings/index.html",
            "text": "Readings\n\n\nHere is a collection of readings related to CS2030 or otherwise.\n\n\nOn UNIX, Vim, and Emacs\n\n\n\n\n\n\nStackExchange: \nTime to Drop Emacs and Vim?\n\n\n\n\n\n\nBook: \nThe Art of UNIX Programming\n, online version, by Eric Steven Raymond, 2003. \n\n\n\n\n\n\nOn Programming Practices\n\n\n\n\nGoogle Java Style Guide\n\n\n\n\nOn OOP\n\n\n\n\n\n\nWhy extends in evil\n by Allen Holub. \n\"Good designers write most of their code in terms of interfaces, not concrete base classes.\"\n\n\n\n\n\n\nGoodbye, Object Oriented Programming\n by Charles Scalfani. \n\"One day, my code works and the next day it stops working. Here\u2019s the kicker. I didn\u2019t change my code.\n\"\n\n\n\n\n\n\nFor 1\nst\n Year Students\n\n\n\n\n\n\nNotes to Computer Science Freshmen, From the Future\n: \nEarly into the AY12/13 academic year, Prof Tay Yong Chiang organized a supper for Computer Science freshmen at Tembusu College. The bunch of seniors who were gathered there put together a document for NUS computing freshmen. This is that document.\n\n\n\n\n\n\nHow Not to Go About a Programming Assignment, by Agustin Cernuda del Rio\n: \nComputer programming students invariably fall into more than one bad habit. It can be extremely difficult to eradicate them (and many lecturers and professional programmers keep succumbing to them time and again)..\n\n\n\n\n\n\nBest Teacher I Ever Had, by David Owen\n: \nMr. Whitson taught sixth-grade science. On the first day of class, he gave us a lecture about a creature called the cattywampus, ..\n\n\n\n\n\n\nAcademic Honesty\n: \nAll students share the responsibility for upholding the academic standards and reputation of the University. Academic honesty is a prerequisite condition in the pursuit and acquisition of knowledge..",
            "title": "Readings"
        },
        {
            "location": "/readings/index.html#readings",
            "text": "Here is a collection of readings related to CS2030 or otherwise.",
            "title": "Readings"
        },
        {
            "location": "/readings/index.html#on-unix-vim-and-emacs",
            "text": "StackExchange:  Time to Drop Emacs and Vim?    Book:  The Art of UNIX Programming , online version, by Eric Steven Raymond, 2003.",
            "title": "On UNIX, Vim, and Emacs"
        },
        {
            "location": "/readings/index.html#on-programming-practices",
            "text": "Google Java Style Guide",
            "title": "On Programming Practices"
        },
        {
            "location": "/readings/index.html#on-oop",
            "text": "Why extends in evil  by Allen Holub.  \"Good designers write most of their code in terms of interfaces, not concrete base classes.\"    Goodbye, Object Oriented Programming  by Charles Scalfani.  \"One day, my code works and the next day it stops working. Here\u2019s the kicker. I didn\u2019t change my code.\n\"",
            "title": "On OOP"
        },
        {
            "location": "/readings/index.html#for-1st-year-students",
            "text": "Notes to Computer Science Freshmen, From the Future :  Early into the AY12/13 academic year, Prof Tay Yong Chiang organized a supper for Computer Science freshmen at Tembusu College. The bunch of seniors who were gathered there put together a document for NUS computing freshmen. This is that document.    How Not to Go About a Programming Assignment, by Agustin Cernuda del Rio :  Computer programming students invariably fall into more than one bad habit. It can be extremely difficult to eradicate them (and many lecturers and professional programmers keep succumbing to them time and again)..    Best Teacher I Ever Had, by David Owen :  Mr. Whitson taught sixth-grade science. On the first day of class, he gave us a lecture about a creature called the cattywampus, ..    Academic Honesty :  All students share the responsibility for upholding the academic standards and reputation of the University. Academic honesty is a prerequisite condition in the pursuit and acquisition of knowledge..",
            "title": "For 1st Year Students"
        },
        {
            "location": "/policies/index.html",
            "text": "Policies\n\n\nEmail Communication\n\n\n\n\n\n\nPlease use only your official NUS email for communication with the teaching staffs -- either the one with \n@u.nus.edu\n or \n@comp.nus.edu.sg\n.  \n\n\n\n\n\n\nPlease use email only for private matters.  Prefix your email subject with \n[CS2030]\n.\n\n\n\n\n\n\nPlease use \nPiazza\n for other matters related to the module.  If you email us privately and we feel that your questions/answers are useful to the rest of the class, we will publish it on Piazza, with anonymization when appropriate.\n\n\n\n\n\n\nLab Sessions\n\n\n\n\n\n\nWe do take attendance during the lab sessions, but it does not affect your grades if you do not attend the lab sessions as long as you still need to submit the graded lab exercises.  \n\n\n\n\n\n\nYou should stick to your allocated time slot for labs.  If there is a strong reason for your to attend another lab session, please inform your lab instructors.\n\n\n\n\n\n\nLate Submissions\n\n\n\n\n\n\nAll graded exercise must be submitted on time.  If you need an extension, please ask for one and provide a justification for approval.  \n\n\n\n\n\n\nFor late submission, there is a 1% penalty (of the assessment grade) for every minute after the deadline, capped at 80%.  For example, if a homework is deserved 40 marks, and it is submitted 20 minutes after the deadline, the student will get 32 marks instead (20% penalty).  If it is submitted 2 hours after the deadline, the student will get 8 marks (as it has hit the cap of 80% penalty).\n\n\n\n\n\n\nDiscussions and Plagiarism\n\n\n\n\n\n\nWe encourage discussions among students for lab assignments, but each student should be responsible for writing his/her own code and should give credits to others when appropriate.  \n\n\n\n\n\n\nNUS and School of Computing have a high standard on academic honesty and take any violation seriously.  In the context of computing modules, source code plagiarism -- copying code from another source and attributing it as one's own code -- is a series violation.   Please read the page \nPreventing Plagiarism\n from the school's website to familiarize yourself with the policy.\n\n\n\n\n\n\nI adopt a \"no mercy\" policy when it comes to disciplinary action on plagiarism.  Both parties, the student who copied, and the student who allowed others to copy, will be penalized equally.\n\n\n\n\n\n\nLecture Video\n\n\n\n\n\n\nScreencast will be recorded and posted online 2-3 days after the lecture. \nThis will be done on a 'best effort' basis and screencast will not be guaranteed to be available.  \n\n\n\n\n\n\nPosting of screencast is meant to help students who attended the lecture to recap the content, or to help those who are not able to attend the lecture due to unexpected circumstances.  It does not mean that you should skip lecture.\n\n\n\n\n\n\nModel Solutions and Slides\n\n\n\n\n\n\nSlides will be posted \nafter\n the class.  Note that slides are used as a \nvisual aid\n to assist me during lecture.  It is not meant as summary of lectures nor a replacement of lecture notes.\n\n\n\n\n\n\nIn a module like CS2030, there is often not a single correct answer.  Hence, there is no model solution for this module.  Sample solutions may be posted (both good and bad ones) for discussion.  I strongly encourage students to discuss your solution with me, instead of just comparing your solution with the sample solution.\n\n\n\n\n\n\nGrading\n\n\n\n\nStudents will received the grades they deserved irrespective of how the other students in the class performed (i.e., no bell curve)\n\n\n\n\nOpen Book Assessment\n\n\n\n\n\n\nAll assessment, including graded labs, midterm test, and final assessment, are open book assessment -- you can bring in your notes or other \nanalog\n reference materials.  Java documentation will be made available during labs.  Relevant Java APIs will be provided during midterm tests and final assessments.\n\n\n\n\n\n\nThere is \nnothing to memorize\n for this class.",
            "title": "Policies"
        },
        {
            "location": "/policies/index.html#policies",
            "text": "",
            "title": "Policies"
        },
        {
            "location": "/policies/index.html#email-communication",
            "text": "Please use only your official NUS email for communication with the teaching staffs -- either the one with  @u.nus.edu  or  @comp.nus.edu.sg .      Please use email only for private matters.  Prefix your email subject with  [CS2030] .    Please use  Piazza  for other matters related to the module.  If you email us privately and we feel that your questions/answers are useful to the rest of the class, we will publish it on Piazza, with anonymization when appropriate.",
            "title": "Email Communication"
        },
        {
            "location": "/policies/index.html#lab-sessions",
            "text": "We do take attendance during the lab sessions, but it does not affect your grades if you do not attend the lab sessions as long as you still need to submit the graded lab exercises.      You should stick to your allocated time slot for labs.  If there is a strong reason for your to attend another lab session, please inform your lab instructors.",
            "title": "Lab Sessions"
        },
        {
            "location": "/policies/index.html#late-submissions",
            "text": "All graded exercise must be submitted on time.  If you need an extension, please ask for one and provide a justification for approval.      For late submission, there is a 1% penalty (of the assessment grade) for every minute after the deadline, capped at 80%.  For example, if a homework is deserved 40 marks, and it is submitted 20 minutes after the deadline, the student will get 32 marks instead (20% penalty).  If it is submitted 2 hours after the deadline, the student will get 8 marks (as it has hit the cap of 80% penalty).",
            "title": "Late Submissions"
        },
        {
            "location": "/policies/index.html#discussions-and-plagiarism",
            "text": "We encourage discussions among students for lab assignments, but each student should be responsible for writing his/her own code and should give credits to others when appropriate.      NUS and School of Computing have a high standard on academic honesty and take any violation seriously.  In the context of computing modules, source code plagiarism -- copying code from another source and attributing it as one's own code -- is a series violation.   Please read the page  Preventing Plagiarism  from the school's website to familiarize yourself with the policy.    I adopt a \"no mercy\" policy when it comes to disciplinary action on plagiarism.  Both parties, the student who copied, and the student who allowed others to copy, will be penalized equally.",
            "title": "Discussions and Plagiarism"
        },
        {
            "location": "/policies/index.html#lecture-video",
            "text": "Screencast will be recorded and posted online 2-3 days after the lecture. \nThis will be done on a 'best effort' basis and screencast will not be guaranteed to be available.      Posting of screencast is meant to help students who attended the lecture to recap the content, or to help those who are not able to attend the lecture due to unexpected circumstances.  It does not mean that you should skip lecture.",
            "title": "Lecture Video"
        },
        {
            "location": "/policies/index.html#model-solutions-and-slides",
            "text": "Slides will be posted  after  the class.  Note that slides are used as a  visual aid  to assist me during lecture.  It is not meant as summary of lectures nor a replacement of lecture notes.    In a module like CS2030, there is often not a single correct answer.  Hence, there is no model solution for this module.  Sample solutions may be posted (both good and bad ones) for discussion.  I strongly encourage students to discuss your solution with me, instead of just comparing your solution with the sample solution.",
            "title": "Model Solutions and Slides"
        },
        {
            "location": "/policies/index.html#grading",
            "text": "Students will received the grades they deserved irrespective of how the other students in the class performed (i.e., no bell curve)",
            "title": "Grading"
        },
        {
            "location": "/policies/index.html#open-book-assessment",
            "text": "All assessment, including graded labs, midterm test, and final assessment, are open book assessment -- you can bring in your notes or other  analog  reference materials.  Java documentation will be made available during labs.  Relevant Java APIs will be provided during midterm tests and final assessments.    There is  nothing to memorize  for this class.",
            "title": "Open Book Assessment"
        },
        {
            "location": "/lec1/index.html",
            "text": "Lecture 1: Abstraction and Encapsulation\n\n\nLearning Objectives\n\n\nAfter this lecture, students should:\n\n\n\n\nrecap some fundamental programming concepts, including the execution model of a program, abstractions over code and data, primitive and composite data types.\n\n\nappreciate the importance of maintaining abstraction barrier in software development\n\n\nunderstand the differences between statically and dynamically typed languages\n\n\nunderstand the concepts of object-oriented programming, including encapsulation, data hiding, fields and methods, constructors, mutators/accessors, classes and objects, and their purposes of introducing them as a method of programming.\n\n\nknow the purpose and usage of Java keywords \nclass\n, \npublic\n, \nprivate\n, \nfinal\n, \nstatic\n, \nimport\n, \nnew\n\n\nbe able to build a mental model for how an object is represented in Java\n\n\n\n\nWhat Exactly is a \nProgram\n?\n\n\nA program is a set of instructions we issue to computers to manipulate data.  A programming language is a formal language that helps programmers specify precisely what are the instructions we issue to computers, using code that are often made up of keywords, symbols, and names.  Computers execute the instructions in their \nprocessing units\n, and store the instructions and data in their \nmemory\n1\n.  The processing units recognizes the instructions based on the specific patterns of bits and manipulate data as a sequence of bits.  A programming language, however, is written at a higher level of \nabstraction\n (i.e., at a higher conceptual level), so that as a programmer, we only need to write a few lines of code to give complex instructions to the computer.  A \ncompiler\n or \ninterpreter\n is responsible for translating these programs written in high level language to \nassembly code\n or \nmachine code\n, i.e., bit patterns that the processing units can understand.\n\n\nThere are thousands of programming languages in existence.  \nC\n is one of the languages that is a \nlow-level language\n -- i.e., it provides very thin layer of abstractions on top of machine code.  On the other hand, languages such as \nPython\n and \nJavaScript\n are high-level languages.  As an example, in C, you can directly manage memory allocation.  In JavaScript and Python, you cannot.\n\n\nAbstraction: Variable and Type\n\n\nOne of the important abstractions that is provided by a programming language is \nvariable\n.  Data are stored in some location in the computer memory.  But we should not be referring to the memory location all the time.  First, referring to something like \n0xFA49130E\n is not user-friendly; Second, the location may change.  A \nvariable\n is an abstraction that allows us to give a user friendly name to memory location.  We use the \nvariable name\n whenever we want to access the \nvalue\n in that location, and \npointer to the variable\n or \nreference to the variable\n whenever we want to refer to the address of the location.\n\n\nLet's think a bit more about how sequence of bits is abstracted as data in a programming language.  At the machine level, these bits are just, well, bits.  We give the bits a \nsemantic\n at the program level, e.g., we want to interpret the sequence of bits as numbers, letters, etc.  E.g., the number (integer, to be exact) \n65\n and the letter \nA\n all share the same sequence of bits \n0100 00011\n but are interpreted differently and possibly manipulated differently.  \n\n\nThe \ntype\n of a variable tells the compiler how to interpret the variable and how to manipulate the variable.  \n\n\nFor instance, supposed that in Python, if you have two variables \nx\n and \ny\n storing the values \n4\n and \n5\n respectively, if you \nprint x + y\n, you may get \n45\n if \nx\n and \ny\n are strings, or you may get \n9\n if \nx\n and \ny\n are integers, or you may get an error if \n4\n is an integer and \n5\n is a string.  \n\n\nIn the last instance above, you see that assigning types of variables helps to keep the program meaningful, as the operation \n+\n is not defined over an integer and a string in Python\n2\n.\n\n\nPython is a \ndynamically typed\n language.  The same variable can hold values of different types, and checking if the right type is used is done during the execution of the program.  Note that, the type is associated with the \nvalues\n, and the type of the variable changes depending on the value it holds.\n\n\nC, on the other hand, is a \nstatically typed\n language.  We need to \ndeclare\n every variable we use in the program and specify its type.  A variable can only hold values of the same type as the type of the variable, so we can't assign, for instance, a string to a variable of type \nint\n.  We check if the right type is used during the compilation of the program.\n\n\n1\n2\nint\n \nx\n \n=\n \n4\n;\n \n// ok\n\n\nint\n \ny\n \n=\n \n\"5\"\n;\n \n// error\n\n\n\n\n\n\n\nBy annotating each variable with its type, the C compiler also knows how much memory space is needed to store a variable.  \n\n\nAbstraction: Functions\n\n\nAnother important abstraction provided by a programming language is \nfunction\n (or \nprocedure\n).  This abstraction allows programmers to group a set of instructions and give it a name.  The named set of instructions may take one or more variables as input parameters, and return one or more values.   \n\n\nLike all other abstractions, defining functions allow us to think at a higher conceptual level.  By composing functions at increasingly higher level of abstractions, we can build programs with increasing level of complexity.\n\n\nDefining functions allow us to abstract away the implementation details from the caller.  Once a function is defined, we can change the way the function is implemented without affecting the code that calls the function, as long as the semantic and the \ninterface\n of the function remains the same.\n\n\nFunctions therefore is a critical mechanism for achieving \nseparation of concerns\n in a program.  We separate the concerns about how a particular function is implemented, from the concerns about how the function is used to perform a higher-level task.\n\n\nDefining functions also allow us to \nreuse\n code.  We do not have to repeatedly write the same chunk of code if we group the sequence of code into a function -- then we just need to call the function to invoke this sequence of code every time we need it.  If this chunk of code is properly written and debugged, then we can be pretty sure that everywhere the function is invoked, the code is correct\n3\n.\n\n\nC is a \nprocedural language\n.  A C program consists of functions, with the \nmain()\n function serves as the entry point to the program.  Since C is a statically type language, a C function has a return type, and each  function parameter (or \nargument\n) has a type as well.  (Note that this statement does not mean that C function must return a \nvalue\n.  If the function does not return a value, we define its return type as \nvoid\n.)\n\n\nRecall that the bits representing the instructions are also stored in the computer memory in a separate area from the data.  The group of instructions that belongs to the same function are stored together.  Just like we can refer to a variable using its memory address using its \nreference\n (or \npointer\n), we can refer to a function using the memory address of the entry point to the function.\n\n\nAbstraction: Composite Data type\n\n\nJust like functions allow programmers to group instructions, give it a name, and refer to it later, a \ncomposite data type\n allow programers to group \nprimitive types\n together, give it a name (a new type), and refer to it later.  This is another powerful abstraction in programming languages that help us to think at a higher conceptual level without worrying about the details.   Commonly used examples are mathematical objects such as complex numbers, 2D data points, multi-dimensional vectors, circles, etc, or everyday objects such as a person, a product, etc.\n\n\nDefining composite data type allows programmers to abstract away (and be separated from the concern of) how a complex data type is represented.\n\n\nFor instance, a circle on a 2D plane can be represented by the center (\nx\n, \ny\n) and its radius \nr\n, or it can be represented by the top left corner (\nx\n,\ny\n) and the width \nw\n of the bounding square.\n\n\nIn C, we build composite data type with \nstruct\n.  For example,\n\n\n1\n2\n3\n4\nstruct\n \ncircle\n \n{\n\n  \nfloat\n \nx\n,\n \ny\n;\n \n// (x,y) coordinate of the center.\n\n  \nfloat\n \nr\n;\n \n// radius\n\n\n}\n\n\n\n\n\n\n\nOnce we have the \nstruct\n defined, we are not completely shielded from its representation, until we write a set of functions that operates on the \ncircle\n composite type.  For instance,\n\n\n1\n2\n3\nfloat\n \ncircle_area\n(\ncircle\n \nc\n)\n \n{\n \n...\n \n};\n\n\nbool\n  \ncircle_contains_point\n(\ncircle\n \nc\n,\n \npoint\n \np\n)\n \n{\n \n...\n \n};\n\n  \n:\n\n\n\n\n\n\n\nImplementation of these functions obvious requires knowledge of how a circle is represented.  Once the set of functions that operates on and manipulate circles are available, we can use \ncircle\n type without worrying about the internal representation.  \n\n\nIf we decided to change the representation of a circle, then only the set of functions that operates on a circle type need to be changed, but not the code that uses circles to do other things.\n\n\nWe can imagine an \nabstraction barrier\n between the code that uses a composite data type along with its associated set of functions, and the code that define the data type along with the implementation of the functions.  Above the barrier, the concern is about using the composite data type to do useful things, while below the barrier, the concern is about how to represent and manipulate the composite data type.\n\n\nAbstraction: Class and Object (or, Encapsulation)\n\n\nWe can further bundle the composite data type and its associated functions together in another abstraction, called a \nclass\n.  A class is a data type with a group of functions associated with it.  We call the functions as \nmethods\n and the data in the class as \nfields\n (or \nmembers\n, or \nstates\n, or \nattributes\n4\n).   A well-designed class maintain the abstraction barrier, properly wrapped the barrier around the internal representation and implementation, and exposes just the right interface for others to use.\n\n\nJust like we can create variables of a given type, we can create \nobjects\n of a given class.  Objects are instances of a class, each allowing the same methods to be called, and each containing the same set of variables of the same types, but (possibly) storing different values.\n\n\nRecall that programs written in a procedural language such as a C consists of functions, with a \nmain()\n function as the entry point.  A program written in an \nobject-oriented language\n such as Java consists of classes, with one main class as the entry point.  One can view a running object-oriented (or OO) program as something that instantiates objects of different classes and orchestrates their interactions with each other by calling each others' methods.\n\n\nOne could argue that an object-oriented way of writing programs is much more natural, as it mirrors our world more closely.  If we look around us, we see objects all around us, and each object has a certain behavior and they allow certain actions.  We interact with the objects through their interfaces, and we rarely need to know the internals of the objects we used everyday (unless we try to repair it)\n5\n.  \n\n\nThis concept, of keeping the all the data and functions operating on the data related to a composite data type together within an abstraction barrier, is called \nencapsulation\n.\n\n\nBreaking the Abstraction Barrier\n\n\nIn the ideal case, the code above the abstraction barrier would just call the provided interface to use the composite data type.  There, however, may be cases where a programmer may intentionally or accidentally break the abstraction barrier.  \n\n\nConsider the case of implementing \ncircle\n as a C \nstruct\n.  Suppose someone wants to move the center of the circle \nc\n to a new position (\nx\n, \ny\n), instead of implementing a function \ncircle_move_to(c, x, y)\n (which would still keep the representation used under the barrier), the person wrote:\n\n\n1\n2\nc\n.\nx\n \n=\n \nx\n;\n\n\nc\n.\ny\n \n=\n \ny\n;\n\n\n\n\n\n\n\nThis code would still be correct, but the abstraction barrier is broken since we now make explicit assumption that there are two variables \nx\n and \ny\n inside the \ncircle\n data type that correspond to the center of the circle.  If one day, we want to represent a circle in a different way, then we have to carefully change all the code that read and write these variables \nx\n and \ny\n and update them.\n\n\n\n\nBreaking Python's Abstraction Barrier\n\n\nPython tries to prevent \naccidental\n access to internal representation by having a convention of prefixing the internal variables with \n_\n (one underscore) or \n__\n (two underscores).   This method, however, does not prevent a lazy programmer from directly accessing the variables and possibly planting a bug / error that will surface later.\n\n\n\n\nData Hiding\n\n\nMany OO languages allow programmers to explicitly specify if a field or a method can be accessed from outside the abstraction barrier.  Java, for instance, support \nprivate\n and \npublic\n access modifiers\n5\n.  A field or a method that is declared as \nprivate\n cannot be accessed from outside the class, and can only be accessed within the class.  On the other hand, as you can guess, a \npublic\n field or method can be accessed, modified, or invoked from outside the class.\n\n\nSuch mechanism to protect the abstraction barrier from being broken is called \ndata hiding\n or \ninformation hiding\n.  This protection is enforced in the \ncompiler\n during compile time.\n\n\nExample: The Circle class\n\n\nLet's put together the concepts of encapsulation, data hiding to define a \nCircle\n class in Java:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n/**\n\n\n * A Circle object encapsulates a circle on a 2D plane.  \n\n\n */\n\n\nclass\n \nCircle\n \n{\n\n  \nprivate\n \ndouble\n \nx\n;\n  \n// x-coordinate of the center\n\n  \nprivate\n \ndouble\n \ny\n;\n  \n// y-coordinate of the center\n\n  \nprivate\n \ndouble\n \nr\n;\n  \n// the length of the radius\n\n\n  \n/**\n\n\n   * Return the area of the circle.\n\n\n   */\n\n  \npublic\n \ndouble\n \ngetArea\n()\n \n{\n\n    \nreturn\n \n3.1415926\n*\nr\n*\nr\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Move the center of the circle to the new position (newX, newY)\n\n\n   */\n\n  \npublic\n \nvoid\n \nmoveTo\n(\ndouble\n \nnewX\n,\n \ndouble\n \nnewY\n)\n \n{\n\n    \nx\n \n=\n \nnewX\n;\n\n    \ny\n \n=\n \nnewY\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nThe class above is still missing many essential components, and not a complete program.\n\n\nConstructors, Accessors, and Mutators\n\n\nWith data hiding, we completely isolate the internals representation of a class using an abstraction barrier.  With no way for the user of the class to modify the fields directly, it is common for a class to provide methods to initialize and modify these internal fields (such as the \nmoveTo()\n method above).  A method that initializes an object is called a \nconstructor\n, and a method that retrieves or modifies the properties of the object is called the \naccessor\n (or \ngetter\n) or \nmutator\n (or \nsetter\n).\n\n\nA constructor method is a special method within the class.  It cannot be called directly, but is invoked automatically when an object is instantiated.   In Java, a constructor method has the same name as the class and has no return type.  A constructor can take in arguments just like other functions.  The class \nCircle\n can have a constructor such as the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nclass\n \nCircle\n \n{\n\n    \n:\n\n  \n/**\n\n\n   * Create a circle centered on (centerX, centerY) with given radius\n\n\n  */\n\n  \npublic\n \nCircle\n(\ndouble\n \ncenterX\n,\n \ndouble\n \ncenterY\n,\n \ndouble\n \nradius\n)\n \n{\n\n    \nx\n \n=\n \ncenterX\n;\n\n    \ny\n \n=\n \ncenterY\n;\n\n    \nr\n \n=\n \nradius\n;\n\n  \n}\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nThe use of accessor and mutator methods is a bit controversial.   Suppose that we provide an accessor method and a mutator method for every private field, then we are actually exposing the internal representation, therefore breaking the encapsulation.  For instance:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\nclass\n \nCircle\n \n{\n\n    \n:\n\n\n  \npublic\n \ndouble\n \ngetX\n()\n \n{\n\n    \nreturn\n \nx\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetX\n(\ndouble\n \nnewX\n)\n \n{\n\n    \nx\n \n=\n \nnewX\n;\n\n  \n}\n\n\n  \npublic\n \ndouble\n \ngetY\n()\n \n{\n\n    \nreturn\n \ny\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetY\n(\ndouble\n \nnewY\n)\n \n{\n\n    \ny\n \n=\n \nnewY\n:\n\n  \n}\n\n\n  \npublic\n \ndouble\n \ngetR\n()\n \n{\n\n    \nreturn\n \nr\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetR\n(\ndouble\n \nnewR\n)\n \n{\n\n    \nr\n \n=\n \nnewR\n;\n\n  \n}\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nThe examples above are pretty pointless.  If we need to know the internal and do something with it, we are doing it wrong.  The right approach is to implement a method within the class that do whatever we want the class to do.   For instance, suppose that we want to know the circumference of the circle, one approach would be:\n\n\n1\n   \ndouble\n \ncircumference\n \n=\n \n2\n*\nc\n.\ngetR\n()*\n3.1415926\n;\n\n\n\n\n\n\n\nwhere c is a \nCircle\n object.\n\n\nA better approach would be to add a new method \ngetCircumference()\n in the \nCircle\n class, and call this instead:\n\n1\n   \ndouble\n \ncircumference\n \n=\n \nc\n.\ngetCircumference\n();\n\n\n\n\n\n\nThe better approach involves writing more lines of code, but it keeps the encapsulation in tact.\n\n\n\n\nConstructor in Python and JavaScript\n\n\nIn Python, the constructor is the \n__init__\n method.   In JavaScript, the constructor is simply called \nconstructor\n.\n\n\n\n\nClass Fields and Methods\n\n\nLet's look at the implementation of \ngetArea()\n above.  We use the constant \n\\(\\pi\\)\n but hardcoded it as 3.1415926.  Hardcoding such a magic number is a \nno no\n in terms of coding style.  This constant can appear in more than one places, and if we hardcode such a number, and want to change the precision of it later, we would need to trace down and change every occurrence.  Not only this introduces more work, but likely to introduce bugs.  \n\n\nIn C, we define it as a macro constant \nM_PI\n.  But how should we do this in Java?  This is where the ideal that a program consists of only objects with internal states that communicate with each other feel a bit constraining.  The constant \n\\(\\pi\\)\n is universal, and not really belong to any object (the value of Pi is the same for every circle!).  If we start to define a method \nsqrt()\n that computes the square root of a given number, this is a general function that is not associated with any object as well.\n\n\nA solution to this is to associate these global values and functions with a \nclass\n instead of with an \nobject\n.  For instance. Java predefines a \nMath\n class\n6\n that is populated with constants \nPI\n and \nE\n (for Euler's number \n\\(e\\)\n), along with a long list of mathematical functions.  To associate a method or a field with a class in Java, we declare them with the \nstatic\n keyword.  We can additionally add a keyword \nfinal\n to indicate that the value of the field will not change\n7\n.\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nMath\n \n{\n\n  \n:\n\n  \npublic\n \nstatic\n \nfinal\n \ndouble\n \nPI\n \n=\n \n3.141592653589793\n;\n\n  \n:\n\n  \n:\n\n\n}\n\n\n\n\n\n\n\nWe call these fields and methods that are associated with a class as \nclass fields\n and \nclass methods\n, and fields and methods that are associated with an object as \ninstance fields\n and \ninstance methods\n.\n\n\n\n\nClass Fields and Methods in Python\n\n\nNote that, in Python, any variable declared within a \nclass\n block is a class field:\n\n1\n2\n3\nclass\n \nCircle\n:\n\n  \nx\n \n=\n \n0\n\n  \ny\n \n=\n \n0\n\n\n\n\n\nIn the above example, \nx\n and \ny\n are class fields, not instance fields.\n\n\n\n\nMemory Model for Objects\n\n\nVariables and functions are stored in the memory of the computers as bits, usually in two separate regions.  Since an object encapsulates both variables and functions, where are they stored?  \n\n\nDifferent implementations might stored the objects differently, but here is one way that we will follow for this class:\n\n\n\n\nIn the figure above, there are two objects of the same class.  An objects is referred to through its references, which is a pointer to memory location where the instance fields for the object is stored, along with a pointer to a \nmethod table\n.  A method table stores a table of pointers to the methods, along with a table to the class fields.    \n\n\nExample: The Circle class\n\n\nNow, let revise our \nCircle\n class to improve the code and make it a little more complete:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\nimport\n \njava.lang.Math\n;\n\n\n\n/**\n\n\n * A Circle object encapsulates a circle on a 2D plane.  \n\n\n */\n\n\nclass\n \nCircle\n \n{\n\n  \nprivate\n \ndouble\n \nx\n;\n  \n// x-coordinate of the center\n\n  \nprivate\n \ndouble\n \ny\n;\n  \n// y-coordinate of the center\n\n  \nprivate\n \ndouble\n \nr\n;\n  \n// the length of the radius\n\n\n  \n/**\n\n\n   * Create a circle centered on (centerX, centerY) with given radius\n\n\n  */\n\n  \npublic\n \nCircle\n(\ndouble\n \ncenterX\n,\n \ndouble\n \ncenterY\n,\n \ndouble\n \nradius\n)\n \n{\n\n    \nx\n \n=\n \ncenterX\n;\n\n    \ny\n \n=\n \ncenterY\n;\n\n    \nr\n \n=\n \nradius\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Return the area of the circle.\n\n\n   */\n\n  \npublic\n \ndouble\n \ngetArea\n()\n \n{\n\n    \nreturn\n \nMath\n.\nPI\n*\nr\n*\nr\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Return the circumference of the circle.\n\n\n   */\n\n  \npublic\n \ndouble\n \ngetCircumference\n()\n \n{\n\n    \nreturn\n \nMath\n.\nPI\n*\n2\n*\nr\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Move the center of the circle to the new position (newX, newY)\n\n\n   */\n\n  \npublic\n \nvoid\n \nmoveTo\n(\ndouble\n \nnewX\n,\n \ndouble\n \nnewY\n)\n \n{\n\n    \nx\n \n=\n \nnewX\n;\n\n    \ny\n \n=\n \nnewY\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Return true if the given point (testX, testY) is within the circle.\n\n\n   */\n\n  \npublic\n \nboolean\n \ncontains\n(\ndouble\n \ntestX\n,\n \ndouble\n \ntestY\n)\n \n{\n\n    \nreturn\n \nfalse\n;\n\n    \n// TODO: left as an exercise  \n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nCreating and Interacting with \nCircle\n objects\n\n\nTo use the \nCircle\n class, we can either:\n\n\n\n\ncreate a \nmain()\n function, compile and link with the \nCircle\n class, and create an executable program, just like we usually do with a C program, OR\n\n\nuse a new bleeding-edge tool called \njshell\n, which is part of Java 9 (to be released September 2017), and its \nread-evaluate-print loop\n (REPL) to help us quickly try out various features of Java.\n\n\n\n\nWe will write a complete Java program with \nmain()\n within two weeks, but for now, we will use \njshell\n to demonstrate the various language features of Java\n7\n.\n\n\nThe demonstration below loads the \nCircle\n class written above (with the \ncontains\n method completed) from a file named \nCircle.java\n8\n, and creates two \nCircle\n objects, \nc1\n and \nc2\n.  We use the \nnew\n keyword to tell Java to create an object of type \nCircle\n here, passing in the center and the radius.\n\n\n\n\n\n\n\n\n\n\n\n\n\nOften, the instructions and data are stored in different regions of the memory.\u00a0\n\u21a9\n\n\n\n\n\n\nJavascript would happily convert \n4\n into a string for you, and return \n45\n.\u00a0\n\u21a9\n\n\n\n\n\n\nassuming the parameters are passed in correctly.\u00a0\n\u21a9\n\n\n\n\n\n\nComputer scientists just can't decide on what to call this!\u00a0\n\u21a9\n\n\n\n\n\n\nOthers include \nprotected\n and the \ndefault\n modifier, but let's not sweat about the details for now.\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nThe class \nMath\n is provided by the package \njava.lang\n in Java.  A package is simply a set of related classes (and interfaces, but I have not told you what is an interface yet).  To use this class, we need to add the line \nimport\n \njava.lang.Math\n in the beginning of our program.\u00a0\n\u21a9\n\n\n\n\n\n\nYou can download and install \njshell\n yourself, as part of \nJava Development Kit version 9 (JDK 9)\n\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nWe use the convention of one public class per file, name the file with the exact name of the class (including capitalization), and include the extension \n.java\n to the filename.\u00a0\n\u21a9",
            "title": "1. Abstraction & Encapsulation"
        },
        {
            "location": "/lec1/index.html#lecture-1-abstraction-and-encapsulation",
            "text": "",
            "title": "Lecture 1: Abstraction and Encapsulation"
        },
        {
            "location": "/lec1/index.html#learning-objectives",
            "text": "After this lecture, students should:   recap some fundamental programming concepts, including the execution model of a program, abstractions over code and data, primitive and composite data types.  appreciate the importance of maintaining abstraction barrier in software development  understand the differences between statically and dynamically typed languages  understand the concepts of object-oriented programming, including encapsulation, data hiding, fields and methods, constructors, mutators/accessors, classes and objects, and their purposes of introducing them as a method of programming.  know the purpose and usage of Java keywords  class ,  public ,  private ,  final ,  static ,  import ,  new  be able to build a mental model for how an object is represented in Java",
            "title": "Learning Objectives"
        },
        {
            "location": "/lec1/index.html#what-exactly-is-a-program",
            "text": "A program is a set of instructions we issue to computers to manipulate data.  A programming language is a formal language that helps programmers specify precisely what are the instructions we issue to computers, using code that are often made up of keywords, symbols, and names.  Computers execute the instructions in their  processing units , and store the instructions and data in their  memory 1 .  The processing units recognizes the instructions based on the specific patterns of bits and manipulate data as a sequence of bits.  A programming language, however, is written at a higher level of  abstraction  (i.e., at a higher conceptual level), so that as a programmer, we only need to write a few lines of code to give complex instructions to the computer.  A  compiler  or  interpreter  is responsible for translating these programs written in high level language to  assembly code  or  machine code , i.e., bit patterns that the processing units can understand.  There are thousands of programming languages in existence.   C  is one of the languages that is a  low-level language  -- i.e., it provides very thin layer of abstractions on top of machine code.  On the other hand, languages such as  Python  and  JavaScript  are high-level languages.  As an example, in C, you can directly manage memory allocation.  In JavaScript and Python, you cannot.",
            "title": "What Exactly is a Program?"
        },
        {
            "location": "/lec1/index.html#abstraction-variable-and-type",
            "text": "One of the important abstractions that is provided by a programming language is  variable .  Data are stored in some location in the computer memory.  But we should not be referring to the memory location all the time.  First, referring to something like  0xFA49130E  is not user-friendly; Second, the location may change.  A  variable  is an abstraction that allows us to give a user friendly name to memory location.  We use the  variable name  whenever we want to access the  value  in that location, and  pointer to the variable  or  reference to the variable  whenever we want to refer to the address of the location.  Let's think a bit more about how sequence of bits is abstracted as data in a programming language.  At the machine level, these bits are just, well, bits.  We give the bits a  semantic  at the program level, e.g., we want to interpret the sequence of bits as numbers, letters, etc.  E.g., the number (integer, to be exact)  65  and the letter  A  all share the same sequence of bits  0100 00011  but are interpreted differently and possibly manipulated differently.    The  type  of a variable tells the compiler how to interpret the variable and how to manipulate the variable.    For instance, supposed that in Python, if you have two variables  x  and  y  storing the values  4  and  5  respectively, if you  print x + y , you may get  45  if  x  and  y  are strings, or you may get  9  if  x  and  y  are integers, or you may get an error if  4  is an integer and  5  is a string.    In the last instance above, you see that assigning types of variables helps to keep the program meaningful, as the operation  +  is not defined over an integer and a string in Python 2 .  Python is a  dynamically typed  language.  The same variable can hold values of different types, and checking if the right type is used is done during the execution of the program.  Note that, the type is associated with the  values , and the type of the variable changes depending on the value it holds.  C, on the other hand, is a  statically typed  language.  We need to  declare  every variable we use in the program and specify its type.  A variable can only hold values of the same type as the type of the variable, so we can't assign, for instance, a string to a variable of type  int .  We check if the right type is used during the compilation of the program.  1\n2 int   x   =   4 ;   // ok  int   y   =   \"5\" ;   // error    By annotating each variable with its type, the C compiler also knows how much memory space is needed to store a variable.",
            "title": "Abstraction: Variable and Type"
        },
        {
            "location": "/lec1/index.html#abstraction-functions",
            "text": "Another important abstraction provided by a programming language is  function  (or  procedure ).  This abstraction allows programmers to group a set of instructions and give it a name.  The named set of instructions may take one or more variables as input parameters, and return one or more values.     Like all other abstractions, defining functions allow us to think at a higher conceptual level.  By composing functions at increasingly higher level of abstractions, we can build programs with increasing level of complexity.  Defining functions allow us to abstract away the implementation details from the caller.  Once a function is defined, we can change the way the function is implemented without affecting the code that calls the function, as long as the semantic and the  interface  of the function remains the same.  Functions therefore is a critical mechanism for achieving  separation of concerns  in a program.  We separate the concerns about how a particular function is implemented, from the concerns about how the function is used to perform a higher-level task.  Defining functions also allow us to  reuse  code.  We do not have to repeatedly write the same chunk of code if we group the sequence of code into a function -- then we just need to call the function to invoke this sequence of code every time we need it.  If this chunk of code is properly written and debugged, then we can be pretty sure that everywhere the function is invoked, the code is correct 3 .  C is a  procedural language .  A C program consists of functions, with the  main()  function serves as the entry point to the program.  Since C is a statically type language, a C function has a return type, and each  function parameter (or  argument ) has a type as well.  (Note that this statement does not mean that C function must return a  value .  If the function does not return a value, we define its return type as  void .)  Recall that the bits representing the instructions are also stored in the computer memory in a separate area from the data.  The group of instructions that belongs to the same function are stored together.  Just like we can refer to a variable using its memory address using its  reference  (or  pointer ), we can refer to a function using the memory address of the entry point to the function.",
            "title": "Abstraction: Functions"
        },
        {
            "location": "/lec1/index.html#abstraction-composite-data-type",
            "text": "Just like functions allow programmers to group instructions, give it a name, and refer to it later, a  composite data type  allow programers to group  primitive types  together, give it a name (a new type), and refer to it later.  This is another powerful abstraction in programming languages that help us to think at a higher conceptual level without worrying about the details.   Commonly used examples are mathematical objects such as complex numbers, 2D data points, multi-dimensional vectors, circles, etc, or everyday objects such as a person, a product, etc.  Defining composite data type allows programmers to abstract away (and be separated from the concern of) how a complex data type is represented.  For instance, a circle on a 2D plane can be represented by the center ( x ,  y ) and its radius  r , or it can be represented by the top left corner ( x , y ) and the width  w  of the bounding square.  In C, we build composite data type with  struct .  For example,  1\n2\n3\n4 struct   circle   { \n   float   x ,   y ;   // (x,y) coordinate of the center. \n   float   r ;   // radius  }    Once we have the  struct  defined, we are not completely shielded from its representation, until we write a set of functions that operates on the  circle  composite type.  For instance,  1\n2\n3 float   circle_area ( circle   c )   {   ...   };  bool    circle_contains_point ( circle   c ,   point   p )   {   ...   }; \n   :    Implementation of these functions obvious requires knowledge of how a circle is represented.  Once the set of functions that operates on and manipulate circles are available, we can use  circle  type without worrying about the internal representation.    If we decided to change the representation of a circle, then only the set of functions that operates on a circle type need to be changed, but not the code that uses circles to do other things.  We can imagine an  abstraction barrier  between the code that uses a composite data type along with its associated set of functions, and the code that define the data type along with the implementation of the functions.  Above the barrier, the concern is about using the composite data type to do useful things, while below the barrier, the concern is about how to represent and manipulate the composite data type.",
            "title": "Abstraction: Composite Data type"
        },
        {
            "location": "/lec1/index.html#abstraction-class-and-object-or-encapsulation",
            "text": "We can further bundle the composite data type and its associated functions together in another abstraction, called a  class .  A class is a data type with a group of functions associated with it.  We call the functions as  methods  and the data in the class as  fields  (or  members , or  states , or  attributes 4 ).   A well-designed class maintain the abstraction barrier, properly wrapped the barrier around the internal representation and implementation, and exposes just the right interface for others to use.  Just like we can create variables of a given type, we can create  objects  of a given class.  Objects are instances of a class, each allowing the same methods to be called, and each containing the same set of variables of the same types, but (possibly) storing different values.  Recall that programs written in a procedural language such as a C consists of functions, with a  main()  function as the entry point.  A program written in an  object-oriented language  such as Java consists of classes, with one main class as the entry point.  One can view a running object-oriented (or OO) program as something that instantiates objects of different classes and orchestrates their interactions with each other by calling each others' methods.  One could argue that an object-oriented way of writing programs is much more natural, as it mirrors our world more closely.  If we look around us, we see objects all around us, and each object has a certain behavior and they allow certain actions.  We interact with the objects through their interfaces, and we rarely need to know the internals of the objects we used everyday (unless we try to repair it) 5 .    This concept, of keeping the all the data and functions operating on the data related to a composite data type together within an abstraction barrier, is called  encapsulation .",
            "title": "Abstraction: Class and Object (or, Encapsulation)"
        },
        {
            "location": "/lec1/index.html#breaking-the-abstraction-barrier",
            "text": "In the ideal case, the code above the abstraction barrier would just call the provided interface to use the composite data type.  There, however, may be cases where a programmer may intentionally or accidentally break the abstraction barrier.    Consider the case of implementing  circle  as a C  struct .  Suppose someone wants to move the center of the circle  c  to a new position ( x ,  y ), instead of implementing a function  circle_move_to(c, x, y)  (which would still keep the representation used under the barrier), the person wrote:  1\n2 c . x   =   x ;  c . y   =   y ;    This code would still be correct, but the abstraction barrier is broken since we now make explicit assumption that there are two variables  x  and  y  inside the  circle  data type that correspond to the center of the circle.  If one day, we want to represent a circle in a different way, then we have to carefully change all the code that read and write these variables  x  and  y  and update them.   Breaking Python's Abstraction Barrier  Python tries to prevent  accidental  access to internal representation by having a convention of prefixing the internal variables with  _  (one underscore) or  __  (two underscores).   This method, however, does not prevent a lazy programmer from directly accessing the variables and possibly planting a bug / error that will surface later.",
            "title": "Breaking the Abstraction Barrier"
        },
        {
            "location": "/lec1/index.html#data-hiding",
            "text": "Many OO languages allow programmers to explicitly specify if a field or a method can be accessed from outside the abstraction barrier.  Java, for instance, support  private  and  public  access modifiers 5 .  A field or a method that is declared as  private  cannot be accessed from outside the class, and can only be accessed within the class.  On the other hand, as you can guess, a  public  field or method can be accessed, modified, or invoked from outside the class.  Such mechanism to protect the abstraction barrier from being broken is called  data hiding  or  information hiding .  This protection is enforced in the  compiler  during compile time.",
            "title": "Data Hiding"
        },
        {
            "location": "/lec1/index.html#example-the-circle-class",
            "text": "Let's put together the concepts of encapsulation, data hiding to define a  Circle  class in Java:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 /**   * A Circle object encapsulates a circle on a 2D plane.     */  class   Circle   { \n   private   double   x ;    // x-coordinate of the center \n   private   double   y ;    // y-coordinate of the center \n   private   double   r ;    // the length of the radius \n\n   /**     * Return the area of the circle.     */ \n   public   double   getArea ()   { \n     return   3.1415926 * r * r ; \n   } \n\n   /**     * Move the center of the circle to the new position (newX, newY)     */ \n   public   void   moveTo ( double   newX ,   double   newY )   { \n     x   =   newX ; \n     y   =   newY ; \n   }  }    The class above is still missing many essential components, and not a complete program.",
            "title": "Example: The Circle class"
        },
        {
            "location": "/lec1/index.html#constructors-accessors-and-mutators",
            "text": "With data hiding, we completely isolate the internals representation of a class using an abstraction barrier.  With no way for the user of the class to modify the fields directly, it is common for a class to provide methods to initialize and modify these internal fields (such as the  moveTo()  method above).  A method that initializes an object is called a  constructor , and a method that retrieves or modifies the properties of the object is called the  accessor  (or  getter ) or  mutator  (or  setter ).  A constructor method is a special method within the class.  It cannot be called directly, but is invoked automatically when an object is instantiated.   In Java, a constructor method has the same name as the class and has no return type.  A constructor can take in arguments just like other functions.  The class  Circle  can have a constructor such as the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 class   Circle   { \n     : \n   /**     * Create a circle centered on (centerX, centerY) with given radius    */ \n   public   Circle ( double   centerX ,   double   centerY ,   double   radius )   { \n     x   =   centerX ; \n     y   =   centerY ; \n     r   =   radius ; \n   } \n     :  }    The use of accessor and mutator methods is a bit controversial.   Suppose that we provide an accessor method and a mutator method for every private field, then we are actually exposing the internal representation, therefore breaking the encapsulation.  For instance:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28 class   Circle   { \n     : \n\n   public   double   getX ()   { \n     return   x ; \n   } \n\n   public   void   setX ( double   newX )   { \n     x   =   newX ; \n   } \n\n   public   double   getY ()   { \n     return   y ; \n   } \n\n   public   void   setY ( double   newY )   { \n     y   =   newY : \n   } \n\n   public   double   getR ()   { \n     return   r ; \n   } \n\n   public   void   setR ( double   newR )   { \n     r   =   newR ; \n   } \n     :  }    The examples above are pretty pointless.  If we need to know the internal and do something with it, we are doing it wrong.  The right approach is to implement a method within the class that do whatever we want the class to do.   For instance, suppose that we want to know the circumference of the circle, one approach would be:  1     double   circumference   =   2 * c . getR ()* 3.1415926 ;    where c is a  Circle  object.  A better approach would be to add a new method  getCircumference()  in the  Circle  class, and call this instead: 1     double   circumference   =   c . getCircumference ();    The better approach involves writing more lines of code, but it keeps the encapsulation in tact.   Constructor in Python and JavaScript  In Python, the constructor is the  __init__  method.   In JavaScript, the constructor is simply called  constructor .",
            "title": "Constructors, Accessors, and Mutators"
        },
        {
            "location": "/lec1/index.html#class-fields-and-methods",
            "text": "Let's look at the implementation of  getArea()  above.  We use the constant  \\(\\pi\\)  but hardcoded it as 3.1415926.  Hardcoding such a magic number is a  no no  in terms of coding style.  This constant can appear in more than one places, and if we hardcode such a number, and want to change the precision of it later, we would need to trace down and change every occurrence.  Not only this introduces more work, but likely to introduce bugs.    In C, we define it as a macro constant  M_PI .  But how should we do this in Java?  This is where the ideal that a program consists of only objects with internal states that communicate with each other feel a bit constraining.  The constant  \\(\\pi\\)  is universal, and not really belong to any object (the value of Pi is the same for every circle!).  If we start to define a method  sqrt()  that computes the square root of a given number, this is a general function that is not associated with any object as well.  A solution to this is to associate these global values and functions with a  class  instead of with an  object .  For instance. Java predefines a  Math  class 6  that is populated with constants  PI  and  E  (for Euler's number  \\(e\\) ), along with a long list of mathematical functions.  To associate a method or a field with a class in Java, we declare them with the  static  keyword.  We can additionally add a keyword  final  to indicate that the value of the field will not change 7 .  1\n2\n3\n4\n5\n6 class   Math   { \n   : \n   public   static   final   double   PI   =   3.141592653589793 ; \n   : \n   :  }    We call these fields and methods that are associated with a class as  class fields  and  class methods , and fields and methods that are associated with an object as  instance fields  and  instance methods .   Class Fields and Methods in Python  Note that, in Python, any variable declared within a  class  block is a class field: 1\n2\n3 class   Circle : \n   x   =   0 \n   y   =   0   \nIn the above example,  x  and  y  are class fields, not instance fields.",
            "title": "Class Fields and Methods"
        },
        {
            "location": "/lec1/index.html#memory-model-for-objects",
            "text": "Variables and functions are stored in the memory of the computers as bits, usually in two separate regions.  Since an object encapsulates both variables and functions, where are they stored?    Different implementations might stored the objects differently, but here is one way that we will follow for this class:   In the figure above, there are two objects of the same class.  An objects is referred to through its references, which is a pointer to memory location where the instance fields for the object is stored, along with a pointer to a  method table .  A method table stores a table of pointers to the methods, along with a table to the class fields.",
            "title": "Memory Model for Objects"
        },
        {
            "location": "/lec1/index.html#example-the-circle-class_1",
            "text": "Now, let revise our  Circle  class to improve the code and make it a little more complete:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49 import   java.lang.Math ;  /**   * A Circle object encapsulates a circle on a 2D plane.     */  class   Circle   { \n   private   double   x ;    // x-coordinate of the center \n   private   double   y ;    // y-coordinate of the center \n   private   double   r ;    // the length of the radius \n\n   /**     * Create a circle centered on (centerX, centerY) with given radius    */ \n   public   Circle ( double   centerX ,   double   centerY ,   double   radius )   { \n     x   =   centerX ; \n     y   =   centerY ; \n     r   =   radius ; \n   } \n\n   /**     * Return the area of the circle.     */ \n   public   double   getArea ()   { \n     return   Math . PI * r * r ; \n   } \n\n   /**     * Return the circumference of the circle.     */ \n   public   double   getCircumference ()   { \n     return   Math . PI * 2 * r ; \n   } \n\n   /**     * Move the center of the circle to the new position (newX, newY)     */ \n   public   void   moveTo ( double   newX ,   double   newY )   { \n     x   =   newX ; \n     y   =   newY ; \n   } \n\n   /**     * Return true if the given point (testX, testY) is within the circle.     */ \n   public   boolean   contains ( double   testX ,   double   testY )   { \n     return   false ; \n     // TODO: left as an exercise   \n   }  }",
            "title": "Example: The Circle class"
        },
        {
            "location": "/lec1/index.html#creating-and-interacting-with-circle-objects",
            "text": "To use the  Circle  class, we can either:   create a  main()  function, compile and link with the  Circle  class, and create an executable program, just like we usually do with a C program, OR  use a new bleeding-edge tool called  jshell , which is part of Java 9 (to be released September 2017), and its  read-evaluate-print loop  (REPL) to help us quickly try out various features of Java.   We will write a complete Java program with  main()  within two weeks, but for now, we will use  jshell  to demonstrate the various language features of Java 7 .  The demonstration below loads the  Circle  class written above (with the  contains  method completed) from a file named  Circle.java 8 , and creates two  Circle  objects,  c1  and  c2 .  We use the  new  keyword to tell Java to create an object of type  Circle  here, passing in the center and the radius.       Often, the instructions and data are stored in different regions of the memory.\u00a0 \u21a9    Javascript would happily convert  4  into a string for you, and return  45 .\u00a0 \u21a9    assuming the parameters are passed in correctly.\u00a0 \u21a9    Computer scientists just can't decide on what to call this!\u00a0 \u21a9    Others include  protected  and the  default  modifier, but let's not sweat about the details for now.\u00a0 \u21a9 \u21a9    The class  Math  is provided by the package  java.lang  in Java.  A package is simply a set of related classes (and interfaces, but I have not told you what is an interface yet).  To use this class, we need to add the line  import   java.lang.Math  in the beginning of our program.\u00a0 \u21a9    You can download and install  jshell  yourself, as part of  Java Development Kit version 9 (JDK 9) \u00a0 \u21a9 \u21a9    We use the convention of one public class per file, name the file with the exact name of the class (including capitalization), and include the extension  .java  to the filename.\u00a0 \u21a9",
            "title": "Creating and Interacting with Circle objects"
        },
        {
            "location": "/lec2/index.html",
            "text": "Lecture 2: Inheritance & Polymorphism\n\n\nLearning Objectives\n\n\nAfter this lecture, students should:\n\n\n\n\nunderstand that Java is a type-safe language, in contrast to C\n\n\nbe familiar with Java variable and primitive types\n\n\nunderstand the concepts of object-oriented programming, including interface, polymorphism, late binding, inheritance, method overriding and method overloading, and their purposes of introducing them as a method of programming.\n\n\nknow the purpose and usage of Java keywords \nimplements\n, \nextends\n, \nsuper\n, \ninstanceof\n, and \n@Override\n\n\nunderstand Java concepts of arrays, enhanced \nfor\n loop, method signature, \nObject\n class, and object equality. \n\n\n\n\nType Safety\n\n\nRecall that the \ntype\n of a variable tells the compiler how to interpret the bits that represent the value of a variable and how to manipulate the variable.  The compiler also uses the type to decide how much memory is allocated for each variable.  \n\n\nSome languages are stricter in terms of type \"compatibility\" than others.  C compilers, however, are not very strict.  If it detects something strange with the type you used, it will issue a warning, but still let your code compiles and run.\n\n\nTake:\n\n\n1\n2\n3\n4\n5\n#include\n \n<stdio.h>\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nprintf\n(\n\"%d\n\\n\n\"\n,\n \n\"cs2030\"\n);\n\n\n}\n\n\n\n\n\n\n\nIn Line 4, we treat the address to a string as integer.  This generates a compiler's warning.\n\n\nIn C, you can \ntype cast\n a variable from one type into another, i.e., force the compiler to treat a variable of one type as another type.  The compiler would listen and do that for you.  The following code would print out gibberish and would compile perfectly without error.\n\n\n1\n2\n3\n4\n5\n#include\n \n<stdio.h>\n\n\nint\n \nmain\n()\n\n\n{\n\n    \nprintf\n(\n\"%d\n\\n\n\"\n,\n \n(\nint\n)\n\"cs2030\"\n);\n\n\n}\n\n\n\n\n\n\n\nSuch flexibility and loose rules for type compatibility could be useful, if you know what you are doing, but for most programmers, it could be a major source of unintentional bugs, especially if one does not pay attention to compiler's warning or one forces the warning to go away without fully understanding what is going on.\n\n\nJava is very strict when it comes to type checking, and is one of the \ntype-safe\n languages. Java ensures that basic operations (such as \n+\n, \n-\n, etc) and method calls apply to values in a way that makes sense.  If you try to pull the same trick as above, you will receive an error:\n\n\n\n\n\n\n\nJava Primitive Data Types\n\n\nJava supports eight \nprimitive\n data types: \nbyte\n, \nshort\n, \nint\n, \nlong\n, \nfloat\n, \ndouble\n, \nboolean\n and \nchar\n.  If you are familiar with C, these data types should not be foreign to you.  One important difference is that a \nchar\n variable stores a 16-bit Unicode character, not an 8-bit character like in C.  Java uses \nbyte\n for that.  The other notable difference is that Java defines \ntrue\n and \nfalse\n as possible value to a \nboolean\n, unlike C which uses \n0\n for false and non-\n0\n for true.  \n\n\nYou can read all about Java \nvariables\n and \nprimitive data types\n in Oracle's Java Tutorial.\n\n\n\n\nEnforcing Abstraction Barrier with Interface\n\n\nRecall the concept of encapsulation. When we develop a large piece of software, it is important to hide the details about data representation and implementation, and only exposes certain \npublic\n methods for the users to use.  We imagine that there is an abstraction barrier between the code that implements the internals of a class (called the \nimplementer\n) and the code that uses the class (called the \nuser\n) to achieve a higher level task.\n\n\nWe have seen that we use \nprivate\n to enforce data hiding -- to hide certain fields and methods from outside of the barrier.  Now, we are going to see how we enforce that the right set of methods are defined, implemented, and used on both sides of the barrier.\n\n\nThe mechanism to do this is through defining an \ninterface\n (aka a \nprotocol\n as it is called in Objective-C or Swift).  An interface is kinda like a contract between the implementer of a class and the user of a class.  If a class promises to implement an interface, then we are guaranteed that the methods defined in the interface are implemented in the class as it is promised.  Otherwise, the code would not compile.\n\n\nIn Java, we can define an interface using \ninterface\n keyword:\n\n\n1\n2\n3\n4\n5\ninterface\n \nGeometricShape\n \n{\n\n    \npublic\n \ndouble\n \ngetArea\n();\n\n    \npublic\n \ndouble\n \ngetPerimeter\n();\n\n    \npublic\n \nboolean\n \ncontains\n(\nPoint\n \np\n);\n\n\n}\n\n\n\n\n\n\n\nThe example interface \nGeometricShape\n above contains only the declaration of the methods, not the implementation.  \n\n\nNow, let's see how the implementer would implement a class using the interface.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\nimport\n \njava.lang.Math\n;\n\n\nclass\n \nCircle\n \nimplements\n \nGeometricShape\n \n{\n\n    \nprivate\n \nPoint\n \ncenter\n;\n\n    \nprivate\n \ndouble\n \nradius\n;\n\n\n    \npublic\n \nCircle\n(\nPoint\n \ninitCenter\n,\n \ndouble\n \ninitR\n)\n \n{\n\n        \ncenter\n \n=\n \ninitCenter\n;\n\n        \nradius\n \n=\n \ninitR\n;\n\n    \n}\n\n\n    \nvoid\n \nmoveTo\n(\nPoint\n \np\n)\n \n{\n\n        \ncenter\n \n=\n \np\n;\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \ndouble\n \ngetArea\n()\n \n{\n\n        \nreturn\n \nMath\n.\nPI\n*\nradius\n*\nradius\n;\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nboolean\n \ncontains\n(\nPoint\n \np\n)\n \n{\n\n        \nreturn\n \n(\np\n.\ndistance\n(\ncenter\n)\n \n<\n \nradius\n);\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \ndouble\n \ngetPerimeter\n()\n \n{\n\n        \nreturn\n \nMath\n.\nPI\n*\n2\n*\nradius\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nThis is very similar to the code you saw in Lecture 1 and Exercise 1, except that in Line 2, we say that \nclass\n \nCircle\n \nimplements\n \nGeometricShape\n.  This line informs the compiler that the programmer intends to implement all the methods included in the interface \nGeometricShape\n exactly as declared (in terms of names, the number of arguments, the types of arguments, returned type, and access modifier).  The rest of the class is the same, except that we renamed \ngetCircumference\n with \ngetPerimeter\n, which is more general and apply to all shapes.  You will also see that we added \nannotations\n to our code by adding the line \n@Override\n before methods in \nCircle\n that implements the methods declared in \nGeometricShape\n.  This annotation is optional, but it informs our intention to the compiler and helps make the intention of the programmer clearer to others who read the code.\n\n\n\n\nJava Annotation\n\n\nAnnotations are metadata we add that is not part of the code.  Annotation does not affect execution.  They are useful to compilers and other software tools, as well as humans who read the code.  While we can similarly make the code more human-friendly with comments, an annotation is structured and so can be easily parsed by software.  \n@Override\n is probably going to be the only annotation useful for us in this class.\n\n\n\n\nNote that we can have other methods (such as \nmoveTo\n) in the class beyond what is promised in the interface the class implements.\n\n\nA class can implement more than one interfaces.  For instance, let's say that we have another interface called \nPrintable\n[^1] with a single method defined:\n\n\n1\n2\n3\ninterface\n \nPrintable\n \n{\n\n    \npublic\n \nvoid\n \nprint\n();\n\n\n}\n\n\n\n\n\n\n\nThe implementer of \nCircle\n wants to inform the users that the method \nvoid print()\n is implemented, it can do the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nclass\n \nCircle\n \nimplements\n \nGeometricShape\n,\n \nPrintable\n \n{\n\n     \n:\n\n     \n:\n\n     \n@Override\n\n     \npublic\n \nvoid\n \nprint\n()\n \n{\n\n         \nSystem\n.\nout\n.\nprintf\n(\n\"radius: %f\\n\"\n,\n \nradius\n);\n\n         \nSystem\n.\nout\n.\nprintf\n(\n\"center:\"\n);\n\n         \ncenter\n.\nprint\n();\n\n     \n}\n\n\n}\n\n\n\n\n\n\n\nIn the above, we call \nprint()\n on the \nPoint\n object as well.  How do we know that \nPoint\n provides a \nprint()\n method?  Well, we can read the implementation code of \nPoint\n, or we can agree with the implementer of \nPoint\n that \nPoint\n provides a \nPrintable\n interface!  \n\n\nIt is important to know that, \ninterface\n provides a \nsyntactic\n contract on the abstraction barrier, but it does not provide a \nsemantic\n contract.  It does not, for instance, guarantee that \nprint()\n actually prints something to the screen.  One could still implement interface \nPrintable\n as follows:\n\n\n1\n2\n3\n4\n5\n6\n7\nclass\n \nCircle\n \nimplements\n \nGeometricShape\n,\n \nPrintable\n \n{\n\n     \n:\n\n     \n:\n\n     \n@Override\n\n     \npublic\n \nvoid\n \nprint\n()\n \n{\n\n     \n}\n\n\n}\n\n\n\n\n\n\n\nand the code still compiles!\n\n\nNot all programming languages that support classes support interface.  Javascript and Python, for instance, does not support similar concepts.\n\n\nInterface as Types\n\n\nIn Java, an interface is a type.  What this means is that:\n\n\n\n\nWe can declare a variable with an interface type, such as:\n\n1\n    \nGeometricShape\n \ncircle\n;\n\n\n\n\n\nor\n\n1\n    \nPrintable\n \ncircle\n;\n\n\n\n\n\nWe cannot, however, instantiate an object from an interface\nsince an interface is a \"template\", an \"abstraction\", and does not have an implementation.  For instance:\n\n\n\n\n1\n2\n3\n4\n    \n// this is not OK\n\n    \nPrintable\n \np\n \n=\n \nnew\n \nPrintable\n();\n\n    \n// this is OK\n\n    \nPrintable\n \ncircle\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n \n0\n),\n \n10\n);\n\n\n\n\n\n\n\n\n\n\n\nSimilarly, we can pass arguments of an interface type into a method, and the return type of a method can be an interface.\n\n\n\n\n\n\nAn object can be an instance of multiple types.  Recall that Java is a statically typed language. We associate a type with a variable.  We can assign a variable to an object if the object is an instance of the type of the variable.  Line 4 above, for instance, creates a new circle, which is an instance of three types: \nCircle\n, \nGeometricShape\n, and \nPrintable\n.  It is ok to assign this new circle to a variable of type \nPrintable\n.\n\n\n\n\n\n\nWe can now do something cool like this:\n\n1\n2\n3\n4\n5\n6\n7\n    \nPrintable\n[]\n \nobjectsToPrint\n;\n\n      \n:\n\n      \n// initialize array objectsToPrint\n\n    \n:\n\n    \nfor\n \n(\nPrintable\n \nobj\n:\n \nobjectsToPrint\n)\n \n{\n\n        \nobj\n.\nprint\n();\n\n    \n}\n\n\n\n\n\n\nLet's look at this code in more details.  Line 1 declares an array of objects of type \nPrintable\n.  We skip over the code to initialize the content of the array for now, and\njump to Line 5-7, which is a \nfor\n loop.  Line 5 declares a loop variable \nobj\n of type \nPrintable\n and loops through all objects in the array \nobjectsToPrint\n, and Line 6 invoke the method \nprint\n of \nobj\n.\n\n\n\n\nArray and For Loops in Java\n\n\nSee Oracle's tutorial on \narray\n and \nenhanced loop\n\n\n\n\nThe magic happens in Line 6:\n\n\n\n\nFirst, since we now that any object in the array has the type \nPrintable\n, this means that they must implement the \nPrintable\n interface and support the method \nprint()\n.  \n\n\nSecond, we do not know, and we do not \nneed\n to know which class an object is an instance of.\n\n\nThird, we can actually have objects of completely unrelated classes in the same array. We can have objects of type \nCircle\n, and objects of type \nPoint\n.  We can have objects of type \nFactory\n, or objects of type \nStudent\n, or objects of type \nCushion\n.  As long as the objects implement the \nPrintable\n interface, we can put them into the same array.\n\n\nForth, at \nrun time\n, Java looks at \nobj\n, and determines its class, and invoke the right implementation of \nprint()\n corresponding to the \nobj\n.  That is, if \nobj\n is an instance of a class \nCircle\n, then it will call \nprint()\n method of \nCircle\n; if \nobj\n is an instance of a class \nPoint\n, then it will call \nprint()\n method of \nPoint\n, and so on.\n\n\n\n\nTo further appreciate the magic that happens in Line 6, especially the last point above, consider how function call is done in C.  In C, you cannot have two functions of the same name within the same scope, so if you call a function \nprint()\n, you know exactly which set of instructions will be called\n1\n.  So, the name \nprint\n is bound to the corresponding set of instructions at compilation time.  This is called \nstatic binding\n or \nearly binding\n.\nTo have \nprint()\n for different types, we need to name them differently to avoid naming conflicts: e.g., \nprint_point()\n, \nprint_circle()\n.\n\n\nIn a language with static binding, suppose you want to mix objects of different types\ntogether in an array, you need to do something like the following pseudocode:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n   \nfor\n \neach\n \nobject\n \nin\n \nthe\n \narray\n\n       \nif\n \nobject\n \nis\n \na\n \npoint\n\n           \nprint_point\n(\nobject\n)\n\n       \nelse\n \nif\n \nobject\n \nis\n \na\n \ncircle\n\n           \nprint_circle\n(\nobject\n)\n\n       \nelse\n \nif\n \nobject\n \nis\n \na\n \nsquare\n\n           \nprint_square\n(\nobject\n)\n\n           \n:\n\n           \n:\n\n\n\n\n\n\nNot only is the code verbose and ugly, if you want to define a new compound data type that supports printing, you need to remember to come to this place and add in a new condition and call the corresponding print function.\n\n\nIn OO languages, you can have methods named \nprint()\n implemented differently in different classes.  When we compile the code above, the compiler will have no way to know which implementation will be called.  The bindings of \nprint()\n to the actual set of instructions will only be done at run time, after \nobj\n is instantiated from a class.  This is known as \ndynamic binding\n, or \nlate binding\n, or \ndynamic dispatch\n.\n\n\n\n\nIf you understand how an object is represented internally, this is not so magical after all.  Referring to the figure above, the array \nobjectsToPrint[]\n contains an array of references to objects, the first one is a \nCircle\n object, and the next two are \nPoint\n objects.  When \nobj.print()\n is invoked, Java refers to the method table, which points to either the method table for \nCircle\n or for \nPoint\n, based on the class the object is an instance of.\n\n\nThis behavior, which is common to OO programming languages, is known as \npolymorphism\n2\n.\n\n\nDRY - Don't Repeat Yourself\n\n\nWith the interface \nGeometricShape\n, we can implement other classes, such as \nRectangle\n, \nSquare\n, \nPolygon\n with the same interface.  For instance,\n\n\n1\n2\n3\nclass\n \nSquare\n \nimplements\n \nGeometricShape\n,\n \nPrintable\n \n{\n\n         \n// left as exercise (See Exercise 2)\n\n\n}\n\n\n\n\n\n\n\nSo far, we have been treating our shapes as pure geometric objects.  Let's consider an application where we want to paint the shapes.  Each shape should have a fill color and a border (with color and thickness).\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nimport\n \njava.awt.Color\n;\n\n    \n:\n\n\n\nclass\n \nPaintedCircle\n \nimplements\n \nGeometricShape\n,\n \nPrintable\n \n{\n\n  \nprivate\n \nColor\n  \nfillColor\n;\n\n    \nprivate\n \nColor\n  \nborderColor\n;\n\n    \nprivate\n \ndouble\n \nborderThickness\n;\n\n\n    \npublic\n \nvoid\n \nfillWith\n(\nColor\n \nc\n)\n \n{\n\n        \nfillColor\n \n=\n \nc\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nsetBorderThickness\n(\ndouble\n \nt\n)\n \n{\n\n        \nborderThickness\n \n=\n \nt\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nsetBorderColor\n(\nColor\n \nc\n)\n \n{\n\n        \nborderColor\n \n=\n \nc\n;\n\n    \n}\n\n\n    \n// other methods and fields for Circle from before\n\n\n\n}\n\n\n\n\n\n\n\nIn the code above, we added the line \nimport\n \njava.awt.Color\n to use the \nColor class\n that Java provides, and added three private members as well as their setters.\n\n\nWe can do the same for \nSquare\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nimport\n \njava.awt.Color\n;\n\n    \n:\n\n\n\nclass\n \nPaintedSquare\n \nimplements\n \nGeometricShape\n,\n \nPrintable\n \n{\n\n  \nprivate\n \nColor\n  \nfillColor\n;\n\n    \nprivate\n \nColor\n  \nborderColor\n;\n\n    \nprivate\n \ndouble\n \nborderThickness\n;\n\n\n    \npublic\n \nvoid\n \nfillWith\n(\nColor\n \nc\n)\n \n{\n\n        \nfillColor\n \n=\n \nc\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nsetBorderThickness\n(\ndouble\n \nt\n)\n \n{\n\n        \nborderThickness\n \n=\n \nt\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nsetBorderColor\n(\nColor\n \nc\n)\n \n{\n\n        \nborderColor\n \n=\n \nc\n;\n\n    \n}\n\n\n    \n// other methods and fields written for Square\n\n\n\n}\n\n\n\n\n\n\n\nand for other shapes.\n\n\nGreat!  We now have colorful shapes.  The code above, however, is not \ngood\n code, even though it is \ncorrect\n.  Consider what would need to be done if say, we decided to support border styles (dotted border, solid border, dashed border, etc).  We would have to edit every single class that supports colors and borders.!\n\n\nOne principle that we can follow is the \nabstraction principle\n, which says \"Each significant piece of functionality in a program should be implemented in just one place in the source code. Where similar functions are carried out by distinct pieces of code, it is generally beneficial to combine them into one by abstracting out the varying parts.\"\n3\n\n\nFollowing the principle, we want to implement these style-related fields and methods in just one place.  But where?\n\n\nInheritance\n\n\nThe OO-way to do this is to create a \nparent class\n, and put all common fields and methods into the parent.  A parent class is defined just like a normal class.  For instance:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nclass\n \nPaintedShape\n \n{\n\n  \nprivate\n \nColor\n  \nfillColor\n;\n\n    \nprivate\n \nColor\n  \nborderColor\n;\n\n    \nprivate\n \ndouble\n \nborderThickness\n;\n\n\n  \npublic\n \nPaintedShape\n(\nColor\n \ninitFillColor\n,\n \nColor\n \ninitBorderColor\n,\n \ndouble\n \ninitBorderThickness\n)\n \n{\n\n        \nfillColor\n \n=\n \ninitFillColor\n;\n\n        \nborderColor\n \n=\n \ninitBorderColor\n;\n\n        \nborderThickness\n \n=\n \ninitBorderThickness\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nfillWith\n(\nColor\n \nc\n)\n \n{\n\n        \nfillColor\n \n=\n \nc\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nsetBorderThickness\n(\ndouble\n \nt\n)\n \n{\n\n        \nborderThickness\n \n=\n \nt\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nsetBorderColor\n(\nColor\n \nc\n)\n \n{\n\n        \nborderColor\n \n=\n \nc\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nThe \nPaintedCircle\n class, \nPaintedSquare\n class, etc, can now \ninherits\n non-private fields and methods from the parent class, using the \nextends\n keyword.\n\n\n1\n2\n3\n4\n5\n6\n7\nclass\n \nPaintedCircle\n \nextends\n \nPaintedShape\n \nimplements\n \nGeometricShape\n,\n \nPrintable\n \n{\n\n      \n:\n\n\n}\n\n\n\nclass\n \nPaintedSquare\n \nextends\n \nPaintedShape\n \nimplements\n \nGeometricShape\n,\n \nPrintable\n \n{\n\n      \n:\n\n\n}\n\n\n\n\n\n\nThis mechanism for a class to inherit the properties and behavior from a parent is called \nInheritance\n, and is the forth and final basic OO principles we cover\n4\n.\n\n\nWith inheritance, we do not have to repeat the declaration of fields \nfillColor\n, \nborderColor\n, \nborderThickness\n and the associated methods in them.  This software engineering principle is also known as the DRY principle -- \"\ndon't repeat yourself\n\" principle.  We are going to see DRY again and again in future lectures.\n\n\nWe also call the \nPaintedShape\n the superclass (or base class) of \nPaintedCircle\n and \nPaintedSquare\n, and call \nPaintedCircle\n and \nPaintedSquare\n the subclass (or derived class)\n5\n of \nPaintedShape\n.\n\n\nA \nPaintedCircle\n object can now call \nfillWith()\n even if the method \nfillWith()\n is not defined in \nPaintedCircle\n -- it is defined in \nPaintedCircle\n's parent \nPaintedShape\n.  \n\n\nNow consider the constructor for \nPaintedCircle\n.   We need to initialize the geometric shape as well as the painting style.  But, we define the fields \nfillColor\n, etc \nprivate\n, and subclasses have no access to \nprivate\n fields in the parent.  We need to call the constructor of the parent to initialize these private fields.  The way to do this is to use the \nsuper\n keyword, like such:\n\n\n1\n2\n3\n4\n5\n  \npublic\n \nPaintedCircle\n(\nPoint\n \ninitCenter\n,\n \ndouble\n \ninitRadius\n,\n \nColor\n \ninitFillColor\n,\n \nColor\n \ninitBorderColor\n,\n \ndouble\n \ninitBorderThickness\n)\n \n{\n\n        \nsuper\n(\ninitFillColor\n,\n \ninitBorderColor\n,\n \ninitBorderThickness\n);\n\n        \nc\n \n=\n \ninitCenter\n;\n\n        \nr\n \n=\n \ninitRadius\n;\n\n    \n}\n\n\n\n\n\n\n\nYou can see that the constructor for \nPaintedCircle\n now takes in five parameters.  You can imagine that as the class get more sophisticated with more fields, we need to pass in more parameters to the class to initialize the fields.  It is not uncommon to provide alternative constructors with fewer parameters and assign some \ndefault\n values to the fields.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n  \n// create circle with default style (white with black border of thickness 1)\n\n  \npublic\n \nPaintedCircle\n(\nPoint\n \ninitCenter\n,\n \ndouble\n \ninitRadius\n)\n \n{\n\n      \nsuper\n(\nColor\n.\nWHITE\n,\n \nColor\n.\nBLACK\n,\n \n1.0\n);\n\n      \nc\n \n=\n \ninitCenter\n;\n\n      \nr\n \n=\n \ninitRadius\n;\n\n  \n}\n\n\n    \n// create circle with customized styles  \n\n  \npublic\n \nPaintedCircle\n(\nPoint\n \ninitCenter\n,\n \ndouble\n \ninitRadius\n,\n \nColor\n \ninitFillColor\n,\n \nColor\n \ninitBorderColor\n,\n \ndouble\n \ninitBorderThickness\n)\n \n{\n\n        \nsuper\n(\ninitFillColor\n,\n \ninitBorderColor\n,\n \ninitBorderThickness\n);\n\n        \nc\n \n=\n \ninitCenter\n;\n\n        \nr\n \n=\n \ninitRadius\n;\n\n    \n}\n\n\n\n\n\n\n\nTwo methods in a class can have the same name and still co-exist peacefully together.  This is called \noverloading\n.  When a method is called, we look at the \nsignature\n of the method, which consists of (i) the name of the method, (ii) the number, order, and type of the arguments, to determine which method is called.  To be precise, the first sentence of this paragraph should read: Two methods in a class can have the same name and still co-exist peacefully together, as long as they have different signatures.  Note that the return type is not part of the method signature, so you cannot have two methods with the same name and same arguments but different return type.  \n\n\nEven though the example above shows overloading of the constructor, we can overload other methods as well.\n\n\nJava \nObject\n class\n\n\nIn Java, every class inherits from the \nclass \nObject\n implicitly.  The \nObject\n class defines many useful methods that are common to all objects.  The two useful ones are :\n\n\n\n\nequals(Object obj)\n, which checks if two objects are equal to each other, and\n\n\ntoString()\n, which returns a string representation of the object, and is a better way to print an object than the \nprint()\n method and \nPrintable\n interface we write\n6\n.\n\n\n\n\nThe \nequals()\n method as implemented in \nObject\n, only compares if two object references refer to the same object In the Figure below, we show an array \ncircles\n with three \nCircle\n objects.  All three circles are centered at (0, 0) with radius 10.  They are created as follows:\n\n\n1\n2\n3\n4\n    \nCircle\n[]\n \ncircles\n \n=\n \nnew\n \nCircle\n[\n3\n];\n\n    \ncircles\n[\n0\n]\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n \n0\n),\n \n10\n);\n\n    \ncircles\n[\n1\n]\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n \n0\n),\n \n10\n);\n\n    \ncircles\n[\n2\n]\n \n=\n \ncircles\n[\n1\n];\n\n\n\n\n\n\n\nWhen you check \ncircles[0].equals(circles[1])\n, however, it returns \nfalse\n, because even though \ncircles[0]\n and \ncircles[1]\n are semantically the same, they refer to the two different objects.  Calling \ncircles[1].equals(circles[2])\n returns \ntrue\n, as they are referring to the same object.  \n\n\n\n\nWhat if you need a method that compares if two circles are semantically the same?  You can implement your own method, say \nisTheSameCircle(Circle c)\n.  But, the \nequals()\n method is universal (all classes inherits this method) and is used by other classes for equality tests.  So, in most cases, we can implement a method called \nequals()\n with the same signature with the semantic that we want\n7\n.\n\n\nThat's right.  Even though we cannot have two methods with the same signature in the same class, we can have two methods with the same signature, one in the superclass (or the superclass's superclass, and so on), one in the subclass.  The method in the subclass will override the method in the superclass.  For example,\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n    \nclass\n \nCircle\n \nimplements\n \nShape\n,\n \nPrintable\n \n{\n\n     \n:\n\n         \n@Override\n\n         \npublic\n \nboolean\n \nequals\n(\nObject\n \nobj\n)\n \n{\n\n             \nif\n \n(\nobj\n \ninstanceof\n \nCircle\n)\n \n{\n\n                 \nCircle\n \ncircle\n \n=\n \n(\nCircle\n)\n \nobj\n;\n\n                 \nreturn\n \n(\ncircle\n.\ncenter\n.\nequals\n(\ncenter\n)\n \n&&\n \ncircle\n.\nradius\n \n==\n \nradius\n);\n\n             \n}\n \nelse\n\n               \nreturn\n \nfalse\n;\n\n         \n}\n\n    \n}\n\n\n\n\n\n\n\nLine 7 above compares if the two center points are equals, and the two radius values are equals.  So, we compare if the two circles are semantically the same.  The rest of this code requires some explanation:\n\n\n\n\nLine 3 uses the same \n@Override\n annotation that we have seen before -- we are telling the compilers that we are overriding a method in the superclass.\n\n\nLine 4 declares the method \nequals\n, and note that it has to have exactly the same signature as the \nequals()\n method we are overriding.  Even though we meant to compare two \nCircle\n objects, we cannot declare it as \npublic boolean equals(Circle circle)\n, since the signature is different and the compiler would complain.\n\n\nSince \nobj\n is of an \nObject\n type, we can actually pass in any object to compare with a \nCircle\n.  Line 5 checks if the comparison makes sense, by checking if \nobj\n is instantiated from a \nCircle\n class, using the \ninstanceof\n keyword.  If \nobj\n is not even a \nCircle\n object, then we simply return \nfalse\n.\n\n\nIf \nobj\n is an instance of \nCircle\n, we assign \nobj\n to a variable of type \nCircle\n, and compare as in Line 7.\n\n\n\n\nFor the code above to work, we have to override the \nequals\n method of \nPoint\n as well.  That is left as an exercise.\n\n\nOne final note: polymorphism works here as well.  If we have an object reference \nobj\n of type \nObject\n that refers to an instance of a \nCircle\n, calling \nobj.equals()\n will invoke the \nequals()\n method of \nCircle\n, not \nObject\n, just like the case of interfaces.\n\n\n\n\n\n\n\n\n\n\nRemember a function is just an abstraction over a set of instructions.\u00a0\n\u21a9\n\n\n\n\n\n\nIn biology, polymorphism means that an organism can have many different forms.\u00a0\n\u21a9\n\n\n\n\n\n\nThis principle is formulated by Benjamin C. Pierce in his book \nTypes and Programming Languages\n.\u00a0\n\u21a9\n\n\n\n\n\n\nThe other three is encapsulation, abstraction, and polymorphism.\u00a0\n\u21a9\n\n\n\n\n\n\nAgain, you see that computer scientist can be quite indecisive when it comes to the terminologies in OOP.\u00a0\n\u21a9\n\n\n\n\n\n\nWe leave this for another lesson on another day.  \u00a0\n\u21a9\n\n\n\n\n\n\nIf you override \nequals()\n you should generally override \nhashCode()\n as well, but let's leave that for another lesson on another day.\u00a0\n\u21a9",
            "title": "2. Inheritance & Polymorphism"
        },
        {
            "location": "/lec2/index.html#lecture-2-inheritance-polymorphism",
            "text": "",
            "title": "Lecture 2: Inheritance &amp; Polymorphism"
        },
        {
            "location": "/lec2/index.html#learning-objectives",
            "text": "After this lecture, students should:   understand that Java is a type-safe language, in contrast to C  be familiar with Java variable and primitive types  understand the concepts of object-oriented programming, including interface, polymorphism, late binding, inheritance, method overriding and method overloading, and their purposes of introducing them as a method of programming.  know the purpose and usage of Java keywords  implements ,  extends ,  super ,  instanceof , and  @Override  understand Java concepts of arrays, enhanced  for  loop, method signature,  Object  class, and object equality.",
            "title": "Learning Objectives"
        },
        {
            "location": "/lec2/index.html#type-safety",
            "text": "Recall that the  type  of a variable tells the compiler how to interpret the bits that represent the value of a variable and how to manipulate the variable.  The compiler also uses the type to decide how much memory is allocated for each variable.    Some languages are stricter in terms of type \"compatibility\" than others.  C compilers, however, are not very strict.  If it detects something strange with the type you used, it will issue a warning, but still let your code compiles and run.  Take:  1\n2\n3\n4\n5 #include   <stdio.h>  int   main ()  { \n     printf ( \"%d \\n \" ,   \"cs2030\" );  }    In Line 4, we treat the address to a string as integer.  This generates a compiler's warning.  In C, you can  type cast  a variable from one type into another, i.e., force the compiler to treat a variable of one type as another type.  The compiler would listen and do that for you.  The following code would print out gibberish and would compile perfectly without error.  1\n2\n3\n4\n5 #include   <stdio.h>  int   main ()  { \n     printf ( \"%d \\n \" ,   ( int ) \"cs2030\" );  }    Such flexibility and loose rules for type compatibility could be useful, if you know what you are doing, but for most programmers, it could be a major source of unintentional bugs, especially if one does not pay attention to compiler's warning or one forces the warning to go away without fully understanding what is going on.  Java is very strict when it comes to type checking, and is one of the  type-safe  languages. Java ensures that basic operations (such as  + ,  - , etc) and method calls apply to values in a way that makes sense.  If you try to pull the same trick as above, you will receive an error:    Java Primitive Data Types  Java supports eight  primitive  data types:  byte ,  short ,  int ,  long ,  float ,  double ,  boolean  and  char .  If you are familiar with C, these data types should not be foreign to you.  One important difference is that a  char  variable stores a 16-bit Unicode character, not an 8-bit character like in C.  Java uses  byte  for that.  The other notable difference is that Java defines  true  and  false  as possible value to a  boolean , unlike C which uses  0  for false and non- 0  for true.    You can read all about Java  variables  and  primitive data types  in Oracle's Java Tutorial.",
            "title": "Type Safety"
        },
        {
            "location": "/lec2/index.html#enforcing-abstraction-barrier-with-interface",
            "text": "Recall the concept of encapsulation. When we develop a large piece of software, it is important to hide the details about data representation and implementation, and only exposes certain  public  methods for the users to use.  We imagine that there is an abstraction barrier between the code that implements the internals of a class (called the  implementer ) and the code that uses the class (called the  user ) to achieve a higher level task.  We have seen that we use  private  to enforce data hiding -- to hide certain fields and methods from outside of the barrier.  Now, we are going to see how we enforce that the right set of methods are defined, implemented, and used on both sides of the barrier.  The mechanism to do this is through defining an  interface  (aka a  protocol  as it is called in Objective-C or Swift).  An interface is kinda like a contract between the implementer of a class and the user of a class.  If a class promises to implement an interface, then we are guaranteed that the methods defined in the interface are implemented in the class as it is promised.  Otherwise, the code would not compile.  In Java, we can define an interface using  interface  keyword:  1\n2\n3\n4\n5 interface   GeometricShape   { \n     public   double   getArea (); \n     public   double   getPerimeter (); \n     public   boolean   contains ( Point   p );  }    The example interface  GeometricShape  above contains only the declaration of the methods, not the implementation.    Now, let's see how the implementer would implement a class using the interface.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29 import   java.lang.Math ;  class   Circle   implements   GeometricShape   { \n     private   Point   center ; \n     private   double   radius ; \n\n     public   Circle ( Point   initCenter ,   double   initR )   { \n         center   =   initCenter ; \n         radius   =   initR ; \n     } \n\n     void   moveTo ( Point   p )   { \n         center   =   p ; \n     } \n\n     @Override \n     public   double   getArea ()   { \n         return   Math . PI * radius * radius ; \n     } \n\n     @Override \n     public   boolean   contains ( Point   p )   { \n         return   ( p . distance ( center )   <   radius ); \n     } \n\n     @Override \n     public   double   getPerimeter ()   { \n         return   Math . PI * 2 * radius ; \n     }  }    This is very similar to the code you saw in Lecture 1 and Exercise 1, except that in Line 2, we say that  class   Circle   implements   GeometricShape .  This line informs the compiler that the programmer intends to implement all the methods included in the interface  GeometricShape  exactly as declared (in terms of names, the number of arguments, the types of arguments, returned type, and access modifier).  The rest of the class is the same, except that we renamed  getCircumference  with  getPerimeter , which is more general and apply to all shapes.  You will also see that we added  annotations  to our code by adding the line  @Override  before methods in  Circle  that implements the methods declared in  GeometricShape .  This annotation is optional, but it informs our intention to the compiler and helps make the intention of the programmer clearer to others who read the code.   Java Annotation  Annotations are metadata we add that is not part of the code.  Annotation does not affect execution.  They are useful to compilers and other software tools, as well as humans who read the code.  While we can similarly make the code more human-friendly with comments, an annotation is structured and so can be easily parsed by software.   @Override  is probably going to be the only annotation useful for us in this class.   Note that we can have other methods (such as  moveTo ) in the class beyond what is promised in the interface the class implements.  A class can implement more than one interfaces.  For instance, let's say that we have another interface called  Printable [^1] with a single method defined:  1\n2\n3 interface   Printable   { \n     public   void   print ();  }    The implementer of  Circle  wants to inform the users that the method  void print()  is implemented, it can do the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 class   Circle   implements   GeometricShape ,   Printable   { \n      : \n      : \n      @Override \n      public   void   print ()   { \n          System . out . printf ( \"radius: %f\\n\" ,   radius ); \n          System . out . printf ( \"center:\" ); \n          center . print (); \n      }  }    In the above, we call  print()  on the  Point  object as well.  How do we know that  Point  provides a  print()  method?  Well, we can read the implementation code of  Point , or we can agree with the implementer of  Point  that  Point  provides a  Printable  interface!    It is important to know that,  interface  provides a  syntactic  contract on the abstraction barrier, but it does not provide a  semantic  contract.  It does not, for instance, guarantee that  print()  actually prints something to the screen.  One could still implement interface  Printable  as follows:  1\n2\n3\n4\n5\n6\n7 class   Circle   implements   GeometricShape ,   Printable   { \n      : \n      : \n      @Override \n      public   void   print ()   { \n      }  }    and the code still compiles!  Not all programming languages that support classes support interface.  Javascript and Python, for instance, does not support similar concepts.",
            "title": "Enforcing Abstraction Barrier with Interface"
        },
        {
            "location": "/lec2/index.html#interface-as-types",
            "text": "In Java, an interface is a type.  What this means is that:   We can declare a variable with an interface type, such as: 1      GeometricShape   circle ;   \nor 1      Printable   circle ;   \nWe cannot, however, instantiate an object from an interface\nsince an interface is a \"template\", an \"abstraction\", and does not have an implementation.  For instance:   1\n2\n3\n4      // this is not OK \n     Printable   p   =   new   Printable (); \n     // this is OK \n     Printable   circle   =   new   Circle ( new   Point ( 0 ,   0 ),   10 );      Similarly, we can pass arguments of an interface type into a method, and the return type of a method can be an interface.    An object can be an instance of multiple types.  Recall that Java is a statically typed language. We associate a type with a variable.  We can assign a variable to an object if the object is an instance of the type of the variable.  Line 4 above, for instance, creates a new circle, which is an instance of three types:  Circle ,  GeometricShape , and  Printable .  It is ok to assign this new circle to a variable of type  Printable .    We can now do something cool like this: 1\n2\n3\n4\n5\n6\n7      Printable []   objectsToPrint ; \n       : \n       // initialize array objectsToPrint \n     : \n     for   ( Printable   obj :   objectsToPrint )   { \n         obj . print (); \n     }    Let's look at this code in more details.  Line 1 declares an array of objects of type  Printable .  We skip over the code to initialize the content of the array for now, and\njump to Line 5-7, which is a  for  loop.  Line 5 declares a loop variable  obj  of type  Printable  and loops through all objects in the array  objectsToPrint , and Line 6 invoke the method  print  of  obj .   Array and For Loops in Java  See Oracle's tutorial on  array  and  enhanced loop   The magic happens in Line 6:   First, since we now that any object in the array has the type  Printable , this means that they must implement the  Printable  interface and support the method  print() .    Second, we do not know, and we do not  need  to know which class an object is an instance of.  Third, we can actually have objects of completely unrelated classes in the same array. We can have objects of type  Circle , and objects of type  Point .  We can have objects of type  Factory , or objects of type  Student , or objects of type  Cushion .  As long as the objects implement the  Printable  interface, we can put them into the same array.  Forth, at  run time , Java looks at  obj , and determines its class, and invoke the right implementation of  print()  corresponding to the  obj .  That is, if  obj  is an instance of a class  Circle , then it will call  print()  method of  Circle ; if  obj  is an instance of a class  Point , then it will call  print()  method of  Point , and so on.   To further appreciate the magic that happens in Line 6, especially the last point above, consider how function call is done in C.  In C, you cannot have two functions of the same name within the same scope, so if you call a function  print() , you know exactly which set of instructions will be called 1 .  So, the name  print  is bound to the corresponding set of instructions at compilation time.  This is called  static binding  or  early binding .\nTo have  print()  for different types, we need to name them differently to avoid naming conflicts: e.g.,  print_point() ,  print_circle() .  In a language with static binding, suppose you want to mix objects of different types\ntogether in an array, you need to do something like the following pseudocode: 1\n2\n3\n4\n5\n6\n7\n8\n9     for   each   object   in   the   array \n        if   object   is   a   point \n            print_point ( object ) \n        else   if   object   is   a   circle \n            print_circle ( object ) \n        else   if   object   is   a   square \n            print_square ( object ) \n            : \n            :    Not only is the code verbose and ugly, if you want to define a new compound data type that supports printing, you need to remember to come to this place and add in a new condition and call the corresponding print function.  In OO languages, you can have methods named  print()  implemented differently in different classes.  When we compile the code above, the compiler will have no way to know which implementation will be called.  The bindings of  print()  to the actual set of instructions will only be done at run time, after  obj  is instantiated from a class.  This is known as  dynamic binding , or  late binding , or  dynamic dispatch .   If you understand how an object is represented internally, this is not so magical after all.  Referring to the figure above, the array  objectsToPrint[]  contains an array of references to objects, the first one is a  Circle  object, and the next two are  Point  objects.  When  obj.print()  is invoked, Java refers to the method table, which points to either the method table for  Circle  or for  Point , based on the class the object is an instance of.  This behavior, which is common to OO programming languages, is known as  polymorphism 2 .",
            "title": "Interface as Types"
        },
        {
            "location": "/lec2/index.html#dry-dont-repeat-yourself",
            "text": "With the interface  GeometricShape , we can implement other classes, such as  Rectangle ,  Square ,  Polygon  with the same interface.  For instance,  1\n2\n3 class   Square   implements   GeometricShape ,   Printable   { \n          // left as exercise (See Exercise 2)  }    So far, we have been treating our shapes as pure geometric objects.  Let's consider an application where we want to paint the shapes.  Each shape should have a fill color and a border (with color and thickness).   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 import   java.awt.Color ; \n     :  class   PaintedCircle   implements   GeometricShape ,   Printable   { \n   private   Color    fillColor ; \n     private   Color    borderColor ; \n     private   double   borderThickness ; \n\n     public   void   fillWith ( Color   c )   { \n         fillColor   =   c ; \n     } \n\n     public   void   setBorderThickness ( double   t )   { \n         borderThickness   =   t ; \n     } \n\n     public   void   setBorderColor ( Color   c )   { \n         borderColor   =   c ; \n     } \n\n     // other methods and fields for Circle from before  }    In the code above, we added the line  import   java.awt.Color  to use the  Color class  that Java provides, and added three private members as well as their setters.  We can do the same for  Square   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 import   java.awt.Color ; \n     :  class   PaintedSquare   implements   GeometricShape ,   Printable   { \n   private   Color    fillColor ; \n     private   Color    borderColor ; \n     private   double   borderThickness ; \n\n     public   void   fillWith ( Color   c )   { \n         fillColor   =   c ; \n     } \n\n     public   void   setBorderThickness ( double   t )   { \n         borderThickness   =   t ; \n     } \n\n     public   void   setBorderColor ( Color   c )   { \n         borderColor   =   c ; \n     } \n\n     // other methods and fields written for Square  }    and for other shapes.  Great!  We now have colorful shapes.  The code above, however, is not  good  code, even though it is  correct .  Consider what would need to be done if say, we decided to support border styles (dotted border, solid border, dashed border, etc).  We would have to edit every single class that supports colors and borders.!  One principle that we can follow is the  abstraction principle , which says \"Each significant piece of functionality in a program should be implemented in just one place in the source code. Where similar functions are carried out by distinct pieces of code, it is generally beneficial to combine them into one by abstracting out the varying parts.\" 3  Following the principle, we want to implement these style-related fields and methods in just one place.  But where?",
            "title": "DRY - Don't Repeat Yourself"
        },
        {
            "location": "/lec2/index.html#inheritance",
            "text": "The OO-way to do this is to create a  parent class , and put all common fields and methods into the parent.  A parent class is defined just like a normal class.  For instance:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 class   PaintedShape   { \n   private   Color    fillColor ; \n     private   Color    borderColor ; \n     private   double   borderThickness ; \n\n   public   PaintedShape ( Color   initFillColor ,   Color   initBorderColor ,   double   initBorderThickness )   { \n         fillColor   =   initFillColor ; \n         borderColor   =   initBorderColor ; \n         borderThickness   =   initBorderThickness ; \n     } \n\n     public   void   fillWith ( Color   c )   { \n         fillColor   =   c ; \n     } \n\n     public   void   setBorderThickness ( double   t )   { \n         borderThickness   =   t ; \n     } \n\n     public   void   setBorderColor ( Color   c )   { \n         borderColor   =   c ; \n     }  }    The  PaintedCircle  class,  PaintedSquare  class, etc, can now  inherits  non-private fields and methods from the parent class, using the  extends  keyword.  1\n2\n3\n4\n5\n6\n7 class   PaintedCircle   extends   PaintedShape   implements   GeometricShape ,   Printable   { \n       :  }  class   PaintedSquare   extends   PaintedShape   implements   GeometricShape ,   Printable   { \n       :  }    This mechanism for a class to inherit the properties and behavior from a parent is called  Inheritance , and is the forth and final basic OO principles we cover 4 .  With inheritance, we do not have to repeat the declaration of fields  fillColor ,  borderColor ,  borderThickness  and the associated methods in them.  This software engineering principle is also known as the DRY principle -- \" don't repeat yourself \" principle.  We are going to see DRY again and again in future lectures.  We also call the  PaintedShape  the superclass (or base class) of  PaintedCircle  and  PaintedSquare , and call  PaintedCircle  and  PaintedSquare  the subclass (or derived class) 5  of  PaintedShape .  A  PaintedCircle  object can now call  fillWith()  even if the method  fillWith()  is not defined in  PaintedCircle  -- it is defined in  PaintedCircle 's parent  PaintedShape .    Now consider the constructor for  PaintedCircle .   We need to initialize the geometric shape as well as the painting style.  But, we define the fields  fillColor , etc  private , and subclasses have no access to  private  fields in the parent.  We need to call the constructor of the parent to initialize these private fields.  The way to do this is to use the  super  keyword, like such:  1\n2\n3\n4\n5    public   PaintedCircle ( Point   initCenter ,   double   initRadius ,   Color   initFillColor ,   Color   initBorderColor ,   double   initBorderThickness )   { \n         super ( initFillColor ,   initBorderColor ,   initBorderThickness ); \n         c   =   initCenter ; \n         r   =   initRadius ; \n     }    You can see that the constructor for  PaintedCircle  now takes in five parameters.  You can imagine that as the class get more sophisticated with more fields, we need to pass in more parameters to the class to initialize the fields.  It is not uncommon to provide alternative constructors with fewer parameters and assign some  default  values to the fields.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13    // create circle with default style (white with black border of thickness 1) \n   public   PaintedCircle ( Point   initCenter ,   double   initRadius )   { \n       super ( Color . WHITE ,   Color . BLACK ,   1.0 ); \n       c   =   initCenter ; \n       r   =   initRadius ; \n   } \n\n     // create circle with customized styles   \n   public   PaintedCircle ( Point   initCenter ,   double   initRadius ,   Color   initFillColor ,   Color   initBorderColor ,   double   initBorderThickness )   { \n         super ( initFillColor ,   initBorderColor ,   initBorderThickness ); \n         c   =   initCenter ; \n         r   =   initRadius ; \n     }    Two methods in a class can have the same name and still co-exist peacefully together.  This is called  overloading .  When a method is called, we look at the  signature  of the method, which consists of (i) the name of the method, (ii) the number, order, and type of the arguments, to determine which method is called.  To be precise, the first sentence of this paragraph should read: Two methods in a class can have the same name and still co-exist peacefully together, as long as they have different signatures.  Note that the return type is not part of the method signature, so you cannot have two methods with the same name and same arguments but different return type.    Even though the example above shows overloading of the constructor, we can overload other methods as well.",
            "title": "Inheritance"
        },
        {
            "location": "/lec2/index.html#java-object-class",
            "text": "In Java, every class inherits from the  class  Object  implicitly.  The  Object  class defines many useful methods that are common to all objects.  The two useful ones are :   equals(Object obj) , which checks if two objects are equal to each other, and  toString() , which returns a string representation of the object, and is a better way to print an object than the  print()  method and  Printable  interface we write 6 .   The  equals()  method as implemented in  Object , only compares if two object references refer to the same object In the Figure below, we show an array  circles  with three  Circle  objects.  All three circles are centered at (0, 0) with radius 10.  They are created as follows:  1\n2\n3\n4      Circle []   circles   =   new   Circle [ 3 ]; \n     circles [ 0 ]   =   new   Circle ( new   Point ( 0 ,   0 ),   10 ); \n     circles [ 1 ]   =   new   Circle ( new   Point ( 0 ,   0 ),   10 ); \n     circles [ 2 ]   =   circles [ 1 ];    When you check  circles[0].equals(circles[1]) , however, it returns  false , because even though  circles[0]  and  circles[1]  are semantically the same, they refer to the two different objects.  Calling  circles[1].equals(circles[2])  returns  true , as they are referring to the same object.     What if you need a method that compares if two circles are semantically the same?  You can implement your own method, say  isTheSameCircle(Circle c) .  But, the  equals()  method is universal (all classes inherits this method) and is used by other classes for equality tests.  So, in most cases, we can implement a method called  equals()  with the same signature with the semantic that we want 7 .  That's right.  Even though we cannot have two methods with the same signature in the same class, we can have two methods with the same signature, one in the superclass (or the superclass's superclass, and so on), one in the subclass.  The method in the subclass will override the method in the superclass.  For example,   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11      class   Circle   implements   Shape ,   Printable   { \n      : \n          @Override \n          public   boolean   equals ( Object   obj )   { \n              if   ( obj   instanceof   Circle )   { \n                  Circle   circle   =   ( Circle )   obj ; \n                  return   ( circle . center . equals ( center )   &&   circle . radius   ==   radius ); \n              }   else \n                return   false ; \n          } \n     }    Line 7 above compares if the two center points are equals, and the two radius values are equals.  So, we compare if the two circles are semantically the same.  The rest of this code requires some explanation:   Line 3 uses the same  @Override  annotation that we have seen before -- we are telling the compilers that we are overriding a method in the superclass.  Line 4 declares the method  equals , and note that it has to have exactly the same signature as the  equals()  method we are overriding.  Even though we meant to compare two  Circle  objects, we cannot declare it as  public boolean equals(Circle circle) , since the signature is different and the compiler would complain.  Since  obj  is of an  Object  type, we can actually pass in any object to compare with a  Circle .  Line 5 checks if the comparison makes sense, by checking if  obj  is instantiated from a  Circle  class, using the  instanceof  keyword.  If  obj  is not even a  Circle  object, then we simply return  false .  If  obj  is an instance of  Circle , we assign  obj  to a variable of type  Circle , and compare as in Line 7.   For the code above to work, we have to override the  equals  method of  Point  as well.  That is left as an exercise.  One final note: polymorphism works here as well.  If we have an object reference  obj  of type  Object  that refers to an instance of a  Circle , calling  obj.equals()  will invoke the  equals()  method of  Circle , not  Object , just like the case of interfaces.      Remember a function is just an abstraction over a set of instructions.\u00a0 \u21a9    In biology, polymorphism means that an organism can have many different forms.\u00a0 \u21a9    This principle is formulated by Benjamin C. Pierce in his book  Types and Programming Languages .\u00a0 \u21a9    The other three is encapsulation, abstraction, and polymorphism.\u00a0 \u21a9    Again, you see that computer scientist can be quite indecisive when it comes to the terminologies in OOP.\u00a0 \u21a9    We leave this for another lesson on another day.  \u00a0 \u21a9    If you override  equals()  you should generally override  hashCode()  as well, but let's leave that for another lesson on another day.\u00a0 \u21a9",
            "title": "Java Object class"
        },
        {
            "location": "/lec3/index.html",
            "text": "Lecture 3: Inheritance, Continued\n\n\nLearning Objectives\n\n\nAt the end of this lecture, students should\n\n\n\n\nbe familiar with how Java dispatches methods that have been overridden\n\n\nappreciate the usefulness of overriding \nequals\n and \ntoString\n in the \nObject\n class\n\n\nbe exposed to the \nString\n class and its associated methods, especially the \n+\n operator\n\n\nbe aware that inheritance can be abused to provide bad code\n\n\nunderstand the differences between HAS-A and IS-A relationship\n\n\nbe able to use composition to model classes with HAS-A relationship\n\n\nbe able to use inheritance to model classes with IS-A relationship\n\n\nunderstand the Liskov Substitution Principle and thus be aware that not all IS-A relationship should be modelled with inheritance\n\n\nunderstand the purposes of the Java keywords \nthis\n, \nfinal\n, \nabstract\n and \ndefault\n\n\n\n\nMethod Overriding\n\n\nDuring Lecture 2, I introduced the concept of inheritance.  Today, let's go deeper into how inheritance and its associated concepts work.\n\n\nConsider the class \nCircle\n, which inherits from \nObject\n.  We have seen that \nObject\n defines some non-private methods, which can be inherited by \nCircle\n.\nThese methods will be made available in the \nCircle\n class.  In the internal representation of the class, the methods will be made available in the method table of \nCircle\n.  You can view the fields and methods of class \nCircle\n as containing the fields and methods of \nObject\n, followed by fields and methods defined in \nCircle\n.\n\n\nThe figure below illustrates this.  I use a slightly darker green to represent the methods implemented in the \nObject\n class, and light green to represent methods implemented in the \nCircle\n class.\n\n\n\n\nRecall that when a class implements an interface, an instance of that class can take on the type of that interface.  Similarly, when a class inherits from a parent class, an instance of that class can take on the type of the parent class.  So, we can do the following:\n\n\n1\n2\nCircle\n \nc\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n0\n),\n \n10\n);\n\n\nObject\n \no\n \n=\n \nc\n;\n\n\n\n\n\n\n\nLine 2 assigns the circle object \nc\n to \no\n of type \nObject\n.  So, both \no\n and \nc\n are referring to the same objects.  Due to type checking at compile time, however, Java does not allow methods and fields in the subclass (e.g., \nCircle\n) that is not in the superclass (e.g., \nObject\n) to be called.  In this example, only the methods known to \nObject\n can be accessed by \no\n.\n\n\nNow, consider what would happen if we override the method \nequals()\n from the \nObject\n class.  This is what we did in the last lecture.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n    \nclass\n \nCircle\n \nimplements\n \nShape\n,\n \nPrintable\n \n{\n\n     \n:\n\n         \n@Override\n\n         \npublic\n \nboolean\n \nequals\n(\nObject\n \nobj\n)\n \n{\n\n             \nif\n \n(\nobj\n \ninstanceof\n \nCircle\n)\n \n{\n\n                 \nCircle\n \ncircle\n \n=\n \n(\nCircle\n)\n \nobj\n;\n\n                 \nreturn\n \n(\ncircle\n.\ncenter\n.\nequals\n(\ncenter\n)\n \n&&\n \ncircle\n.\nradius\n \n==\n \nradius\n);\n\n             \n}\n \nelse\n\n               \nreturn\n \nfalse\n;\n\n         \n}\n\n    \n}\n\n\n\n\n\n\n\n\n\nEquality for Point\n\n\nRecall that we override \nequals\n because we want to compare the content of the two circles, instead of comparing if two circle references point to the same object.  For the implementation above to be correct, we need to override the \nequals\n function for the \nPoint\n class as well.  This is not shown in class and left as an exercise.\n\n\n\n\nThe method table will update the entry for \nequals()\n to point to the implementation provided by the \nCircle\n class, instead of the \nObject\n class.\n\n\n\n\nNow, consider what would happen if we \noverload\n the method \nequals()\n with one that takes in a \nCircle\n object.  I also throw in a couple of \nSystem.out.print()\n to help us figure out what is going on.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n    \nclass\n \nCircle\n \nimplements\n \nShape\n,\n \nPrintable\n \n{\n\n     \n:\n\n         \n@Override\n\n         \npublic\n \nboolean\n \nequals\n(\nObject\n \nobj\n)\n \n{\n\n             \nSystem\n.\nout\n.\nprint\n(\n\"equals(Object) called\\n\"\n);\n\n             \nif\n \n(\nobj\n \ninstanceof\n \nCircle\n)\n \n{\n\n                 \nCircle\n \ncircle\n \n=\n \n(\nCircle\n)\n \nobj\n;\n\n                 \nreturn\n \n((\ncircle\n.\ncenter\n.\nequals\n(\ncenter\n)\n \n&&\n \ncircle\n.\nradius\n \n==\n \nradius\n);\n\n             \n}\n \nelse\n\n               \nreturn\n \nfalse\n;\n\n         \n}\n\n\n         \npublic\n \nboolean\n \nequals\n(\nCircle\n \ncircle\n)\n \n{\n\n             \nSystem\n.\nout\n.\nprint\n(\n\"equals(Circle) called\\n\"\n);\n\n             \nreturn\n \n((\ncircle\n.\ncenter\n.\nequals\n(\ncenter\n)\n \n&&\n \ncircle\n.\nradius\n \n==\n \nradius\n);\n\n         \n}\n\n    \n}\n\n\n\n\n\n\n\nSince this new \nequals()\n method does not override the method in \nObject\n, it gets its own slot in the method table of \nCircle\n, instead of reusing one from the \nObject\n.\n\n\n\n\nNow, consider which version of \nequals\n are called by the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nCircle\n \nc1\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n0\n),\n \n10\n);\n\n\nCircle\n \nc2\n \n=\n \nnew\n \nCircle\n(\nnew\n \nPoint\n(\n0\n,\n0\n),\n \n10\n);\n\n\nObject\n \no1\n \n=\n \nc1\n;\n\n\nObject\n \no2\n \n=\n \nc2\n;\n\n\n\no1\n.\nequals\n(\no2\n);\n\n\no1\n.\nequals\n((\nCircle\n)\no2\n);\n\n\no1\n.\nequals\n(\nc2\n);\n\n\nc1\n.\nequals\n(\no2\n);\n\n\nc1\n.\nequals\n((\nCircle\n)\no2\n);\n\n\nc1\n.\nequals\n(\nc2\n);\n\n\n\n\n\n\n\nLines 6-9 call \nequals(Object)\n defined in \nCircle\n\uff0c while Lines 10-11 call \nequals(Circle)\n defined in \nCircle\n.  Let's look at why for each one:\n\n\n\n\nLine 6 calls \nequals\n of an \nObject\n object on an \nObject\n object.  Java checks through all methods defined in \nObject\n, and finds a method that matches the signature, which is the \nequals(Object)\n (which \nCircle\n has overridden). This is the one that will get called.\n\n\nLine 7-8 call \nequals\n of an \nObject\n object on a \nCircle\n object.  Java checks through all methods defined in \nObject\n, and finds one method that matches the signature, which is \nequals(Object)\n (which \nCircle\n has overridden).  Even though there is another method \nequals(Circle)\n defined, it is defined as part of the \nCircle\n class, which Java refuses to access because \no1\n is declared to have the type \nObject\n.  Since the only method that Java can find has an argument of type \nObject\n, the argument is cast as an \nObject\n when \nequals\n is invoked.\n\n\nLine 9 calls \nequals\n of a \nCircle\n object on an \nObject\n object.  Java finds a method with matching signature, \nequals(Object)\n, and invokes that.\n\n\nFinal 10-11 calls \nequals\n of a \nCircle\n object on a \nCircle\n object.  Java finds a method with matching signature, \nequals(Circle)\n, and invokes that.\n\n\n\n\nAnother question that came up is why we need to override \nequals\n in \nObject\n, rather than just using the \nCircle\n-specific \nequals(Circle)\n.  As shown above, only when an object declared as \nCircle\n calls \nequals\n on another \nCircle\n object, the \nCircle\n-specific \nequals(Circle)\n is invoked.  \n\n\nTo write code that is general and reusable, we should exploit OO polymorphism, that means different subclasses of \nObject\n implement their own customized version of \nequals\n, and the right version of \nequals\n will be called.\n\n\nOne example of where this is called the \ncontains(Object)\n method from class \nArrayList\n (we will cover this later in class), which checks if an object is already in the list, and to check this, it checks for equality of the given object with every object in the \nArrayList\n, by calling \nequals(Object)\n.\n\n\nWe now turn our attention to another method in \nObject\n that we could override, the \ntoString()\n method.  \ntoString()\n is called whenever the \nString\n representation of an object is needed.  For instance, when we try to print an object.   By default, the \ntoString\n of \nObject\n simply prints the name of the class, followed by \n@\n, followed by the reference.   It is often useful to override this to include the content of the object as well, for debugging and logging purposes.  This is a much more useful and flexible than writing our own \nprint()\n method as we have seen in earlier lectures, since we are not limited to printing to standard output anymore.\n\n\n\n\njava.lang.String\n\n\nString\n is one of many useful classes provided by Java.  You can skim through to see what methods are available and keep the \nAPI reference\n handy.\n\n\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nPoint\n \n{\n\n    \n:\n\n    \npublic\n \nString\n \ntoString\n()\n \n{\n\n        \nreturn\n \n\"(\"\n \n+\n \nx\n \n+\n \n\",\"\n \n+\n \ny\n \n\")\"\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nNow, if we run:\n\n1\n2\nPoint\n \np\n \n=\n \nnew\n \nPoint\n(\n0\n,\n0\n);\n\n\nSystem\n.\nout\n.\nprintln\n(\np\n);\n\n\n\n\n\n\nIt should print \n(0,0)\n instead of \nPoint\n@1235\nde\n.\n\n\nThe ability to override methods that you inherit from a parent, including root class \nObject\n, makes overriding an extremely powerful tool.  It allows you to change how existing libraries behave, and customize them to your classes, without changing a single line of their code or even has access to their code!\n\n\nAs Uncle Ben said, \"With great power, comes great responsibility.\"  We must use overriding and inheritance carefully.  Since we can affect how existing libraries behave, we can easily break existing code and introduce bugs.  Since you may not have access to these existing code, it is often tricky to trace and debug.  \n\n\nModeling HAS-A Relationship\n\n\nInheritance in OO tends to get overused.  In practice, we seldom use inheritance.  Let's look at some examples of how \nnot\n to use inheritance, and why.\n\n\nYou may come across examples online or in books that look like the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nclass\n \nPoint\n \n{\n\n    \nprotected\n \ndouble\n \nx\n;\n\n    \nprotected\n \ndouble\n \ny\n;\n\n      \n:\n\n\n}\n\n\n\nclass\n \nCircle\n \nextends\n \nPoint\n \n{\n\n    \nprotected\n \ndouble\n \nradius\n;\n\n      \n:\n\n\n}\n\n\n\nclass\n \nCylinder\n \nextends\n \nCircle\n \n{\n\n    \nprotected\n \ndouble\n \nheight\n;\n\n      \n:\n\n\n}\n\n\n\n\n\n\n\n\n\nProtected fields\n\n\nThe example above have been changed after the class to clarify the access modifier appropriate for this example.  See After Note below for details.\n\n\n\n\nCircle\n implemented like the above would have the center coordinate inherited from the parent (so it has three fields, x, y, and radius), and \nCylinder\n would have the fields corresponding to a circle, which is its base, and the height.  So, we are \nreusing\n the fields and the code related to initializing and manipulating the fields.\n\n\nWhen we start to consider methods encapsulated with each object, things start to get less intuitive.  What does \ngetPerimeter()\n and \ngetArea()\n of \nCylinder\n means?  How about \ndistanceTo\n between a \nCylinder\n and a \nPoint\n?   What is the meaning of a \nCircle\n containing a \nCylinder\n?\n\n\nThe inheritance hierarchy above actually models the HAS-A relationship: A circle has a center (which is a point), a cylinder has a base which is a circle.  Therefore, a better way to capture the relationship between the three types of objects is through \ncomposition\n:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\nclass\n \nPoint\n \n{\n\n    \ndouble\n \nx\n;\n\n    \ndouble\n \ny\n;\n\n      \n:\n\n\n}\n\n\n\nclass\n \nCircle\n \n{\n\n    \nPoint\n \ncenter\n;\n\n    \ndouble\n \nradius\n;\n\n      \n:\n\n\n}\n\n\n\nclass\n \nCylinder\n \n{\n\n    \nCircle\n \nbase\n;\n\n    \ndouble\n \nheight\n;\n\n      \n:\n\n\n}\n\n\n\n\n\n\n\nComposition allows us to build more complex classes from simpler ones, and is usually favored over inheritance.  \n\n\nThe \nPaintedShape\n class from Lecture 2, for instance, could be modeled as a composition of a \nStyle\n object and \nGeometricShape\n object.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nclass\n \nStyle\n \n{\n\n    \nColor\n \nfillColor\n;\n\n    \nColor\n \nborderColor\n;\n\n      \n:\n\n\n}\n\n\n\nclass\n \nPaintedShape\n \n{\n\n    \nStyle\n \nstyle\n;\n\n    \nGeometricShape\n \nshape\n;\n\n      \n:\n\n    \npublic\n \ndouble\n \ngetArea\n()\n \n{\n\n        \nreturn\n \nshape\n.\ngetArea\n();\n\n    \n}\n\n    \n:\n\n    \npublic\n \nvoid\n \nfillWith\n(\nColor\n \nc\n)\n \n{\n\n        \nstyle\n.\nfillWith\n(\nc\n);\n\n    \n}\n\n      \n:\n\n\n}\n\n\n\n\n\n\n\nThe design above is also known as the \nforwarding\n -- calls to methods on \nPaintedShape\n gets forwarded to either \nStyle\n or \nGeometricShape\n objects.\n\n\nModeling IS-A Relationship\n\n\nA better situation to use inheritance is to model a IS-A relationship: when the subclass behaves just like parent class, but has some additional behaviors.  For instance, it is natural to model a \nPaintedCircle\n as a subclass of \nCircle\n -- since a PaintedCircle has all the behavior of \nCircle\n, but has \nadditional\n behaviors related to being painted.\n\n\n1\n2\n3\n4\nclass\n \nPaintedCircle\n \nextends\n \nCircle\n \n{\n\n    \nStyle\n \nstyle\n;\n\n      \n:\n\n\n}\n\n\n\n\n\n\n\nA more tricky situation for modeling a IS-A relationship occurs when the subclass behaves just like the parent class \nmost\n of the time, but is slightly different than the parent's behavior.  Consider how do we model a rectangle and a square.  Normally, we consider a square IS-A special case of rectangle.  So, we could model as:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nclass\n \nRectangle\n \n{\n\n    \ndouble\n \nwidth\n,\n \nheight\n;\n\n    \nPoint\n \ntopLeft\n;\n\n    \nRectangle\n(\nPoint\n \ntopLeft\n,\n \nin\n \nwidth\n,\n \nint\n \nheight\n)\n \n{\n\n        \nthis\n.\ntopLeft\n \n=\n \ntopLeft\n;\n\n        \nthis\n.\nwidth\n \n=\n \nwidth\n;\n\n        \nthis\n.\nheight\n \n=\n \nheight\n;\n\n    \n}\n\n\n}\n\n\n\nclass\n \nSquare\n \nextends\n \nRectangle\n \n{\n\n    \nSquare\n(\nPoint\n \ntopLeft\n,\n \nint\n \nwidth\n)\n \n{\n\n        \nsuper\n(\ntopLeft\n,\n \nwidth\n,\n \nwidth\n);\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nthis\n\n\nThe \nthis\n keyword in Java that refers to the current object.\n\n\n\n\nSo far, so good.\n\n\nNow, suppose the two classes are written by two different developers.  The developer who wrote Rectangle decides to add the method \nresizeTo\n:\n\n\n1\n2\n3\n4\n5\n6\n7\nclass\n \nRectangle\n \n{\n\n      \n:\n\n    \nvoid\n \nresizeTo\n(\nint\n \nwidth\n,\n \nint\n \nheight\n)\n \n{\n\n        \nthis\n.\nwidth\n \n=\n \nwidth\n;\n\n        \nthis\n.\nheight\n \n=\n \nheight\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nThis developer assumes the behavior that, after calling \nresizeTo(w, h)\n, the width of the rectangle will be \nw\n and the height will be \nh\n.  He/she publishes this API, and another developer then assumes this behavior, and wrote some code, like:\n\n\n1\n2\n3\n4\nvoid\n \ndoSomething\n(\nRectangle\n \nr\n)\n \n{\n\n    \nr\n.\nresizeTo\n(\n1\n,\n \n2\n);\n\n      \n:\n\n\n}\n\n\n\n\n\nWhat should the developer who develops \nSquare\n do?  Since \nSquare\n is a subclass of rectangle, it would inherit \nresizeTo\n from its parent, but it does not make sense to call \nresizeTo\n with two different parameters.  Sure, \nSquare\n can overload \nresizeTo\n and provide a \nresizeTo\n with one parameter only, but that does not prevent someone from calling \nresizeTo\n with two parameters on a \nSquare\n.  Someone could do the following and the code would still compile and run, turning the square into a rectangle!\n\n\n1\n2\nSquare\n \ns\n \n=\n \nnew\n \nSquare\n(\nnew\n \nPoint\n(\n0\n,\n0\n),\n \n10\n);\n\n\ns\n.\nresize\n(\n4\n,\n \n8\n);\n\n\n\n\n\n\n\nThe \nSquare\n developer can try to override \nresizeTo\n, to ignore the second parameter:\n\n\n1\n2\n3\n4\n5\n6\n7\nclass\n \nSquare\n \n{\n\n      \n:\n\n    \nvoid\n \nresizeTo\n(\nint\n \nwidth\n,\n \nint\n \nheight\n)\n \n{\n\n        \nthis\n.\nwidth\n \n=\n \nwidth\n;\n\n        \nthis\n.\nheight\n \n=\n \nwidth\n;\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nThis makes more sense and would make everyone who uses \nSquare\n happy -- a square is always a square -- but it introduces an \ninconsistency\n in behavior and will likely break another part of the code the developer is totally unaware of.  The developer for \ndoSomething\n suddenly cannot assume that \nresizeTo\n works as intended and documented.\n\n\nIt is a developer's responsibility that any inheritance with method overriding does not alter the behavior of existing code.  This brings us to the Liskov Substitution Principle, which says that: \"Let \n\\(\\phi(x)\\)\n be a property provable about objects \n\\(x\\)\n of type \n\\(T\\)\n. Then \n\\(\\phi(y)\\)\n should be true for objects \n\\(y\\)\n of type \n\\(S\\)\n where \n\\(S\\)\n is a subtype of \n\\(T\\)\n.\"   This means that if \n\\(S\\)\n is a subclass of \n\\(T\\)\n, then an object of type \n\\(T\\)\n can be replaced by an object of type \n\\(S\\)\n without changing the desirable property of the program.\n\n\nIn the example above, this means that everywhere we can expect rectangles to be used, we can replace a rectangle with a square.  This was no longer true with the introduction of \nresizeTo\n method.\n\n\nPreventing Inheritance and Method Overriding\n\n\nSometimes, it is useful for a developer to explicitly prevent a class to be inherited.  Not allowing inheritance would make it much easier to argue for the correctness of programs, something important when it comes to writing secure program.  Both the two java classes you have seen, \njava.lang.Math\n and \njava.lang.String\n, cannot be inherited from.  In Java, we use the keyword \nfinal\n when declaring a class to tell Java that we ban this class from being inherited.\n\n\n1\n2\n3\nfinal\n \nclass\n \nCircle\n \n{\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nAlternatively, we can allow inheritance, but still prevent a specific method from being overridden, by declaring a method as \nfinal\n.  Usually, we do this on methods that are critical for the correctness of the class.\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nCircle\n \n{\n\n   \n:\n\n    \nfinal\n \npublic\n \nboolean\n \ncontains\n(\nPoint\n \np\n)\n \n{\n\n        \n:\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\nfinal variable\n\n\nThe keyword \nfinal\n has another use.   When declaring a variable as \nfinal\n, just like\n    \nPI\n in \nMath\n, it prevents the variable from being modified.  In other words, the variable becomes constant.\n\n1\n    \npublic\n \nstatic\n \nfinal\n \ndouble\n \nPI\n   \n=\n \n3.141592653589793\n;\n\n\n\n\n\n\n\n\nAbstract Class and Interface with Default Methods\n\n\nWe have seen how a class can inherit from a parent class, and implement one or more interfaces.  So far, the parent class that we have seen is a \nconcrete\n class -- it has fields and methods, complete with method implementation.  Such concrete parent class can be instantiated into objects.   \n\n\nOn the other hand, we have interfaces, which is completely virtual, it declared what public methods it should provide -- together with the returned type for each method and the method signature.  There is no field and no implementation.\n\n\nBetween these two extremes, there are two other possibilities in Java:\n\n\n\n\nAn \nabstract class\n, which is just like a class, but it is declared as \nabstract\n, and some of its methods are declared as \nabstract\n, without implementation.  An abstract class cannot be instantiated, and any subclass who wish to be concrete needs to implement these abstract methods.\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nabstract\n \nclass\n \nPaintedShape\n \n{\n\n    \nColor\n \nfillColor\n;\n\n      \n:\n\n  \nvoid\n \nfillWith\n(\nColor\n \nc\n)\n \n{\n\n        \nfillColor\n \n=\n \nc\n;\n\n    \n}\n\n    \n:\n\n    \nabstract\n \ndouble\n \ngetArea\n();\n\n    \nabstract\n \ndouble\n \ngetPerimeter\n();\n\n      \n:\n\n\n}\n\n\n\n\n\n\nAn interface with default implementation.  Introduced only in Java 8, with the goal of allowing interface to evolve, an interface can now contain implementation of the methods.  Such interface still cannot be instantiated into objects, but classes that implement such interface need not provide implementation for a method where a default implementation exists.  For instance, we can have:\n\n1\n2\n3\n4\n5\n6\n7\n    \ninterface\n \nGeometricShape\n \n{\n\n    \npublic\n \ndouble\n \ngetArea\n();\n\n    \npublic\n \ndouble\n \ngetPerimeter\n();\n\n    \npublic\n \nboolean\n \ncontains\n(\nPoint\n \np\n);\n\n        \ndefault\n \npublic\n \nboolean\n \ncover\n(\nPoint\n \np\n)\n \n{\n\n            \nreturn\n \ncontains\n(\np\n);\n\n        \n}\n\n\n\n\n\nwhere \ncover\n is a new method with default implementation, denoted with keyword \ndefault\n.\n\n\n\n\nAt this point in CS2030, let's not worry about when to use abstract class or default methods in interfaces, but just be aware that they exists and understand what they mean when you come across them.  After you gain some experience writing OO programs, we will revisit these concepts so that you can better appreciate their differences and usage.\n\n\nAfter Note\n\n\nThere are a couple of points to clarify with regards to Lecture 3.\n\n\n\n\n\n\nWhen we override \nequals()\n of \nObject\n in \nCircle\n, I said \"\n\nThe method table will update the entry for \nequals()\n to point to the implementation provided by the \nCircle\n class, instead of the \nObject\n class.\n\"\nand in the figure, I showed that the code for \nCircle\n's customized \nequals\n replacing the \nequals\n for \nObject\n.  What I should have added, is that, the original implementation of \nequals\n from \nObject\n is not completely gone.  Methods from the immediate parent that have been overriden can still be called, with \nsuper\n keyword.  Here is a useful example from \nPoint\n's \ntoString()\n:\n\n1\n2\n3\n4\n@Override\n\n\npublic\n \nString\n \ntoString\n()\n \n{\n\n  \nreturn\n \nsuper\n.\ntoString\n()\n \n+\n \n\" (\"\n \n+\n \nx\n \n+\n \n\",\"\n \n+\n \ny\n \n+\n \n\")\"\n;\n\n\n}\n\n\n\n\n\nwhich prefix the string representation of Point with the class and reference address.\n\n\n\n\n\n\nIn the example where we inherit \nCylinder\n from \nCircle\n, and \nCircle\n from \nPoint\n, what should the access modifier of the fields, \nx\n,\ny\n, and \nradius\n be?   If they are declared \nprivate\n, then \nCircle\n has no access to \nx\n and \ny\n; \nCylinder\n has no access to \nx\n,\ny\n, and \nradius\n.  If they are declared \npublic\n, then they are accessible by everyone, breaking the abstraction barrier!  Fortunately, Java has just the right access modifier for this situation: \nx\n, \ny\n, and \nradius\n should be declared as \nprotected\n.  A \nprotected\n field is less restrictive than \npublic\n, and is accessible by subclass but is not accessible by the whole world.",
            "title": "3. Inheritance, Continued"
        },
        {
            "location": "/lec3/index.html#lecture-3-inheritance-continued",
            "text": "",
            "title": "Lecture 3: Inheritance, Continued"
        },
        {
            "location": "/lec3/index.html#learning-objectives",
            "text": "At the end of this lecture, students should   be familiar with how Java dispatches methods that have been overridden  appreciate the usefulness of overriding  equals  and  toString  in the  Object  class  be exposed to the  String  class and its associated methods, especially the  +  operator  be aware that inheritance can be abused to provide bad code  understand the differences between HAS-A and IS-A relationship  be able to use composition to model classes with HAS-A relationship  be able to use inheritance to model classes with IS-A relationship  understand the Liskov Substitution Principle and thus be aware that not all IS-A relationship should be modelled with inheritance  understand the purposes of the Java keywords  this ,  final ,  abstract  and  default",
            "title": "Learning Objectives"
        },
        {
            "location": "/lec3/index.html#method-overriding",
            "text": "During Lecture 2, I introduced the concept of inheritance.  Today, let's go deeper into how inheritance and its associated concepts work.  Consider the class  Circle , which inherits from  Object .  We have seen that  Object  defines some non-private methods, which can be inherited by  Circle .\nThese methods will be made available in the  Circle  class.  In the internal representation of the class, the methods will be made available in the method table of  Circle .  You can view the fields and methods of class  Circle  as containing the fields and methods of  Object , followed by fields and methods defined in  Circle .  The figure below illustrates this.  I use a slightly darker green to represent the methods implemented in the  Object  class, and light green to represent methods implemented in the  Circle  class.   Recall that when a class implements an interface, an instance of that class can take on the type of that interface.  Similarly, when a class inherits from a parent class, an instance of that class can take on the type of the parent class.  So, we can do the following:  1\n2 Circle   c   =   new   Circle ( new   Point ( 0 , 0 ),   10 );  Object   o   =   c ;    Line 2 assigns the circle object  c  to  o  of type  Object .  So, both  o  and  c  are referring to the same objects.  Due to type checking at compile time, however, Java does not allow methods and fields in the subclass (e.g.,  Circle ) that is not in the superclass (e.g.,  Object ) to be called.  In this example, only the methods known to  Object  can be accessed by  o .  Now, consider what would happen if we override the method  equals()  from the  Object  class.  This is what we did in the last lecture.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11      class   Circle   implements   Shape ,   Printable   { \n      : \n          @Override \n          public   boolean   equals ( Object   obj )   { \n              if   ( obj   instanceof   Circle )   { \n                  Circle   circle   =   ( Circle )   obj ; \n                  return   ( circle . center . equals ( center )   &&   circle . radius   ==   radius ); \n              }   else \n                return   false ; \n          } \n     }     Equality for Point  Recall that we override  equals  because we want to compare the content of the two circles, instead of comparing if two circle references point to the same object.  For the implementation above to be correct, we need to override the  equals  function for the  Point  class as well.  This is not shown in class and left as an exercise.   The method table will update the entry for  equals()  to point to the implementation provided by the  Circle  class, instead of the  Object  class.   Now, consider what would happen if we  overload  the method  equals()  with one that takes in a  Circle  object.  I also throw in a couple of  System.out.print()  to help us figure out what is going on.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17      class   Circle   implements   Shape ,   Printable   { \n      : \n          @Override \n          public   boolean   equals ( Object   obj )   { \n              System . out . print ( \"equals(Object) called\\n\" ); \n              if   ( obj   instanceof   Circle )   { \n                  Circle   circle   =   ( Circle )   obj ; \n                  return   (( circle . center . equals ( center )   &&   circle . radius   ==   radius ); \n              }   else \n                return   false ; \n          } \n\n          public   boolean   equals ( Circle   circle )   { \n              System . out . print ( \"equals(Circle) called\\n\" ); \n              return   (( circle . center . equals ( center )   &&   circle . radius   ==   radius ); \n          } \n     }    Since this new  equals()  method does not override the method in  Object , it gets its own slot in the method table of  Circle , instead of reusing one from the  Object .   Now, consider which version of  equals  are called by the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 Circle   c1   =   new   Circle ( new   Point ( 0 , 0 ),   10 );  Circle   c2   =   new   Circle ( new   Point ( 0 , 0 ),   10 );  Object   o1   =   c1 ;  Object   o2   =   c2 ;  o1 . equals ( o2 );  o1 . equals (( Circle ) o2 );  o1 . equals ( c2 );  c1 . equals ( o2 );  c1 . equals (( Circle ) o2 );  c1 . equals ( c2 );    Lines 6-9 call  equals(Object)  defined in  Circle \uff0c while Lines 10-11 call  equals(Circle)  defined in  Circle .  Let's look at why for each one:   Line 6 calls  equals  of an  Object  object on an  Object  object.  Java checks through all methods defined in  Object , and finds a method that matches the signature, which is the  equals(Object)  (which  Circle  has overridden). This is the one that will get called.  Line 7-8 call  equals  of an  Object  object on a  Circle  object.  Java checks through all methods defined in  Object , and finds one method that matches the signature, which is  equals(Object)  (which  Circle  has overridden).  Even though there is another method  equals(Circle)  defined, it is defined as part of the  Circle  class, which Java refuses to access because  o1  is declared to have the type  Object .  Since the only method that Java can find has an argument of type  Object , the argument is cast as an  Object  when  equals  is invoked.  Line 9 calls  equals  of a  Circle  object on an  Object  object.  Java finds a method with matching signature,  equals(Object) , and invokes that.  Final 10-11 calls  equals  of a  Circle  object on a  Circle  object.  Java finds a method with matching signature,  equals(Circle) , and invokes that.   Another question that came up is why we need to override  equals  in  Object , rather than just using the  Circle -specific  equals(Circle) .  As shown above, only when an object declared as  Circle  calls  equals  on another  Circle  object, the  Circle -specific  equals(Circle)  is invoked.    To write code that is general and reusable, we should exploit OO polymorphism, that means different subclasses of  Object  implement their own customized version of  equals , and the right version of  equals  will be called.  One example of where this is called the  contains(Object)  method from class  ArrayList  (we will cover this later in class), which checks if an object is already in the list, and to check this, it checks for equality of the given object with every object in the  ArrayList , by calling  equals(Object) .  We now turn our attention to another method in  Object  that we could override, the  toString()  method.   toString()  is called whenever the  String  representation of an object is needed.  For instance, when we try to print an object.   By default, the  toString  of  Object  simply prints the name of the class, followed by  @ , followed by the reference.   It is often useful to override this to include the content of the object as well, for debugging and logging purposes.  This is a much more useful and flexible than writing our own  print()  method as we have seen in earlier lectures, since we are not limited to printing to standard output anymore.   java.lang.String  String  is one of many useful classes provided by Java.  You can skim through to see what methods are available and keep the  API reference  handy.   1\n2\n3\n4\n5\n6 class   Point   { \n     : \n     public   String   toString ()   { \n         return   \"(\"   +   x   +   \",\"   +   y   \")\" ; \n     }  }    Now, if we run: 1\n2 Point   p   =   new   Point ( 0 , 0 );  System . out . println ( p );    It should print  (0,0)  instead of  Point @1235 de .  The ability to override methods that you inherit from a parent, including root class  Object , makes overriding an extremely powerful tool.  It allows you to change how existing libraries behave, and customize them to your classes, without changing a single line of their code or even has access to their code!  As Uncle Ben said, \"With great power, comes great responsibility.\"  We must use overriding and inheritance carefully.  Since we can affect how existing libraries behave, we can easily break existing code and introduce bugs.  Since you may not have access to these existing code, it is often tricky to trace and debug.",
            "title": "Method Overriding"
        },
        {
            "location": "/lec3/index.html#modeling-has-a-relationship",
            "text": "Inheritance in OO tends to get overused.  In practice, we seldom use inheritance.  Let's look at some examples of how  not  to use inheritance, and why.  You may come across examples online or in books that look like the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 class   Point   { \n     protected   double   x ; \n     protected   double   y ; \n       :  }  class   Circle   extends   Point   { \n     protected   double   radius ; \n       :  }  class   Cylinder   extends   Circle   { \n     protected   double   height ; \n       :  }     Protected fields  The example above have been changed after the class to clarify the access modifier appropriate for this example.  See After Note below for details.   Circle  implemented like the above would have the center coordinate inherited from the parent (so it has three fields, x, y, and radius), and  Cylinder  would have the fields corresponding to a circle, which is its base, and the height.  So, we are  reusing  the fields and the code related to initializing and manipulating the fields.  When we start to consider methods encapsulated with each object, things start to get less intuitive.  What does  getPerimeter()  and  getArea()  of  Cylinder  means?  How about  distanceTo  between a  Cylinder  and a  Point ?   What is the meaning of a  Circle  containing a  Cylinder ?  The inheritance hierarchy above actually models the HAS-A relationship: A circle has a center (which is a point), a cylinder has a base which is a circle.  Therefore, a better way to capture the relationship between the three types of objects is through  composition :   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17 class   Point   { \n     double   x ; \n     double   y ; \n       :  }  class   Circle   { \n     Point   center ; \n     double   radius ; \n       :  }  class   Cylinder   { \n     Circle   base ; \n     double   height ; \n       :  }    Composition allows us to build more complex classes from simpler ones, and is usually favored over inheritance.    The  PaintedShape  class from Lecture 2, for instance, could be modeled as a composition of a  Style  object and  GeometricShape  object.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 class   Style   { \n     Color   fillColor ; \n     Color   borderColor ; \n       :  }  class   PaintedShape   { \n     Style   style ; \n     GeometricShape   shape ; \n       : \n     public   double   getArea ()   { \n         return   shape . getArea (); \n     } \n     : \n     public   void   fillWith ( Color   c )   { \n         style . fillWith ( c ); \n     } \n       :  }    The design above is also known as the  forwarding  -- calls to methods on  PaintedShape  gets forwarded to either  Style  or  GeometricShape  objects.",
            "title": "Modeling HAS-A Relationship"
        },
        {
            "location": "/lec3/index.html#modeling-is-a-relationship",
            "text": "A better situation to use inheritance is to model a IS-A relationship: when the subclass behaves just like parent class, but has some additional behaviors.  For instance, it is natural to model a  PaintedCircle  as a subclass of  Circle  -- since a PaintedCircle has all the behavior of  Circle , but has  additional  behaviors related to being painted.  1\n2\n3\n4 class   PaintedCircle   extends   Circle   { \n     Style   style ; \n       :  }    A more tricky situation for modeling a IS-A relationship occurs when the subclass behaves just like the parent class  most  of the time, but is slightly different than the parent's behavior.  Consider how do we model a rectangle and a square.  Normally, we consider a square IS-A special case of rectangle.  So, we could model as:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 class   Rectangle   { \n     double   width ,   height ; \n     Point   topLeft ; \n     Rectangle ( Point   topLeft ,   in   width ,   int   height )   { \n         this . topLeft   =   topLeft ; \n         this . width   =   width ; \n         this . height   =   height ; \n     }  }  class   Square   extends   Rectangle   { \n     Square ( Point   topLeft ,   int   width )   { \n         super ( topLeft ,   width ,   width ); \n     }  }     this  The  this  keyword in Java that refers to the current object.   So far, so good.  Now, suppose the two classes are written by two different developers.  The developer who wrote Rectangle decides to add the method  resizeTo :  1\n2\n3\n4\n5\n6\n7 class   Rectangle   { \n       : \n     void   resizeTo ( int   width ,   int   height )   { \n         this . width   =   width ; \n         this . height   =   height ; \n     }  }    This developer assumes the behavior that, after calling  resizeTo(w, h) , the width of the rectangle will be  w  and the height will be  h .  He/she publishes this API, and another developer then assumes this behavior, and wrote some code, like:  1\n2\n3\n4 void   doSomething ( Rectangle   r )   { \n     r . resizeTo ( 1 ,   2 ); \n       :  }   \nWhat should the developer who develops  Square  do?  Since  Square  is a subclass of rectangle, it would inherit  resizeTo  from its parent, but it does not make sense to call  resizeTo  with two different parameters.  Sure,  Square  can overload  resizeTo  and provide a  resizeTo  with one parameter only, but that does not prevent someone from calling  resizeTo  with two parameters on a  Square .  Someone could do the following and the code would still compile and run, turning the square into a rectangle!  1\n2 Square   s   =   new   Square ( new   Point ( 0 , 0 ),   10 );  s . resize ( 4 ,   8 );    The  Square  developer can try to override  resizeTo , to ignore the second parameter:  1\n2\n3\n4\n5\n6\n7 class   Square   { \n       : \n     void   resizeTo ( int   width ,   int   height )   { \n         this . width   =   width ; \n         this . height   =   width ; \n     }  }    This makes more sense and would make everyone who uses  Square  happy -- a square is always a square -- but it introduces an  inconsistency  in behavior and will likely break another part of the code the developer is totally unaware of.  The developer for  doSomething  suddenly cannot assume that  resizeTo  works as intended and documented.  It is a developer's responsibility that any inheritance with method overriding does not alter the behavior of existing code.  This brings us to the Liskov Substitution Principle, which says that: \"Let  \\(\\phi(x)\\)  be a property provable about objects  \\(x\\)  of type  \\(T\\) . Then  \\(\\phi(y)\\)  should be true for objects  \\(y\\)  of type  \\(S\\)  where  \\(S\\)  is a subtype of  \\(T\\) .\"   This means that if  \\(S\\)  is a subclass of  \\(T\\) , then an object of type  \\(T\\)  can be replaced by an object of type  \\(S\\)  without changing the desirable property of the program.  In the example above, this means that everywhere we can expect rectangles to be used, we can replace a rectangle with a square.  This was no longer true with the introduction of  resizeTo  method.",
            "title": "Modeling IS-A Relationship"
        },
        {
            "location": "/lec3/index.html#preventing-inheritance-and-method-overriding",
            "text": "Sometimes, it is useful for a developer to explicitly prevent a class to be inherited.  Not allowing inheritance would make it much easier to argue for the correctness of programs, something important when it comes to writing secure program.  Both the two java classes you have seen,  java.lang.Math  and  java.lang.String , cannot be inherited from.  In Java, we use the keyword  final  when declaring a class to tell Java that we ban this class from being inherited.  1\n2\n3 final   class   Circle   { \n     :  }    Alternatively, we can allow inheritance, but still prevent a specific method from being overridden, by declaring a method as  final .  Usually, we do this on methods that are critical for the correctness of the class.  1\n2\n3\n4\n5\n6 class   Circle   { \n    : \n     final   public   boolean   contains ( Point   p )   { \n         : \n     }  }     final variable  The keyword  final  has another use.   When declaring a variable as  final , just like\n     PI  in  Math , it prevents the variable from being modified.  In other words, the variable becomes constant. 1      public   static   final   double   PI     =   3.141592653589793 ;",
            "title": "Preventing Inheritance and Method Overriding"
        },
        {
            "location": "/lec3/index.html#abstract-class-and-interface-with-default-methods",
            "text": "We have seen how a class can inherit from a parent class, and implement one or more interfaces.  So far, the parent class that we have seen is a  concrete  class -- it has fields and methods, complete with method implementation.  Such concrete parent class can be instantiated into objects.     On the other hand, we have interfaces, which is completely virtual, it declared what public methods it should provide -- together with the returned type for each method and the method signature.  There is no field and no implementation.  Between these two extremes, there are two other possibilities in Java:   An  abstract class , which is just like a class, but it is declared as  abstract , and some of its methods are declared as  abstract , without implementation.  An abstract class cannot be instantiated, and any subclass who wish to be concrete needs to implement these abstract methods.  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 abstract   class   PaintedShape   { \n     Color   fillColor ; \n       : \n   void   fillWith ( Color   c )   { \n         fillColor   =   c ; \n     } \n     : \n     abstract   double   getArea (); \n     abstract   double   getPerimeter (); \n       :  }    An interface with default implementation.  Introduced only in Java 8, with the goal of allowing interface to evolve, an interface can now contain implementation of the methods.  Such interface still cannot be instantiated into objects, but classes that implement such interface need not provide implementation for a method where a default implementation exists.  For instance, we can have: 1\n2\n3\n4\n5\n6\n7      interface   GeometricShape   { \n     public   double   getArea (); \n     public   double   getPerimeter (); \n     public   boolean   contains ( Point   p ); \n         default   public   boolean   cover ( Point   p )   { \n             return   contains ( p ); \n         }   \nwhere  cover  is a new method with default implementation, denoted with keyword  default .   At this point in CS2030, let's not worry about when to use abstract class or default methods in interfaces, but just be aware that they exists and understand what they mean when you come across them.  After you gain some experience writing OO programs, we will revisit these concepts so that you can better appreciate their differences and usage.",
            "title": "Abstract Class and Interface with Default Methods"
        },
        {
            "location": "/lec3/index.html#after-note",
            "text": "There are a couple of points to clarify with regards to Lecture 3.    When we override  equals()  of  Object  in  Circle , I said \" The method table will update the entry for  equals()  to point to the implementation provided by the  Circle  class, instead of the  Object  class. \"\nand in the figure, I showed that the code for  Circle 's customized  equals  replacing the  equals  for  Object .  What I should have added, is that, the original implementation of  equals  from  Object  is not completely gone.  Methods from the immediate parent that have been overriden can still be called, with  super  keyword.  Here is a useful example from  Point 's  toString() : 1\n2\n3\n4 @Override  public   String   toString ()   { \n   return   super . toString ()   +   \" (\"   +   x   +   \",\"   +   y   +   \")\" ;  }   \nwhich prefix the string representation of Point with the class and reference address.    In the example where we inherit  Cylinder  from  Circle , and  Circle  from  Point , what should the access modifier of the fields,  x , y , and  radius  be?   If they are declared  private , then  Circle  has no access to  x  and  y ;  Cylinder  has no access to  x , y , and  radius .  If they are declared  public , then they are accessible by everyone, breaking the abstraction barrier!  Fortunately, Java has just the right access modifier for this situation:  x ,  y , and  radius  should be declared as  protected .  A  protected  field is less restrictive than  public , and is accessible by subclass but is not accessible by the whole world.",
            "title": "After Note"
        },
        {
            "location": "/exercise1/index.html",
            "text": "Exercise 1\n\n\nThis is an ungraded, optional exercise.\n\n\nIn the example from Lecture 1, we implemented a class \nCircle\n.  There, we store and pass around two \ndouble\n variables that corresponds to the x-coordinate and y-coordinate of a point.  The code would be neater if we create a second class \nPoint\n that encapsulates the concept of a point on 2D plane and the operations on points.\n\n\nImplement a new class \nPoint\n and modify the class \nCircle\n to use the class \nPoint\n.  Pay attention to what methods and fields (if any) you expose as \npublic\n outside of the abstraction barrier of a \nPoint\n object.\n\n\nYou will need to use \njshell\n from Java 1.9 (or JDK 9) to interact with your new classes.",
            "title": "1. Circles & Points"
        },
        {
            "location": "/exercise1/index.html#exercise-1",
            "text": "This is an ungraded, optional exercise.  In the example from Lecture 1, we implemented a class  Circle .  There, we store and pass around two  double  variables that corresponds to the x-coordinate and y-coordinate of a point.  The code would be neater if we create a second class  Point  that encapsulates the concept of a point on 2D plane and the operations on points.  Implement a new class  Point  and modify the class  Circle  to use the class  Point .  Pay attention to what methods and fields (if any) you expose as  public  outside of the abstraction barrier of a  Point  object.  You will need to use  jshell  from Java 1.9 (or JDK 9) to interact with your new classes.",
            "title": "Exercise 1"
        },
        {
            "location": "/exercise2/index.html",
            "text": "Exercise 2\n\n\nThis is an ungraded, optional exercise.\n\n\nIn the example from Lecture 2, we implemented a class \nCircle\n that implements two interfaces \nGeometricShape\n and \nPrintable\n.  For this exercise,\n\n\n\n\n\n\nImplement another class \nSquare\n that implements the two interfaces.  You may have to extend the class \nPoint\n you wrote for Exercise 1 to implement the methods in Square.\n\n\n\n\n\n\nImplement another class \nPaintedSquare\n that implements the two interfaces and inherits from \nPaintedShape\n.\n\n\n\n\n\n\nImplement the methods \nequals()\n in \nSquare\n, overriding the two methods in the \nObject\n class, so that \nequals()\n semantically compare two \nSquare\n objects.",
            "title": "2. Square & PaintedSquare"
        },
        {
            "location": "/exercise2/index.html#exercise-2",
            "text": "This is an ungraded, optional exercise.  In the example from Lecture 2, we implemented a class  Circle  that implements two interfaces  GeometricShape  and  Printable .  For this exercise,    Implement another class  Square  that implements the two interfaces.  You may have to extend the class  Point  you wrote for Exercise 1 to implement the methods in Square.    Implement another class  PaintedSquare  that implements the two interfaces and inherits from  PaintedShape .    Implement the methods  equals()  in  Square , overriding the two methods in the  Object  class, so that  equals()  semantically compare two  Square  objects.",
            "title": "Exercise 2"
        },
        {
            "location": "/exercise3/index.html",
            "text": "Exercise 3\n\n\nThis is an ungraded, optional exercise.\n\n\nIn Exercise 2, you used inheritance to implement \nPaintedSquare\n.   Redo this implementation using composition instead of inheritance.\n\n\n.\n\n\n.\n\n\n.\n\n\n.\n\n\n.\n\n\n.",
            "title": "3. PaintedSquare Revisited"
        },
        {
            "location": "/exercise3/index.html#exercise-3",
            "text": "This is an ungraded, optional exercise.  In Exercise 2, you used inheritance to implement  PaintedSquare .   Redo this implementation using composition instead of inheritance.  .  .  .  .  .  .",
            "title": "Exercise 3"
        },
        {
            "location": "/lab1/index.html",
            "text": "Lab 1\n\n\nThis is a warm up, ungraded, lab.  \n\n\nSubmission deadline: 2359, Sunday, September 3, 2017.\n\n\nLearning Objectives\n\n\nAfter completing this lab, students should:\n\n\n\n\nbe more comfortable with the CS2030 laboratory environment, including knowing how to remotely access \ncs2030-i\n, create directory, copy files, edit files, transfer files between \ncs2030-i\n and local computers, run a script, and other \nUNIX commands\n\n\nbe familiar with compiling and running Java programs from the command line\n\n\nbe familiar with the concept of standard input and standard output, how to redirect the content of a file to standard input, and how to print to standard output\n\n\nbe more comfortable with basic Java syntax and semantics, specifically with\n\n\nadding methods into existing classes\n\n\ninvoking the methods of the classes to solve problems\n\n\ndeclaring and using arrays, primitive types, and objects\n\n\nusing if/else and for statements\n\n\nprinting to standard output\n\n\nthe \nthis\n keyword\n\n\n\n\n\n\n\n\n\n\nexperience reading Java API documentation and find out what are the methods available, and what are the arguments and returned types.\n\n\nsee an example of how class \nScanner\n is used\n\n\nappreciate how encapsulation of class \nPoint\n and class \nCircle\n allows one to reason about higher-level tasks without worrying about lower level representation\n\n\nappreciate how encapsulation of the class \nPoints\n allow one to change the internal representation without affecting how the class \nPoint\n is used.\n\n\n\n\nSetup\n\n\nLogin to \ncs2030-i\n, copy the files from \n~cs2030/lab01\n to your local directory under your home \n~/lab01\n.  You should see three java files (\nPoint.java\n, \nCircle.java\n, and \nMaxDiscCover.java\n), and a few data files (\nTESTDATA1.txt\n, \nTESTDATA2.txt\n, ..., \nTESTDATA5.txt\n)\n\n\nRead through the files above.  Although we have seen \nCircles\n and \nPoints\n as examples in class, these classes are slightly different.\n\n\n1. Augment the class Point\n\n\nAugment the class \nPoint\n with the following public methods and constructors.\nYou may find the static methods provided by \njava.lang.Math\n useful.\n\n\n1.1. Constructor for midpoint\n\n\n1\npublic\n \nPoint\n(\nPoint\n \np\n,\n \nPoint\n \nq\n)\n\n\n\n\n\n\n\nGiven two points \np\n and \nq\n, create and return the midpoint of \np\n and \nq\n.\n\n\n1.2 Distance between points\n\n\n1\npublic\n \ndouble\n \ndistanceTo\n(\nPoint\n \nq\n)\n \n\n\n\n\n\n\nYou should have written something like this from your Exercise 1.  This method returns the Euclidean distance of \nthis\n point to the point \nq\n.\n\n\n1.3 Angle between points\n\n\n1\npublic\n \ndouble\n \nangleTo\n(\nPoint\n \nq\n)\n \n\n\n\n\n\n\nThis method returns the angle between the current point and point \nq\n.  In the figure below, it returns the angle \n\\(\\theta\\)\n.  You can compute this using the \natan2()\n function.  For instance, \n\n1\n2\nPoint\n \np\n \n=\n \nnew\n \nPoint\n(\n0\n,\n \n0\n);\n\n\np\n.\nangleTo\n(\nnew\n \nPoint\n(\n1\n,\n \n1\n));\n\n\n\n\n\nshould return\n\n1\n0.7853981633974483\n\n\n\n\nwhich is \n\\(\\pi/4\\)\n.\n\n1\np.angleTo(new Point(1, 0));\n\n\n\n\nshould return \n\n1\n0.0\n\n\n\n\n\n\n\n1.4. Move a point\n\n\n1\npublic\n \nvoid\n \nmove\n(\ndouble\n \ntheta\n,\n \ndouble\n \nd\n)\n\n\n\n\n\n\n\nMove the point by a given distance at direction theta (in radian).  See Figure:\n\n\n\n\nThe new point should have the coordinate (\n\\(x + d\\cos\\theta, y + d\\sin\\theta\\)\n).\n\n\nAfter\n\n1\np.move(p.angleTo(q), p.distanceTo(q));\n\n\n\n\n\np\n should coincide with \nq\n.\n\n\n2. Augment the class Circle\n\n\nAugment the class \nCircle\n with the following methods and constructors:\n\n\n2.1 Constructor\n\n\n1\npublic\n \nCircle\n(\nPoint\n \np\n,\n \nPoint\n \nq\n,\n \ndouble\n \nradius\n,\n \nboolean\n \ncenterOnLeft\n)\n\n\n\n\n\n\n\nThe constructor above takes in two points \np\n and \nq\n, and returns a circle  that passes through both \np\n and \nq\n, with radius \nradius\n.  \n\n\nThere are two such possible circles (see figures below) if distance between \np\n and \nq\n is no greater than 2x\nradius\n1\n.  Imagine if you walk from \np\n to \nq\n, one of the circle will have the center on your left, the other will have the center on your right.  If the parameter \ncenterOnLeft\n is \ntrue\n, then the constructor will return the circle on the left, otherwise it will return the circle on the right.  See figure below.\n\n\n\n\nHint: To find the center \n\\(c\\)\n of the new circle, you can first find the midpoint \n\\(m\\)\n of line \n\\(pq\\)\n, the length of line \n\\(mc\\)\n, and the angle between \n\\(m\\)\n and \n\\(c\\)\n, using the \nPoint\n methods you have written.  We also know that length of \n\\(cq\\)\n is \nradius\n.  See figure below.\n\n\n\n\nThe constructor should return a \nCircle\n with \nDouble.NaN\n as the radius and (0,0) as center if the distance between \np\n and \nq\n is larger than 2x\nradius\n or is zero\n2\n.  Such \nCircle\n objects are invalid, and you may want to add a method in the \nCircle\n class to check for validity.  You can use \nDouble.isNaN\n for check if a double variable is NaN.\n\n\n3. Maximum Disc Coverage\n\n\nWe are now going to use the \nCircle\n class and \nPoint\n class to solve the maximum disc coverage problem.  In this problem, we are given a set of points on a 2D plane, and a unit disc (i.e., a circle of radius 1).  We want to place the disc so that it covers as many points as possible.  What is the maximum number of points that we can cover with the disc at any one time?   \n\n\nWe will use the following simple (non-optimal)  algorithm\n3\n.  First, some observations:\n\n\n\n\nA disc that covers the maximum number of points must pass through at least two points.\n\n\nFor every pair of points that is of no more than distance 2 away from each other, there is at most two unit discs that have their perimeter passing through the two points (you have written a constructor that helps you to find such circles).\n\n\n\n\nSo, the algorithm simply goes through every pair of points, and for each circle that passes through them, count how many points are covered by each circle.\n\n\nThe skeleton of the main class, called \nMaxDiscCover.java\n has been given to you.  This file is placed in the same directory as \nCircle.java\n and \nPoint.java\n.  \n\n\nThe skeleton code reads a set of points from the standard input, in the following format:\n\n\n\n\nThe first line is an integer, indicating the number of points \n\\(n\\)\n (\n\\(n\\)\n > 2) in the file.\n\n\nThe next \n\\(n\\)\n lines contains the \n\\(x\\)\n and \n\\(y\\)\n coordinates of \n\\(n\\)\n points, one point per line.  Each line has two doubles, separated by space.  The first double is the \n\\(x\\)\n coordinate; the second double is the \n\\(y\\)\n coordinate.\n\n\n\n\nYou can assume that the format of the input is always correct and there is always at least two points with distance less than 2 between them.\n\n\nComplete the program by implementing the maximum disc coverage algorithm above, and print the maximum number of points covered to standard output.  You can add additional methods and fields for \nPoint\n and \nCircle\n if needed.\n\n\n1\n2\nooiwt@cs2030-i:~/lab01[xxx]$ java MaxDiscCover < TESTDATA1.txt\n4\n\n\n\n\n(The output \n4\n above is a sample only -- it might not be the correct answer)\n\n\n4. What If\n\n\nSuppose now, hypothetically, we replace Point's implementation with one that represents a point with polar coordinates internally, but has exactly the same public methods and constructors.  How many lines of code in \nMaxDiscCover.java\n and \nCircle.java\n do you need to change?\n\n\nSubmission\n\n\nWhen you are ready to submit your lab, on \ncs2030-i\n, run the script\n\n1\n~cs2030/submit01\n\n\n\n\n\nwhich will copy your the three java files \nMaxDiscCover.java\n, \nPoint.java\n, and \nCircle.java\n (and nothing else) from your \n~/lab01\n directory on \ncs2030-i\n to an internal grading directory.\n\n\nYou can submit multiple times, but only the most recent submission will be graded.\n\n\n\n\n\n\n\n\n\n\nIf the distance between \np\n and \nq\n is exactly 2x\nradius\n, then the two circles are one and the same.\u00a0\n\u21a9\n\n\n\n\n\n\nA cleaner solution is to throw an exception, but you won't learn this until later in class.\u00a0\n\u21a9\n\n\n\n\n\n\nThis is a \n\\(O(n^3)\\)\n algorithm.  Faster algorithm exists.\u00a0\n\u21a9",
            "title": 1
        },
        {
            "location": "/lab1/index.html#lab-1",
            "text": "This is a warm up, ungraded, lab.    Submission deadline: 2359, Sunday, September 3, 2017.",
            "title": "Lab 1"
        },
        {
            "location": "/lab1/index.html#learning-objectives",
            "text": "After completing this lab, students should:   be more comfortable with the CS2030 laboratory environment, including knowing how to remotely access  cs2030-i , create directory, copy files, edit files, transfer files between  cs2030-i  and local computers, run a script, and other  UNIX commands  be familiar with compiling and running Java programs from the command line  be familiar with the concept of standard input and standard output, how to redirect the content of a file to standard input, and how to print to standard output  be more comfortable with basic Java syntax and semantics, specifically with  adding methods into existing classes  invoking the methods of the classes to solve problems  declaring and using arrays, primitive types, and objects  using if/else and for statements  printing to standard output  the  this  keyword      experience reading Java API documentation and find out what are the methods available, and what are the arguments and returned types.  see an example of how class  Scanner  is used  appreciate how encapsulation of class  Point  and class  Circle  allows one to reason about higher-level tasks without worrying about lower level representation  appreciate how encapsulation of the class  Points  allow one to change the internal representation without affecting how the class  Point  is used.",
            "title": "Learning Objectives"
        },
        {
            "location": "/lab1/index.html#setup",
            "text": "Login to  cs2030-i , copy the files from  ~cs2030/lab01  to your local directory under your home  ~/lab01 .  You should see three java files ( Point.java ,  Circle.java , and  MaxDiscCover.java ), and a few data files ( TESTDATA1.txt ,  TESTDATA2.txt , ...,  TESTDATA5.txt )  Read through the files above.  Although we have seen  Circles  and  Points  as examples in class, these classes are slightly different.",
            "title": "Setup"
        },
        {
            "location": "/lab1/index.html#1-augment-the-class-point",
            "text": "Augment the class  Point  with the following public methods and constructors.\nYou may find the static methods provided by  java.lang.Math  useful.",
            "title": "1. Augment the class Point"
        },
        {
            "location": "/lab1/index.html#11-constructor-for-midpoint",
            "text": "1 public   Point ( Point   p ,   Point   q )    Given two points  p  and  q , create and return the midpoint of  p  and  q .",
            "title": "1.1. Constructor for midpoint"
        },
        {
            "location": "/lab1/index.html#12-distance-between-points",
            "text": "1 public   double   distanceTo ( Point   q )     You should have written something like this from your Exercise 1.  This method returns the Euclidean distance of  this  point to the point  q .",
            "title": "1.2 Distance between points"
        },
        {
            "location": "/lab1/index.html#13-angle-between-points",
            "text": "1 public   double   angleTo ( Point   q )     This method returns the angle between the current point and point  q .  In the figure below, it returns the angle  \\(\\theta\\) .  You can compute this using the  atan2()  function.  For instance,  1\n2 Point   p   =   new   Point ( 0 ,   0 );  p . angleTo ( new   Point ( 1 ,   1 ));   \nshould return 1 0.7853981633974483  \nwhich is  \\(\\pi/4\\) . 1 p.angleTo(new Point(1, 0));  \nshould return  1 0.0",
            "title": "1.3 Angle between points"
        },
        {
            "location": "/lab1/index.html#14-move-a-point",
            "text": "1 public   void   move ( double   theta ,   double   d )    Move the point by a given distance at direction theta (in radian).  See Figure:   The new point should have the coordinate ( \\(x + d\\cos\\theta, y + d\\sin\\theta\\) ).  After 1 p.move(p.angleTo(q), p.distanceTo(q));   p  should coincide with  q .",
            "title": "1.4. Move a point"
        },
        {
            "location": "/lab1/index.html#2-augment-the-class-circle",
            "text": "Augment the class  Circle  with the following methods and constructors:",
            "title": "2. Augment the class Circle"
        },
        {
            "location": "/lab1/index.html#21-constructor",
            "text": "1 public   Circle ( Point   p ,   Point   q ,   double   radius ,   boolean   centerOnLeft )    The constructor above takes in two points  p  and  q , and returns a circle  that passes through both  p  and  q , with radius  radius .    There are two such possible circles (see figures below) if distance between  p  and  q  is no greater than 2x radius 1 .  Imagine if you walk from  p  to  q , one of the circle will have the center on your left, the other will have the center on your right.  If the parameter  centerOnLeft  is  true , then the constructor will return the circle on the left, otherwise it will return the circle on the right.  See figure below.   Hint: To find the center  \\(c\\)  of the new circle, you can first find the midpoint  \\(m\\)  of line  \\(pq\\) , the length of line  \\(mc\\) , and the angle between  \\(m\\)  and  \\(c\\) , using the  Point  methods you have written.  We also know that length of  \\(cq\\)  is  radius .  See figure below.   The constructor should return a  Circle  with  Double.NaN  as the radius and (0,0) as center if the distance between  p  and  q  is larger than 2x radius  or is zero 2 .  Such  Circle  objects are invalid, and you may want to add a method in the  Circle  class to check for validity.  You can use  Double.isNaN  for check if a double variable is NaN.",
            "title": "2.1 Constructor"
        },
        {
            "location": "/lab1/index.html#3-maximum-disc-coverage",
            "text": "We are now going to use the  Circle  class and  Point  class to solve the maximum disc coverage problem.  In this problem, we are given a set of points on a 2D plane, and a unit disc (i.e., a circle of radius 1).  We want to place the disc so that it covers as many points as possible.  What is the maximum number of points that we can cover with the disc at any one time?     We will use the following simple (non-optimal)  algorithm 3 .  First, some observations:   A disc that covers the maximum number of points must pass through at least two points.  For every pair of points that is of no more than distance 2 away from each other, there is at most two unit discs that have their perimeter passing through the two points (you have written a constructor that helps you to find such circles).   So, the algorithm simply goes through every pair of points, and for each circle that passes through them, count how many points are covered by each circle.  The skeleton of the main class, called  MaxDiscCover.java  has been given to you.  This file is placed in the same directory as  Circle.java  and  Point.java .    The skeleton code reads a set of points from the standard input, in the following format:   The first line is an integer, indicating the number of points  \\(n\\)  ( \\(n\\)  > 2) in the file.  The next  \\(n\\)  lines contains the  \\(x\\)  and  \\(y\\)  coordinates of  \\(n\\)  points, one point per line.  Each line has two doubles, separated by space.  The first double is the  \\(x\\)  coordinate; the second double is the  \\(y\\)  coordinate.   You can assume that the format of the input is always correct and there is always at least two points with distance less than 2 between them.  Complete the program by implementing the maximum disc coverage algorithm above, and print the maximum number of points covered to standard output.  You can add additional methods and fields for  Point  and  Circle  if needed.  1\n2 ooiwt@cs2030-i:~/lab01[xxx]$ java MaxDiscCover < TESTDATA1.txt\n4  \n(The output  4  above is a sample only -- it might not be the correct answer)",
            "title": "3. Maximum Disc Coverage"
        },
        {
            "location": "/lab1/index.html#4-what-if",
            "text": "Suppose now, hypothetically, we replace Point's implementation with one that represents a point with polar coordinates internally, but has exactly the same public methods and constructors.  How many lines of code in  MaxDiscCover.java  and  Circle.java  do you need to change?",
            "title": "4. What If"
        },
        {
            "location": "/lab1/index.html#submission",
            "text": "When you are ready to submit your lab, on  cs2030-i , run the script 1 ~cs2030/submit01   which will copy your the three java files  MaxDiscCover.java ,  Point.java , and  Circle.java  (and nothing else) from your  ~/lab01  directory on  cs2030-i  to an internal grading directory.  You can submit multiple times, but only the most recent submission will be graded.      If the distance between  p  and  q  is exactly 2x radius , then the two circles are one and the same.\u00a0 \u21a9    A cleaner solution is to throw an exception, but you won't learn this until later in class.\u00a0 \u21a9    This is a  \\(O(n^3)\\)  algorithm.  Faster algorithm exists.\u00a0 \u21a9",
            "title": "Submission"
        },
        {
            "location": "/jdk/index.html",
            "text": "Java: Install/Compile/Run\n\n\nJava Development Kit (JDK)\n\n\nThe Java Development Kit, or JDK, is a development environment for building Java applications.  The environment provides a virtual machine to execute compiled Java code (JVM), a collection of classes and libraries, and a set of tools to support development (including a compiler (\njavac\n), a debugger (\njdb\n), an interactive shell (\njshell\n)) etc.\n\n\nThere are several variations of JDK available.  For instance, \nOpenJDK\n is a free and open source version of JDK.  \nGNU\n offers a compiler in Java (\ngcj\n) and Java core libraries in Gnu classpath.\nEclipse offers its own version of Java compiler\n1\n.  These variations are mostly the same, but for the purpose of this module, we will use the \nofficial Oracle version\n.\n\n\nThere are different editions of Java.  The main ones are Java SE (standard edition), Java EE (enterprise edition), and Java ME (micro edition).  We will be using \nJava SE\n.\n\n\nThe latest version of Java SE is Java 8 (equivalent to version 1.8).\nThis is also the earliest version of Java that will work with this module, as many concepts we will cover are only introduced in Java 8.  \n\n\nTo use \njshell\n, however, you need Java 9, which you can \ndownload and install from here\n.\n\n\nInstalling JDK 9\n\n\nThere are multiple ways to setup JDK on various OS.  The following seems to be the simplest possible way to get started.\n\n\nOn macOS\n\n\nDownload the \n.dmg\n file corresponding to JDK 9 from \nhttp://jdk.java.net/9/\n and double click the \n.dmg\n file.  Follow instruction from there.\n\n\nFor a 6-step description of the above, see \nthe installation instruction from Oracle.\n\n\nOn Ubuntu / Linux Mint / Debian\n\n\nWe are going to use \napt\n, a package management program, in Linux to install JDK.  Run the following in your terminal:\n\n\n1\n2\n3\nsudo add-apt-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install oracle-java9-installer\n\n\n\n\n\n\nLine 1 above adds a special package repository (also known as Personal Package Archive (PPA)) to \napt\n.  Line 2 instructs \napt\n to download the list of packages available from all repositories configured.  One of this packages should be \noracle-java9-installer\n.  Line 3 installs the \noracle-java9-installer\n.  Note that this install the installer, not Java 9.  After the installer is installed, the installer is executed.  You will be asked questions about license agreements, and then the installer proceeds to download and install Java 9.\n\n\nFor a more detailed instructions, see \nthe guide from the maintainer of the PPA, webupd8.org\n.\n\n\nOn Windows 10\n\n\nFollow the \ninstructions to install Bash on Ubuntu on Windows\n, then install as per the instructions for Ubuntu above.\n\n\nOther Methods\n\n\nOracle publishes an \ninstallation guide\n for JDK 9, including installing it on native Windows (not through Ubuntu emulator).  I find it much more troublesome and complicated.  Unfortunately, if you are using an earlier version of Windows, you will have to follow these instructions.\n\n\nCompiling\n\n\nNow that you've installed Java on your machine, here's an example of how you can compile and run some Java code.\n\n\nJava source files\n\n\nCreate a new Java source file and put it in a new folder (e.g. \nCS2030\n).\n\n\n1\n2\n3\n4\n5\nclass\n \nHelloWorld\n \n{\n\n  \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n \n{\n\n    \nSystem\n.\nout\n.\nprintln\n(\n\"Hello, world!\"\n);\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nBy convention, the file should be named \nHelloWorld.java\n, following the \nUpperCamelCase\n name of the class. At this point, our \nCS2030\n folder only contains that one file.\n\n\n1\n2\nCS2030 $ ls\nHelloWorld.java\n\n\n\n\n\n\nJava class files\n\n\nWe can go ahead and compile our Java program by running the \njavac HelloWorld.java\n command. This creates the corresponding Java class file, \nHelloWorld.class\n.\n\n\n1\n2\n3\nCS2030 $ javac HelloWorld.java\nCS2030 $ ls\nHelloWorld.class HelloWorld.java\n\n\n\n\n\n\nWe can now execute it with \njava HelloWorld\n. Remember to omit the \n.class\n extension when doing this!\n\n\n1\n2\n3\nCS2030 $ javac HelloWorld.java\nCS2030 $ java HelloWorld\nHello, world!\n\n\n\n\n\n\nSuccess! \ud83c\udf89\n\n\n\n\nWhat actually happens under the hood? Is Java an interpreted or compiled language?\n\n\nThis can get a little mind-boggling at first, but this \ndiagram\n summarizes it quite well.\n\n\n\n\n\n\n\n\n\n\n\n\nSee: \nWhat is the difference between javac and the Eclipse compiler?\n\u00a0\n\u21a9",
            "title": "Java"
        },
        {
            "location": "/jdk/index.html#java-installcompilerun",
            "text": "",
            "title": "Java: Install/Compile/Run"
        },
        {
            "location": "/jdk/index.html#java-development-kit-jdk",
            "text": "The Java Development Kit, or JDK, is a development environment for building Java applications.  The environment provides a virtual machine to execute compiled Java code (JVM), a collection of classes and libraries, and a set of tools to support development (including a compiler ( javac ), a debugger ( jdb ), an interactive shell ( jshell )) etc.  There are several variations of JDK available.  For instance,  OpenJDK  is a free and open source version of JDK.   GNU  offers a compiler in Java ( gcj ) and Java core libraries in Gnu classpath.\nEclipse offers its own version of Java compiler 1 .  These variations are mostly the same, but for the purpose of this module, we will use the  official Oracle version .  There are different editions of Java.  The main ones are Java SE (standard edition), Java EE (enterprise edition), and Java ME (micro edition).  We will be using  Java SE .  The latest version of Java SE is Java 8 (equivalent to version 1.8).\nThis is also the earliest version of Java that will work with this module, as many concepts we will cover are only introduced in Java 8.    To use  jshell , however, you need Java 9, which you can  download and install from here .",
            "title": "Java Development Kit (JDK)"
        },
        {
            "location": "/jdk/index.html#installing-jdk-9",
            "text": "There are multiple ways to setup JDK on various OS.  The following seems to be the simplest possible way to get started.",
            "title": "Installing JDK 9"
        },
        {
            "location": "/jdk/index.html#on-macos",
            "text": "Download the  .dmg  file corresponding to JDK 9 from  http://jdk.java.net/9/  and double click the  .dmg  file.  Follow instruction from there.  For a 6-step description of the above, see  the installation instruction from Oracle.",
            "title": "On macOS"
        },
        {
            "location": "/jdk/index.html#on-ubuntu-linux-mint-debian",
            "text": "We are going to use  apt , a package management program, in Linux to install JDK.  Run the following in your terminal:  1\n2\n3 sudo add-apt-repository ppa:webupd8team/java\nsudo apt-get update\nsudo apt-get install oracle-java9-installer   Line 1 above adds a special package repository (also known as Personal Package Archive (PPA)) to  apt .  Line 2 instructs  apt  to download the list of packages available from all repositories configured.  One of this packages should be  oracle-java9-installer .  Line 3 installs the  oracle-java9-installer .  Note that this install the installer, not Java 9.  After the installer is installed, the installer is executed.  You will be asked questions about license agreements, and then the installer proceeds to download and install Java 9.  For a more detailed instructions, see  the guide from the maintainer of the PPA, webupd8.org .",
            "title": "On Ubuntu / Linux Mint / Debian"
        },
        {
            "location": "/jdk/index.html#on-windows-10",
            "text": "Follow the  instructions to install Bash on Ubuntu on Windows , then install as per the instructions for Ubuntu above.",
            "title": "On Windows 10"
        },
        {
            "location": "/jdk/index.html#other-methods",
            "text": "Oracle publishes an  installation guide  for JDK 9, including installing it on native Windows (not through Ubuntu emulator).  I find it much more troublesome and complicated.  Unfortunately, if you are using an earlier version of Windows, you will have to follow these instructions.",
            "title": "Other Methods"
        },
        {
            "location": "/jdk/index.html#compiling",
            "text": "Now that you've installed Java on your machine, here's an example of how you can compile and run some Java code.",
            "title": "Compiling"
        },
        {
            "location": "/jdk/index.html#java-source-files",
            "text": "Create a new Java source file and put it in a new folder (e.g.  CS2030 ).  1\n2\n3\n4\n5 class   HelloWorld   { \n   public   static   void   main ( String []   args )   { \n     System . out . println ( \"Hello, world!\" ); \n   }  }    By convention, the file should be named  HelloWorld.java , following the  UpperCamelCase  name of the class. At this point, our  CS2030  folder only contains that one file.  1\n2 CS2030 $ ls\nHelloWorld.java",
            "title": "Java source files"
        },
        {
            "location": "/jdk/index.html#java-class-files",
            "text": "We can go ahead and compile our Java program by running the  javac HelloWorld.java  command. This creates the corresponding Java class file,  HelloWorld.class .  1\n2\n3 CS2030 $ javac HelloWorld.java\nCS2030 $ ls\nHelloWorld.class HelloWorld.java   We can now execute it with  java HelloWorld . Remember to omit the  .class  extension when doing this!  1\n2\n3 CS2030 $ javac HelloWorld.java\nCS2030 $ java HelloWorld\nHello, world!   Success! \ud83c\udf89   What actually happens under the hood? Is Java an interpreted or compiled language?  This can get a little mind-boggling at first, but this  diagram  summarizes it quite well.       See:  What is the difference between javac and the Eclipse compiler? \u00a0 \u21a9",
            "title": "Java class files"
        },
        {
            "location": "/unix/index.html",
            "text": "Accessing CS2030 Lab Programming Environment\n\n\nThe Environment\n\n\nThe school has created a VM (virtual machine) for CS2030, with hostname \ncs2030-i.comp.nus.edu.sg\n.  The VM is running CentOS, one of the Linux distributions.\nThis will be the official programming environment for CS2030 for all your lab assignments.\n\n\nI have created your accounts on the VM based on your SoC UNIX account.  You can login with your SoC UNIX username (not your NUSNET username, unless you intentionally set the two to be the same) and password.\n\n\nSoC VPN\n\n\nTHe VM can only be accessed from within the School of Computing networks.  If you want to access it from outside, you need to setup a Virtual Private Network (VPN) (See \ninstruction here\n).  The staff at \nhelpdesk@comp.nus.edu.sg\n or the IT helpdesk in COM1, Level 1, will be able to help with you setting up if needed.\n\n\nSSH\n\n\nFor UNIX-based OS\n\n\nIf you use either macOS, Windows 10 (with bash on Ubuntu), or Linux, you should have the command line \nssh\n installed.  \n\n\nRun:\n\n1\nssh <username>@cs2030-i.comp.nus.edu.sg\n\n\n\n\n\nReplace \n<username>\n with your SoC UNIX username, for instance, I would do:\n\n1\nssh ooiwt@cs2030-i.comp.nus.edu.sg\n\n\n\n\n\nAfter the command above, following the instructions on screen.  The first time you ever connect to \ncs2030-i.comp.nus.edu.sg\n, you will be warned that you are connecting to a previously unknown host.  Said \nyes\n, and you will be prompted with your SoC UNIX password.\n\n\nFor Windows 7 or 8\n\n\nThe desktop computers in Programming Lab 6 (PL6) runs Windows 7.  If you are using these computers, or your own computers with older versions of Windows, you need to use \nXShell 5\n to access the VM.\n\n\nBasic UNIX Commands\n\n\nOnce you logged into the VM, you will be prompted to enter a command with a prompt that looks like this:\n\n1\nhappytan@cs2030-i:~[xxx]$\n\n\n\n\nThis interface is provided by a UNIX shell -- not unlike \njshell\n, this shell sits in a loop and wait for users to enter a command, then it interprets and executes the command.  There are many versions of shells, the default shell for our VM is \nbash\n1\n.\n\n\nThe following are adapted for CS2030 from \nthe instructions created by Aaron Tan\n. Bugs are mine.\n  \n\n\nThe power of UNIX stems from the many commands it offers. The following are a few commonly used commands. This list is by no means exhaustive and you are urged to explore on your own. Note that UNIX commands are case-sensitive.\n\n\nIn the examples below, bold words are commands which you are expected to enter. All commands are to be entered after the UNIX (local or \nsunfire\n or \ncs2030-i\n) prompt of the form\n\n\n1\nhappytan@cs2030-i:~[xxx]$\n\n\n\n\n\n\n~\n indicates that you are currently in your home directory, \nxxx\n is a number indicating the number of commands that have been entered.  The following examples assumes that user \nhappytan\n is logged into cs2030-i; however you can do it on your local UNIX platform too.\n\n\nIt might be good to understand the directory structure in UNIX, a multi-user system. The directory tree is shown below:\n\n\n\n\nEach user has his/her own home directory, which is where he/she will be automatically placed when he/she logs into the system. The above figure shows where the home directory of user \nhappytan\n resides in the directory tree. The user \nhappytan\n may create files or directories in his/her home directory, but not elsewhere unless permission is given.\n\n\nDirectory commands\n\n\n\n\n\n\npwd\n: Print current Working Directory to show you which directory you are currently in\n\n1\n2\nhappytan@cs2030-i:~[xxx]$ pwd\n/home/h/happytan\n\n\n\n\n\n\n\n\n\nls\n: LiSt files in your current directory\n\n1\n2\nhappytan@cs2030-i:~[xxx]$ ls\nhappytan@cs2030-i:~[xxx]$\n\n\n\n\n   If you do not have any regular files in your home directory, as you should when you first login, you should immediately return to the shell prompt.  \n\n\n\n\n\n\n\n\nRule of Silence\nUNIX follows the \nrule of silence\n: programs should not print unnecessary output, to allow other programs and users to easily parse the output from one program.  So, if \nls\n has nothing to list, it will list nothing (as oppose to, say, printing \"This is an empty directory.\")\n\n\n\n\n\n\n\n\n\n\nmkdir\n: MaKe a subDIRectory in current directory\n\n1\n2\n3\n4\n5\nhappytan@cs2030-i:~[xxx]$ mkdir lab01\nhappytan@cs2030-i:~[xxx]$ ls\nlab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nlab01/\n\n\n\n\nHere, you create a directory called \nlab01\n.  Now, when you \nls\n, you can see the directory listed.\nYou may also use \nls -F\n for more information (\n-F\n is one of the many \noptions\n/\nflags\n available for the \nls\n command. To see a complete list of the options, refer to the man pages, i.e., \nman ls\n.)\n\n\nThe slash \n/\n beside the filename tells you that the file is a directory (aka folder in Windows lingo). A normal file does not have a slash beside its name when \"ls -F\" is used.\n\n\nYou may also use the \nls -l\n command (hyphen el, not hyphen one) to display almost all the file information, include the size of the file and the date of modification.\n\n\n\n\n\n\n\n\nCommand history\n\n\nUNIX maintains a history of your previously executed UNIX commands, and you may use the up and down arrows to go through it. Press the up arrow until you find a previously executed UNIX command. You may then press Enter to execute it, or edit the command before executing it. This is handy when you need to repeatedly executed a long UNIX command.\n\n\n\n\n\n\n\n\ncd\n: Change Directory from current directory to another\n\n1\n2\nhappytan@cs2030-i:~[xxx]$ cd lab01\nhappytan@cs2030-i:~/lab01[xxx]$\n\n\n\n\nNote that the prompt changes to \n~/lab01\n to indicate that you are now in the \nlab01\n directory below your \nHOME\n directory.\n\n\nEntering \ncd\n alone brings you back to your \nHOME\n directory, i.e.,. the directory in which you started with when you first logged into the system.\n\n1\n2\nhappytan@cs2030-i:~/lab01[xxx]$ cd\nhappytan@cs2030-i:~[xxx]$\n\n\n\n\n\n\n\n\n\nrmdir\n:  to ReMove a subDIRectory in current directory -- note that a directory must be empty before it can be removed.\n\n1\n2\n3\n4\n5\nhappytan@cs2030-i:~[xxx]$ rmdir lab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nhappytan@cs2030-i:~[xxx]$ mkdir lab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nlab01/\n\n\n\n\n\n\n\n\n\nFile commands\n\n\n\n\n\n\ncp\n:  CoPy files\n\n1\n2\n3\nhappytan@cs2030-i:~/lab01[xxx]$ cp ~cs2030/lab01/Circle.java .\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nCircle.java\n\n\n\n\nThe command above copy the files Circle.java from the HOME of user \ncs2030\n, under directory \nlab01\n, to the current directory.\n\n\n\n\n\n\nmv\n: MoVe files from one directory to another; can also be used to rename files.\n\n1\n2\n3\nhappytan@cs2030-i:~/lab01[xxx]$ mv Circle.java Test.java\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nTest.java\n\n\n\n\n\n\n\n\n\n\n\nFilename completion\n\n\nIf you have a very long file name, you may use UNIX's filename completion feature to reduce typing. For instance, you may type:\n\n1\nhappytan@cs2030-i:~/lab01[xxx]$ mv C\n\n\n\n\nand press the tab key, and UNIX will complete the filename for you if there is only one filename with the prefix \"C\". Otherwise, it will fill up the filename up to point where you need to type in more characters for disambiguation.\n\n\n\n\n\n\nrm\n: ReMove files. Be careful with this command -- files deleted cannot be restored (unless they have been backed up during the normal backup cycle).\n\n1\n2\n3\n4\nhappytan@cs2030-i:~/lab01[xxx]$ rm Test.java\nrm: remove 'Test.java'? y\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nhappytan@cs2030-i:~/lab01[xxx]$\n\n\n\n\n\n\n\nCommand to display text files\n\n\n\n\ncat\n: to string together or display (CATenate) the contents of files onto the screen\n\n1\nhappytan@cs2030-i:~/lab01[xxx]$ cat Circle.java\n\n\n\n\n\nless\n - variant of \ncat\n (includes features to read each page leisurely)\n\n1\nhappytan@cs2030-i:~/lab01[xxx]$ less Circle.java\n\n\n\n\nIn \nless\n, use \n<space>\n to move down one page, \nb\n to move Back up one page, and \nq\n to Quit from \"less\".\n\n\n\n\nAn online help facility is available in UNIX via the \nman\n command (\nman\n stands for MANual). To look for more information about any UNIX command, for example, \nls\n, type \nman ls\n. Type \nman man\n and refer to Man Pages to find out more about the facility. To exit \nman\n, press \nq\n.\n\n\nNow that you are familiar with how the UNIX shell works, I won't show the command prompt any more in the rest of this article.\n\n\nUNIX File Permission\n\n\nIt is important to guide our files properly on a multi-user system where users share the same file system.  UNIX has a simple mechanism to for ensuring that: every file and directory has nine bits of access permission, corresponds to three access operations, read (\nr\n), write (\nw\n), and execute (\nx\n), for four classes of users, the user who owns of the file (\nu\n), users in the same group as the owner (\ng\n), all other users (\no\n), and all users (\na\n) (union of all three classes before)\n\n\nWhen you run \nls -l\n, you will see the permission encoded as strings that look like \n-rw-------\n or \ndrwx--x--x\n besides other file information.   \n\n\n\n\nThe first character indicates if the file is a directory (\nd\n) or not (\n-\n).  \n\n\nThe next three characters are the permission for the owner.  \nrwx\n means that the owner can do all three: reading, writing, and executing, \nrw-\n means that the owner can read and write, but cannot execute.\n\n\nThe next three characters are the permission for the users in the same group.\n\n\nThe last three characters are the permission for the users in the other groups.\n\n\n\n\nTo change permission, we use the \nchmod\n command.  Let's say that we want to remove the read and write permission from all other users in the group.  You can run:\n\n1\nchmod g-rw <file>\n\n\n\n\n\nwhere \n<file>\n is the name of the file whose permission you want to change.  This would change the permission from \n-rw-rw-rw-\n to \n-rw----rw-\n, or from \n-rwxr--r--\n to \n-rwx---r--\n.\n\n\nTo add executable permission to everyone, you can run:\n\n1\nchmod a+x <file>\n\n\n\n\n\nThis would change the permission from \n-rw-rw-rw-\n to \n-rwx--xrwx\n, or from \n-rwxr--r--\n to \n-rwx--xr-x\n, and so on.  You get the idea.\n\n\nAnother way to change the permission is set the permission directly, instead of adding with \n+\n and removing with \n-\n.  To do this, one convenient way is to treat the permission for each class of user as a 3-bit binary number between 0 to 7.  So, \nrwx\n is 7, \nrw-\n is 6, \n-w-\n is 2, \n---\n is 0, etc.  \n\n\nTo set the permission of a file to \n-r--r--r--\n (readable by everyone), run:\n\n1\nchmod 444 <file>\n\n\n\n\n\nTo set the permission to \n-rw-------\n, run:\n\n1\nchmod 600 <file>\n\n\n\n\n\nand so on.\n\n\nIt is important to ensure that your code is not readable and writable by other students, especially for graded lab exercises.\n\n\nSecure Copy (\nscp\n)\n\n\nSecure copy, or \nscp\n, is one way to transfer files from your local computer to \ncs2030-i\n.  If you choose not to use \nemacs\n or \nvim\n2\n and write your code on \ncs2030-i\n, you can write your code on your local computer, and transfer them.  Let's say that you are in the directory with a bunch of java files you want to transfer, and you want them transferred into directory \ntest\n that you have created, do the following:\n\n\n1\nscp *.java happytan@cs2030-i:~/test\n\n\n\n\n\n\n\n\nWarning\n\n\nIf you have files with the same name in the remote directory, the files will be overwritten without warning.  I have lost my code a few times due to \nscp\n.  \n\n\n\n\nThe expression \n*.java\n is a regular expression that means all files with filename ending with \n.java\n.  You can copy specific files as well.  For instance,\n\n\n1\nscp Circle.java Point.java happytan@cs2030-i:~/test\n\n\n\n\n\n\nSetting up SSH Keys\n\n\nOnce you are comfortable with UNIX, you can set up a pair of public/private keys for authentication.  \n\n\nYou can use\n\n1\nssh-keygen -t rsa\n\n\n\n\n\nto generate a pair of keys on your local computer.  Keep the private key \nid_rsa\n on your local machine in the hidden \n~/.ssh\n directory, and copy the public key \nid_rsa.pub\n to your home directory on VM \ncs2030-i\n.  On \ncs2030-i\n, run\n\n1\ncat id_rsa.pub >> ~/.ssh/authorized_keys\n\n\n\n\n\nMake sure that the permission for \n.ssh\n both on local machine and on VM is set to \n700\n and the files \nid_rsa\n on local machine and \nauthorized_keys\n on remote machine is set to \n600\n.  Once setup, you need not enter your password every time you run \nssh\n or \nscp\n.  \n\n\n\n\n\n\n\n\n\n\nI run \nfish\n on my macOS, as you might have noticed during the in-class demos.  You can use any shell you like, if you know what you are doing.  Otherwise, \nbash\n is a popular one.\u00a0\n\u21a9\n\n\n\n\n\n\nMy personal opinion is that, you should really master one of these two time-tested source code editor if you want a career in software development.\u00a0\n\u21a9",
            "title": "UNIX"
        },
        {
            "location": "/unix/index.html#accessing-cs2030-lab-programming-environment",
            "text": "",
            "title": "Accessing CS2030 Lab Programming Environment"
        },
        {
            "location": "/unix/index.html#the-environment",
            "text": "The school has created a VM (virtual machine) for CS2030, with hostname  cs2030-i.comp.nus.edu.sg .  The VM is running CentOS, one of the Linux distributions.\nThis will be the official programming environment for CS2030 for all your lab assignments.  I have created your accounts on the VM based on your SoC UNIX account.  You can login with your SoC UNIX username (not your NUSNET username, unless you intentionally set the two to be the same) and password.",
            "title": "The Environment"
        },
        {
            "location": "/unix/index.html#soc-vpn",
            "text": "THe VM can only be accessed from within the School of Computing networks.  If you want to access it from outside, you need to setup a Virtual Private Network (VPN) (See  instruction here ).  The staff at  helpdesk@comp.nus.edu.sg  or the IT helpdesk in COM1, Level 1, will be able to help with you setting up if needed.",
            "title": "SoC VPN"
        },
        {
            "location": "/unix/index.html#ssh",
            "text": "",
            "title": "SSH"
        },
        {
            "location": "/unix/index.html#for-unix-based-os",
            "text": "If you use either macOS, Windows 10 (with bash on Ubuntu), or Linux, you should have the command line  ssh  installed.    Run: 1 ssh <username>@cs2030-i.comp.nus.edu.sg   Replace  <username>  with your SoC UNIX username, for instance, I would do: 1 ssh ooiwt@cs2030-i.comp.nus.edu.sg   After the command above, following the instructions on screen.  The first time you ever connect to  cs2030-i.comp.nus.edu.sg , you will be warned that you are connecting to a previously unknown host.  Said  yes , and you will be prompted with your SoC UNIX password.",
            "title": "For UNIX-based OS"
        },
        {
            "location": "/unix/index.html#for-windows-7-or-8",
            "text": "The desktop computers in Programming Lab 6 (PL6) runs Windows 7.  If you are using these computers, or your own computers with older versions of Windows, you need to use  XShell 5  to access the VM.",
            "title": "For Windows 7 or 8"
        },
        {
            "location": "/unix/index.html#basic-unix-commands",
            "text": "Once you logged into the VM, you will be prompted to enter a command with a prompt that looks like this: 1 happytan@cs2030-i:~[xxx]$  \nThis interface is provided by a UNIX shell -- not unlike  jshell , this shell sits in a loop and wait for users to enter a command, then it interprets and executes the command.  There are many versions of shells, the default shell for our VM is  bash 1 .  The following are adapted for CS2030 from  the instructions created by Aaron Tan . Bugs are mine.     The power of UNIX stems from the many commands it offers. The following are a few commonly used commands. This list is by no means exhaustive and you are urged to explore on your own. Note that UNIX commands are case-sensitive.  In the examples below, bold words are commands which you are expected to enter. All commands are to be entered after the UNIX (local or  sunfire  or  cs2030-i ) prompt of the form  1 happytan@cs2030-i:~[xxx]$   ~  indicates that you are currently in your home directory,  xxx  is a number indicating the number of commands that have been entered.  The following examples assumes that user  happytan  is logged into cs2030-i; however you can do it on your local UNIX platform too.  It might be good to understand the directory structure in UNIX, a multi-user system. The directory tree is shown below:   Each user has his/her own home directory, which is where he/she will be automatically placed when he/she logs into the system. The above figure shows where the home directory of user  happytan  resides in the directory tree. The user  happytan  may create files or directories in his/her home directory, but not elsewhere unless permission is given.",
            "title": "Basic UNIX Commands"
        },
        {
            "location": "/unix/index.html#directory-commands",
            "text": "pwd : Print current Working Directory to show you which directory you are currently in 1\n2 happytan@cs2030-i:~[xxx]$ pwd\n/home/h/happytan     ls : LiSt files in your current directory 1\n2 happytan@cs2030-i:~[xxx]$ ls\nhappytan@cs2030-i:~[xxx]$  \n   If you do not have any regular files in your home directory, as you should when you first login, you should immediately return to the shell prompt.       Rule of Silence UNIX follows the  rule of silence : programs should not print unnecessary output, to allow other programs and users to easily parse the output from one program.  So, if  ls  has nothing to list, it will list nothing (as oppose to, say, printing \"This is an empty directory.\")      mkdir : MaKe a subDIRectory in current directory 1\n2\n3\n4\n5 happytan@cs2030-i:~[xxx]$ mkdir lab01\nhappytan@cs2030-i:~[xxx]$ ls\nlab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nlab01/  \nHere, you create a directory called  lab01 .  Now, when you  ls , you can see the directory listed.\nYou may also use  ls -F  for more information ( -F  is one of the many  options / flags  available for the  ls  command. To see a complete list of the options, refer to the man pages, i.e.,  man ls .)  The slash  /  beside the filename tells you that the file is a directory (aka folder in Windows lingo). A normal file does not have a slash beside its name when \"ls -F\" is used.  You may also use the  ls -l  command (hyphen el, not hyphen one) to display almost all the file information, include the size of the file and the date of modification.     Command history  UNIX maintains a history of your previously executed UNIX commands, and you may use the up and down arrows to go through it. Press the up arrow until you find a previously executed UNIX command. You may then press Enter to execute it, or edit the command before executing it. This is handy when you need to repeatedly executed a long UNIX command.     cd : Change Directory from current directory to another 1\n2 happytan@cs2030-i:~[xxx]$ cd lab01\nhappytan@cs2030-i:~/lab01[xxx]$  \nNote that the prompt changes to  ~/lab01  to indicate that you are now in the  lab01  directory below your  HOME  directory.  Entering  cd  alone brings you back to your  HOME  directory, i.e.,. the directory in which you started with when you first logged into the system. 1\n2 happytan@cs2030-i:~/lab01[xxx]$ cd\nhappytan@cs2030-i:~[xxx]$     rmdir :  to ReMove a subDIRectory in current directory -- note that a directory must be empty before it can be removed. 1\n2\n3\n4\n5 happytan@cs2030-i:~[xxx]$ rmdir lab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nhappytan@cs2030-i:~[xxx]$ mkdir lab01\nhappytan@cs2030-i:~[xxx]$ ls -F\nlab01/",
            "title": "Directory commands"
        },
        {
            "location": "/unix/index.html#file-commands",
            "text": "cp :  CoPy files 1\n2\n3 happytan@cs2030-i:~/lab01[xxx]$ cp ~cs2030/lab01/Circle.java .\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nCircle.java  \nThe command above copy the files Circle.java from the HOME of user  cs2030 , under directory  lab01 , to the current directory.    mv : MoVe files from one directory to another; can also be used to rename files. 1\n2\n3 happytan@cs2030-i:~/lab01[xxx]$ mv Circle.java Test.java\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nTest.java      Filename completion  If you have a very long file name, you may use UNIX's filename completion feature to reduce typing. For instance, you may type: 1 happytan@cs2030-i:~/lab01[xxx]$ mv C  \nand press the tab key, and UNIX will complete the filename for you if there is only one filename with the prefix \"C\". Otherwise, it will fill up the filename up to point where you need to type in more characters for disambiguation.    rm : ReMove files. Be careful with this command -- files deleted cannot be restored (unless they have been backed up during the normal backup cycle). 1\n2\n3\n4 happytan@cs2030-i:~/lab01[xxx]$ rm Test.java\nrm: remove 'Test.java'? y\nhappytan@cs2030-i:~/lab01[xxx]$ ls\nhappytan@cs2030-i:~/lab01[xxx]$",
            "title": "File commands"
        },
        {
            "location": "/unix/index.html#command-to-display-text-files",
            "text": "cat : to string together or display (CATenate) the contents of files onto the screen 1 happytan@cs2030-i:~/lab01[xxx]$ cat Circle.java   less  - variant of  cat  (includes features to read each page leisurely) 1 happytan@cs2030-i:~/lab01[xxx]$ less Circle.java  \nIn  less , use  <space>  to move down one page,  b  to move Back up one page, and  q  to Quit from \"less\".   An online help facility is available in UNIX via the  man  command ( man  stands for MANual). To look for more information about any UNIX command, for example,  ls , type  man ls . Type  man man  and refer to Man Pages to find out more about the facility. To exit  man , press  q .  Now that you are familiar with how the UNIX shell works, I won't show the command prompt any more in the rest of this article.",
            "title": "Command to display text files"
        },
        {
            "location": "/unix/index.html#unix-file-permission",
            "text": "It is important to guide our files properly on a multi-user system where users share the same file system.  UNIX has a simple mechanism to for ensuring that: every file and directory has nine bits of access permission, corresponds to three access operations, read ( r ), write ( w ), and execute ( x ), for four classes of users, the user who owns of the file ( u ), users in the same group as the owner ( g ), all other users ( o ), and all users ( a ) (union of all three classes before)  When you run  ls -l , you will see the permission encoded as strings that look like  -rw-------  or  drwx--x--x  besides other file information.      The first character indicates if the file is a directory ( d ) or not ( - ).    The next three characters are the permission for the owner.   rwx  means that the owner can do all three: reading, writing, and executing,  rw-  means that the owner can read and write, but cannot execute.  The next three characters are the permission for the users in the same group.  The last three characters are the permission for the users in the other groups.   To change permission, we use the  chmod  command.  Let's say that we want to remove the read and write permission from all other users in the group.  You can run: 1 chmod g-rw <file>   where  <file>  is the name of the file whose permission you want to change.  This would change the permission from  -rw-rw-rw-  to  -rw----rw- , or from  -rwxr--r--  to  -rwx---r-- .  To add executable permission to everyone, you can run: 1 chmod a+x <file>   This would change the permission from  -rw-rw-rw-  to  -rwx--xrwx , or from  -rwxr--r--  to  -rwx--xr-x , and so on.  You get the idea.  Another way to change the permission is set the permission directly, instead of adding with  +  and removing with  - .  To do this, one convenient way is to treat the permission for each class of user as a 3-bit binary number between 0 to 7.  So,  rwx  is 7,  rw-  is 6,  -w-  is 2,  ---  is 0, etc.    To set the permission of a file to  -r--r--r--  (readable by everyone), run: 1 chmod 444 <file>   To set the permission to  -rw------- , run: 1 chmod 600 <file>   and so on.  It is important to ensure that your code is not readable and writable by other students, especially for graded lab exercises.",
            "title": "UNIX File Permission"
        },
        {
            "location": "/unix/index.html#secure-copy-scp",
            "text": "Secure copy, or  scp , is one way to transfer files from your local computer to  cs2030-i .  If you choose not to use  emacs  or  vim 2  and write your code on  cs2030-i , you can write your code on your local computer, and transfer them.  Let's say that you are in the directory with a bunch of java files you want to transfer, and you want them transferred into directory  test  that you have created, do the following:  1 scp *.java happytan@cs2030-i:~/test    Warning  If you have files with the same name in the remote directory, the files will be overwritten without warning.  I have lost my code a few times due to  scp .     The expression  *.java  is a regular expression that means all files with filename ending with  .java .  You can copy specific files as well.  For instance,  1 scp Circle.java Point.java happytan@cs2030-i:~/test",
            "title": "Secure Copy (scp)"
        },
        {
            "location": "/unix/index.html#setting-up-ssh-keys",
            "text": "Once you are comfortable with UNIX, you can set up a pair of public/private keys for authentication.    You can use 1 ssh-keygen -t rsa   to generate a pair of keys on your local computer.  Keep the private key  id_rsa  on your local machine in the hidden  ~/.ssh  directory, and copy the public key  id_rsa.pub  to your home directory on VM  cs2030-i .  On  cs2030-i , run 1 cat id_rsa.pub >> ~/.ssh/authorized_keys   Make sure that the permission for  .ssh  both on local machine and on VM is set to  700  and the files  id_rsa  on local machine and  authorized_keys  on remote machine is set to  600 .  Once setup, you need not enter your password every time you run  ssh  or  scp .        I run  fish  on my macOS, as you might have noticed during the in-class demos.  You can use any shell you like, if you know what you are doing.  Otherwise,  bash  is a popular one.\u00a0 \u21a9    My personal opinion is that, you should really master one of these two time-tested source code editor if you want a career in software development.\u00a0 \u21a9",
            "title": "Setting up SSH Keys"
        }
    ]
}