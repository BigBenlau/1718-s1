{
    "docs": [
        {
            "location": "/index.html",
            "text": "CS2030 Programming Methodologies II\n\n\n11 August, 2017\n\n\nMany of you are starting a new and exciting journey at NUS.  Congratulations, and welcome to NUS Computing!\n\n\nYou are looking at the main website for CS2030.  This is where you will get all of your module information (labs, lecture notes, etc).  \n\n\nThere are two other websites that we will use regularly over the course of the semester:\n\n\n\n\nPiazza\n, which we will use for Q&A, and\n\n\nIVLE\n, which we will use for \ngrade dissemination\n, \nclass roster\n, etc.\n\n\n\n\nHere are some things that you can read on this site, before the first class:\n\n\n\n\nAssumed prior knowledge\n: What we expect you to know before the class, from CS1010 or its equivalent;\n\n\nSome readings for 1\nst\n year students\n: Useful for senior students as well;\n\n\nAnd, if you feel up for it, \nthe notes for Lecture 1\n\n\n\n\nAlready have a question?  Ask us over at \nPiazza\n!",
            "title": "Home"
        },
        {
            "location": "/index.html#cs2030-programming-methodologies-ii",
            "text": "",
            "title": "CS2030 Programming Methodologies II"
        },
        {
            "location": "/index.html#11-august-2017",
            "text": "Many of you are starting a new and exciting journey at NUS.  Congratulations, and welcome to NUS Computing!  You are looking at the main website for CS2030.  This is where you will get all of your module information (labs, lecture notes, etc).    There are two other websites that we will use regularly over the course of the semester:   Piazza , which we will use for Q&A, and  IVLE , which we will use for  grade dissemination ,  class roster , etc.   Here are some things that you can read on this site, before the first class:   Assumed prior knowledge : What we expect you to know before the class, from CS1010 or its equivalent;  Some readings for 1 st  year students : Useful for senior students as well;  And, if you feel up for it,  the notes for Lecture 1   Already have a question?  Ask us over at  Piazza !",
            "title": "11 August, 2017"
        },
        {
            "location": "/about/index.html",
            "text": "CS2030 Programming Methodology II\n\n\nAbout\n\n\nThis module is a follow up to CS1010.  It explores two modern programming paradigms, object-oriented programming and functional programming.  Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using object-oriented design principles and advanced programming constructs available in the two paradigms.  Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.  \n\n\nWho/When/Where\n\n\n\n\nLecture:\n 10am - 12noon, every Monday\n\n\nVenue:\n LT19\n\n\nInstructor:\n \nOoi Wei Tsang\n\n\nTeaching Assistant:\n Kenneth Lu\n\n\nLab:\n Every Thursday (Week 3 - Week 13)\n\n\nMidterm Test:\n October 2, 2017, Monday, 10am\n\n\nFinal Assessment:\n November 29, 2017, Wednesday, 9am.\n\n\n\n\nWorkload\n\n\nBesides the 4-hour contact time for lecture and lab, students are expected to spend about 6 hours on average weekly on homework and on preparing the class.\n\n\nHistory\n\n\nCS2030 is a new module, required for all students in Bachelor of Computing (Computer Science) and Second Major in Computer Science students, cohort 17/18 onwards.  In 2017, the Department of Computer Science reorganized the two module series on data structures and algorithms (CS1020, CS2010) into (CS2030, CS2040).  CS2040 focuses on data structures and algorithms, while the advanced programming methodologies from CS1020 are moved into CS2030.  CS2030 will also covers some basics OO design that previously were covered in CS2103, and introduces students to functional programming, concurrent programming, event-based programming, and other paradigms that are increasingly important.\n\n\nLearning Outcomes\n\n\nAfter completing the module, students should:\n\n\n\n\nbe confident in reading and developing medium-scale programs (up to 10K lines of code)\n\n\nbe familiarize enough with common OO concepts to understand software code written in common OO language and understand documentation of software libraries in OO\n\n\nbe able to apply OO concepts to design and implement medium to large scale  programs, including\n\n\ndesign and implement a class\n\n\ndecompose a problem solution into classes and define members and methods for each class\n\n\nuse polymorphism effectively\n\n\nuse inheritance to design simple class hierarchies that allow code reuse\n\n\ntrace the control flow of a programs that use dynamic dispatch\n\n\nuse encapsulation mechanisms such as interfaces, private methods/members\n\n\n\n\n\n\nbe familiarize enough with common functional programming concepts and constructs, including lambda expression, effect-free programming, first class functions, infinite streams.\n\n\nbe able to apply functional programming concepts to design and implement , including:\n\n\nImplement basic algorithms in functions that are effect free.\n\n\nImplement useful functions that take/return another function\n\n\nWrite correct and effective code using lambda expressions and/or infinite streams\n\n\n\n\n\n\nbe able to compare and contrast imperative programming, OO programming, and function programming paradigms, and select the most natural paradigms for each situation\n\n\nbe aware of how the OOP and FP concepts are implemented in different ways in different programming languages\n\n\nbe confident enough to learn new programming languages that uses OOP and FP paradigm\n\n\nattain proficiency in Java 8 (and above)\n\n\nbe equipped with solid programming foundations for further studies in computer science\n\n\n\n\nTextbook\n\n\nThere is no textbook for this class.\n\n\nThere are many good books and online articles written about the topics covered in the module.  These will be listed under the \nReadings\n section.",
            "title": "About"
        },
        {
            "location": "/about/index.html#cs2030-programming-methodology-ii",
            "text": "",
            "title": "CS2030 Programming Methodology II"
        },
        {
            "location": "/about/index.html#about",
            "text": "This module is a follow up to CS1010.  It explores two modern programming paradigms, object-oriented programming and functional programming.  Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using object-oriented design principles and advanced programming constructs available in the two paradigms.  Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.",
            "title": "About"
        },
        {
            "location": "/about/index.html#whowhenwhere",
            "text": "Lecture:  10am - 12noon, every Monday  Venue:  LT19  Instructor:   Ooi Wei Tsang  Teaching Assistant:  Kenneth Lu  Lab:  Every Thursday (Week 3 - Week 13)  Midterm Test:  October 2, 2017, Monday, 10am  Final Assessment:  November 29, 2017, Wednesday, 9am.",
            "title": "Who/When/Where"
        },
        {
            "location": "/about/index.html#workload",
            "text": "Besides the 4-hour contact time for lecture and lab, students are expected to spend about 6 hours on average weekly on homework and on preparing the class.",
            "title": "Workload"
        },
        {
            "location": "/about/index.html#history",
            "text": "CS2030 is a new module, required for all students in Bachelor of Computing (Computer Science) and Second Major in Computer Science students, cohort 17/18 onwards.  In 2017, the Department of Computer Science reorganized the two module series on data structures and algorithms (CS1020, CS2010) into (CS2030, CS2040).  CS2040 focuses on data structures and algorithms, while the advanced programming methodologies from CS1020 are moved into CS2030.  CS2030 will also covers some basics OO design that previously were covered in CS2103, and introduces students to functional programming, concurrent programming, event-based programming, and other paradigms that are increasingly important.",
            "title": "History"
        },
        {
            "location": "/about/index.html#learning-outcomes",
            "text": "After completing the module, students should:   be confident in reading and developing medium-scale programs (up to 10K lines of code)  be familiarize enough with common OO concepts to understand software code written in common OO language and understand documentation of software libraries in OO  be able to apply OO concepts to design and implement medium to large scale  programs, including  design and implement a class  decompose a problem solution into classes and define members and methods for each class  use polymorphism effectively  use inheritance to design simple class hierarchies that allow code reuse  trace the control flow of a programs that use dynamic dispatch  use encapsulation mechanisms such as interfaces, private methods/members    be familiarize enough with common functional programming concepts and constructs, including lambda expression, effect-free programming, first class functions, infinite streams.  be able to apply functional programming concepts to design and implement , including:  Implement basic algorithms in functions that are effect free.  Implement useful functions that take/return another function  Write correct and effective code using lambda expressions and/or infinite streams    be able to compare and contrast imperative programming, OO programming, and function programming paradigms, and select the most natural paradigms for each situation  be aware of how the OOP and FP concepts are implemented in different ways in different programming languages  be confident enough to learn new programming languages that uses OOP and FP paradigm  attain proficiency in Java 8 (and above)  be equipped with solid programming foundations for further studies in computer science",
            "title": "Learning Outcomes"
        },
        {
            "location": "/about/index.html#textbook",
            "text": "There is no textbook for this class.  There are many good books and online articles written about the topics covered in the module.  These will be listed under the  Readings  section.",
            "title": "Textbook"
        },
        {
            "location": "/prereqs/index.html",
            "text": "Assumed Prior Knowledge\n\n\nCS2030 has the prerequisite of CS1010 or its equivalent.  There are, however, several versions of CS1010, and some students are waived from doing CS1010 due to prior programming knowledge.  This document here outlines the prior knowledge that the instructors assume the students have before entering CS2030.\n\n\nBasic computational problem solving and programming skills\n\n\nHere are some learning outcomes that students should attained after taking CS1010.  Students should be familiar with:\n\n\n\n\nthe computational thinking process of formulating a problem and coming up with a solution,\n\n\nfundamental programming concepts, including variables, assignments, conditions, branches, loops, expressions, functions, recursions, and structures\n\n\nhow to program a given solution in a programming language\n\n\ndifferent classes of programming errors (logical errors, syntax errors, run-time errors)\n\n\ncommon debugging techniques and strategies\n\n\ngood programming practices (comments, naming convention, indentation, modular code)\n\n\nsimple data structures (e.g., arrays)\n\n\nwriting test cases to check correctness of own program\n\n\nhow a program is executed and represented in a computing device (at a high level)\n\n\nthe compilation process (at a high level)\n\n\nthe concept of reusability and the use of standard/3\nrd\n party software\n\n\nbubble sort, insertion sort, linear search, and binary search\n\n\n\n\nStudents who take CS2030 are assumed to have sufficient knowledge of the above.  If there are specific components that you are not familiar with, please pick up the notes from CS1010 and self-learn.\n\n\nUNIX command line\n\n\nWe will use the \nsunfire\n computing server for this module.  As such, you are expected to be comfortable with using CLI (command line interface) and the basic UNIX commands, in a text window without fancy windows and mouse, and the concept of \nssh\n-ing into a remote host and work remotely.\n\n\nIf you are not familiar with this concept, take a look at the \nslides from the CS1010/CS1020 workshop\n.\n\n\nSource code editors\n\n\nYou are expected to be familiar with one or more source code editors.  Note that source code editor is not the same as text editor (e.g., Notepad).  A source code editor automatically highlights syntax, indents the code, matches parenthesis, supports autocompletion and code folding, and integrates with the software development process (such as revision control).\n\n\nCS1010 started (or would have started) you off with \nvim\n.  Many good source code editors exists, such as \nAtom\n, \nVS Code\n, and of course \nemacs\n1\n!\n\n\nFor your career, you should pick one and master it.  If you want to learn \nvim\n, the command \nvimtutor\n is a good place to start.  There are also many tutorials, webcasts, games, etc, online to help you learn \nvim\n.  Just google.\n\n\nDeveloper's Friendly OS\n\n\nYour life through the computing modules would be much much better if you are using a developer's friendly operating system on your personal computer.  \n\n\n\n\n\n\nIf you uses Linux or macOS, you are all set.  For macOS users, \nbrew\n is highly recommended.\n\n\n\n\n\n\nIf you use Windows 10, you should definitely install Ubuntu emulator on Windows 10.  There are many excellent tutorials online (such as \nthis one by Owen Williams\n).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI can't mention \nvim\n without mentioning \nemacs\n\u00a0\n\u21a9",
            "title": "Prerequisites"
        },
        {
            "location": "/prereqs/index.html#assumed-prior-knowledge",
            "text": "CS2030 has the prerequisite of CS1010 or its equivalent.  There are, however, several versions of CS1010, and some students are waived from doing CS1010 due to prior programming knowledge.  This document here outlines the prior knowledge that the instructors assume the students have before entering CS2030.",
            "title": "Assumed Prior Knowledge"
        },
        {
            "location": "/prereqs/index.html#basic-computational-problem-solving-and-programming-skills",
            "text": "Here are some learning outcomes that students should attained after taking CS1010.  Students should be familiar with:   the computational thinking process of formulating a problem and coming up with a solution,  fundamental programming concepts, including variables, assignments, conditions, branches, loops, expressions, functions, recursions, and structures  how to program a given solution in a programming language  different classes of programming errors (logical errors, syntax errors, run-time errors)  common debugging techniques and strategies  good programming practices (comments, naming convention, indentation, modular code)  simple data structures (e.g., arrays)  writing test cases to check correctness of own program  how a program is executed and represented in a computing device (at a high level)  the compilation process (at a high level)  the concept of reusability and the use of standard/3 rd  party software  bubble sort, insertion sort, linear search, and binary search   Students who take CS2030 are assumed to have sufficient knowledge of the above.  If there are specific components that you are not familiar with, please pick up the notes from CS1010 and self-learn.",
            "title": "Basic computational problem solving and programming skills"
        },
        {
            "location": "/prereqs/index.html#unix-command-line",
            "text": "We will use the  sunfire  computing server for this module.  As such, you are expected to be comfortable with using CLI (command line interface) and the basic UNIX commands, in a text window without fancy windows and mouse, and the concept of  ssh -ing into a remote host and work remotely.  If you are not familiar with this concept, take a look at the  slides from the CS1010/CS1020 workshop .",
            "title": "UNIX command line"
        },
        {
            "location": "/prereqs/index.html#source-code-editors",
            "text": "You are expected to be familiar with one or more source code editors.  Note that source code editor is not the same as text editor (e.g., Notepad).  A source code editor automatically highlights syntax, indents the code, matches parenthesis, supports autocompletion and code folding, and integrates with the software development process (such as revision control).  CS1010 started (or would have started) you off with  vim .  Many good source code editors exists, such as  Atom ,  VS Code , and of course  emacs 1 !  For your career, you should pick one and master it.  If you want to learn  vim , the command  vimtutor  is a good place to start.  There are also many tutorials, webcasts, games, etc, online to help you learn  vim .  Just google.",
            "title": "Source code editors"
        },
        {
            "location": "/prereqs/index.html#developers-friendly-os",
            "text": "Your life through the computing modules would be much much better if you are using a developer's friendly operating system on your personal computer.      If you uses Linux or macOS, you are all set.  For macOS users,  brew  is highly recommended.    If you use Windows 10, you should definitely install Ubuntu emulator on Windows 10.  There are many excellent tutorials online (such as  this one by Owen Williams ).        I can't mention  vim  without mentioning  emacs \u00a0 \u21a9",
            "title": "Developer's Friendly OS"
        },
        {
            "location": "/readings/index.html",
            "text": "Readings\n\n\nHere is a collection of readings related to CS2030 or otherwise.\n\n\nFor 1\nst\n Year Students\n\n\n\n\n\n\nNotes to Computer Science Freshmen, From the Future\n: \nEarly into the AY12/13 academic year, Prof Tay Yong Chiang organized a supper for Computer Science freshmen at Tembusu College. The bunch of seniors who were gathered there put together a document for NUS computing freshmen. This is that document.\n\n\n\n\n\n\nHow Not to Go About a Programming Assignment, by Agustin Cernuda del Rio\n: \nComputer programming students invariably fall into more than one bad habit. It can be extremely difficult to eradicate them (and many lecturers and professional programmers keep succumbing to them time and again)..\n\n\n\n\n\n\nBest Teacher I Ever Had, by David Owen\n: \nMr. Whitson taught sixth-grade science. On the first day of class, he gave us a lecture about a creature called the cattywampus, ..\n\n\n\n\n\n\nAcademic Honesty\n: \nAll students share the responsibility for upholding the academic standards and reputation of the University. Academic honesty is a prerequisite condition in the pursuit and acquisition of knowledge..",
            "title": "Readings"
        },
        {
            "location": "/readings/index.html#readings",
            "text": "Here is a collection of readings related to CS2030 or otherwise.",
            "title": "Readings"
        },
        {
            "location": "/readings/index.html#for-1st-year-students",
            "text": "Notes to Computer Science Freshmen, From the Future :  Early into the AY12/13 academic year, Prof Tay Yong Chiang organized a supper for Computer Science freshmen at Tembusu College. The bunch of seniors who were gathered there put together a document for NUS computing freshmen. This is that document.    How Not to Go About a Programming Assignment, by Agustin Cernuda del Rio :  Computer programming students invariably fall into more than one bad habit. It can be extremely difficult to eradicate them (and many lecturers and professional programmers keep succumbing to them time and again)..    Best Teacher I Ever Had, by David Owen :  Mr. Whitson taught sixth-grade science. On the first day of class, he gave us a lecture about a creature called the cattywampus, ..    Academic Honesty :  All students share the responsibility for upholding the academic standards and reputation of the University. Academic honesty is a prerequisite condition in the pursuit and acquisition of knowledge..",
            "title": "For 1st Year Students"
        },
        {
            "location": "/policies/index.html",
            "text": "Policies\n\n\nEmail Communication\n\n\n\n\n\n\nPlease use only your official NUS email for communication with the teaching staffs -- either the one with \n@u.nus.edu\n or \n@comp.nus.edu.sg\n.  \n\n\n\n\n\n\nPlease use email only for private matters.  Prefix your email subject with \n[CS2030]\n.\n\n\n\n\n\n\nPlease use \nPiazza\n for other matters related to the module.  If you email us privately and we feel that your questions/answers are useful to the rest of the class, we will publish it on Piazza, with anonymization when appropriate.\n\n\n\n\n\n\nLab Sessions\n\n\n\n\n\n\nWe do take attendance during the lab sessions, but it does not affect your grades if you do not attend the lab sessions as long as you still need to submit the graded lab exercises.  \n\n\n\n\n\n\nYou should stick to your allocated time slot for labs.  If there is a strong reason for your to attend another lab session, please inform your lab instructors.\n\n\n\n\n\n\nLate Submissions\n\n\n\n\n\n\nAll graded exercise must be submitted on time.  If you need an extension, please ask for one and provide a justification for approval.  \n\n\n\n\n\n\nFor late submission, there is a 1% penalty (of the assessment grade) for every minute after the deadline, capped at 80%.  For example, if a homework is deserved 40 marks, and it is submitted 20 minutes after the deadline, the student will get 32 marks instead (20% penalty).  If it is submitted 2 hours after the deadline, the student will get 8 marks (as it has hit the cap of 80% penalty).\n\n\n\n\n\n\nDiscussions and Plagiarism\n\n\n\n\n\n\nWe encourage discussions among students for lab assignments, but each student should be responsible for writing his/her own code and should give credits to others when appropriate.  \n\n\n\n\n\n\nNUS and School of Computing have a high standard on academic honesty and take any violation seriously.  In the context of computing modules, source code plagiarism -- copying code from another source and attributing it as one's own code -- is a series violation.   Please read the page \nPreventing Plagiarism\n from the school's website to familiarize yourself with the policy.\n\n\n\n\n\n\nI adopt a \"no mercy\" policy when it comes to disciplinary action on plagiarism.  Both parties, the student who copied, and the student who allowed others to copy, will be penalized equally.\n\n\n\n\n\n\nLecture Video\n\n\n\n\n\n\nScreencast will be recorded and posted online 2-3 days after the lecture. \nThis will be done on a 'best effort' basis and screencast will not be guaranteed to be available.  \n\n\n\n\n\n\nPosting of screencast is meant to help students who attended the lecture to recap the content, or to help those who are not able to attend the lecture due to unexpected circumstances.  It does not mean that you should skip lecture.\n\n\n\n\n\n\nModel Solutions and Slides\n\n\n\n\n\n\nSlides will be posted \nafter\n the class.  Note that slides are used as a \nvisual aid\n to assist me during lecture.  It is not meant as summary of lectures nor a replacement of lecture notes.\n\n\n\n\n\n\nIn a module like CS2030, there is often not a single correct answer.  Hence, there is no model solution for this module.  Sample solutions may be posted (both good and bad ones) for discussion.  I strongly encourage students to discuss your solution with me, instead of just comparing your solution with the sample solution.\n\n\n\n\n\n\nGrading\n\n\n\n\nStudents will received the grades they deserved irrespective of how the other students in the class performed (i.e., no bell curve)\n\n\n\n\nOpen Book Assessment\n\n\n\n\n\n\nAll assessment, including graded labs, midterm test, and final assessment, are open book assessment -- you can bring in your notes or other \nanalog\n reference materials.  Java documentation will be made available during labs.  Relevant Java APIs will be provided during midterm tests and final assessments.\n\n\n\n\n\n\nThere is \nnothing to memorize\n for this class.",
            "title": "Policies"
        },
        {
            "location": "/policies/index.html#policies",
            "text": "",
            "title": "Policies"
        },
        {
            "location": "/policies/index.html#email-communication",
            "text": "Please use only your official NUS email for communication with the teaching staffs -- either the one with  @u.nus.edu  or  @comp.nus.edu.sg .      Please use email only for private matters.  Prefix your email subject with  [CS2030] .    Please use  Piazza  for other matters related to the module.  If you email us privately and we feel that your questions/answers are useful to the rest of the class, we will publish it on Piazza, with anonymization when appropriate.",
            "title": "Email Communication"
        },
        {
            "location": "/policies/index.html#lab-sessions",
            "text": "We do take attendance during the lab sessions, but it does not affect your grades if you do not attend the lab sessions as long as you still need to submit the graded lab exercises.      You should stick to your allocated time slot for labs.  If there is a strong reason for your to attend another lab session, please inform your lab instructors.",
            "title": "Lab Sessions"
        },
        {
            "location": "/policies/index.html#late-submissions",
            "text": "All graded exercise must be submitted on time.  If you need an extension, please ask for one and provide a justification for approval.      For late submission, there is a 1% penalty (of the assessment grade) for every minute after the deadline, capped at 80%.  For example, if a homework is deserved 40 marks, and it is submitted 20 minutes after the deadline, the student will get 32 marks instead (20% penalty).  If it is submitted 2 hours after the deadline, the student will get 8 marks (as it has hit the cap of 80% penalty).",
            "title": "Late Submissions"
        },
        {
            "location": "/policies/index.html#discussions-and-plagiarism",
            "text": "We encourage discussions among students for lab assignments, but each student should be responsible for writing his/her own code and should give credits to others when appropriate.      NUS and School of Computing have a high standard on academic honesty and take any violation seriously.  In the context of computing modules, source code plagiarism -- copying code from another source and attributing it as one's own code -- is a series violation.   Please read the page  Preventing Plagiarism  from the school's website to familiarize yourself with the policy.    I adopt a \"no mercy\" policy when it comes to disciplinary action on plagiarism.  Both parties, the student who copied, and the student who allowed others to copy, will be penalized equally.",
            "title": "Discussions and Plagiarism"
        },
        {
            "location": "/policies/index.html#lecture-video",
            "text": "Screencast will be recorded and posted online 2-3 days after the lecture. \nThis will be done on a 'best effort' basis and screencast will not be guaranteed to be available.      Posting of screencast is meant to help students who attended the lecture to recap the content, or to help those who are not able to attend the lecture due to unexpected circumstances.  It does not mean that you should skip lecture.",
            "title": "Lecture Video"
        },
        {
            "location": "/policies/index.html#model-solutions-and-slides",
            "text": "Slides will be posted  after  the class.  Note that slides are used as a  visual aid  to assist me during lecture.  It is not meant as summary of lectures nor a replacement of lecture notes.    In a module like CS2030, there is often not a single correct answer.  Hence, there is no model solution for this module.  Sample solutions may be posted (both good and bad ones) for discussion.  I strongly encourage students to discuss your solution with me, instead of just comparing your solution with the sample solution.",
            "title": "Model Solutions and Slides"
        },
        {
            "location": "/policies/index.html#grading",
            "text": "Students will received the grades they deserved irrespective of how the other students in the class performed (i.e., no bell curve)",
            "title": "Grading"
        },
        {
            "location": "/policies/index.html#open-book-assessment",
            "text": "All assessment, including graded labs, midterm test, and final assessment, are open book assessment -- you can bring in your notes or other  analog  reference materials.  Java documentation will be made available during labs.  Relevant Java APIs will be provided during midterm tests and final assessments.    There is  nothing to memorize  for this class.",
            "title": "Open Book Assessment"
        },
        {
            "location": "/lec1/index.html",
            "text": "Lecture 1: Abstraction and Encapsulation\n\n\nLearning Objectives\n\n\nAfter this lecture, students should:\n\n\n\n\nrecap some fundamental programming concepts, including the execution model of a program, abstractions over code and data, primitive and composite data types.\n\n\nappreciate the importance of maintaining abstraction barrier in software development\n\n\nunderstand the differences between statically and dynamically typed languages\n\n\nunderstand the concepts of object-oriented programming, including encapsulation, data hiding, fields and methods, constructors, mutators/accessors, classes and objects, and their purposes of introducing them as a method of programming.\n\n\nknow the purpose and usage of Java keywords \nclass\n, \npublic\n, \nprivate\n, \nfinal\n, \nstatic\n, \nimport\n, \nnew\n\n\nbe able to build a mental model for how an object is represented in Java\n\n\n\n\nWhat Exactly is a \nProgram\n?\n\n\nA program is a set of instructions we issue to computers to manipulate data.  A programming language is a formal language that helps programmers specify precisely what are the instructions we issue to computers, using code that are often made up of keywords, symbols, and names.  Computers execute the instructions in their \nprocessing units\n, and store the instructions and data in their \nmemory\n1\n.  The processing units recognizes the instructions based on the specific patterns of bits and manipulate data as a sequence of bits.  A programming language, however, is written at a higher level of \nabstraction\n (i.e., at a higher conceptual level), so that as a programmer, we only need to write a few lines of code to give complex instructions to the computer.  A \ncompiler\n or \ninterpreter\n is responsible for translating these programs written in high level language to \nassembly code\n or \nmachine code\n, i.e., bit patterns that the processing units can understand.\n\n\nThere are thousands of programming languages in existence.  \nC\n is one of the languages that is a \nlow-level language\n -- i.e., it provides very thin layer of abstractions on top of machine code.  On the other hand, languages such as \nPython\n and \nJavaScript\n are high-level languages.  As an example, in C, you can directly manage memory allocation.  In JavaScript and Python, you cannot.\n\n\nAbstraction: Variable and Type\n\n\nOne of the important abstractions that is provided by a programming language is \nvariable\n.  Data are stored in some location in the computer memory.  But we should not be referring to the memory location all the time.  First, referring to something like \n0xFA49130E\n is not user-friendly; Second, the location may change.  A \nvariable\n is an abstraction that allows us to give a user friendly name to memory location.  We use the \nvariable name\n whenever we want to access the \nvalue\n in that location, and \npointer to the variable\n or \nreference to the variable\n whenever we want to refer to the address of the location.\n\n\nLet's think a bit more about how sequence of bits is abstracted as data in a programming language.  At the machine level, these bits are just, well, bits.  We give the bits a \nsemantic\n at the program level, e.g., we want to interpret the sequence of bits as numbers, letters, etc.  E.g., the number (integer, to be exact) \n65\n and the letter \nA\n all share the same sequence of bits \n0100 00011\n but are interpreted differently and possibly manipulated differently.  \n\n\nThe \ntype\n of a variable tells the compiler how to interpret the variable and how to manipulate the variable.  \n\n\nFor instance, supposed that in Python, if you have two variables \nx\n and \ny\n storing the values \n4\n and \n5\n respectively, if you \nprint x + y\n, you may get \n45\n if \nx\n and \ny\n are strings, or you may get \n9\n if \nx\n and \ny\n are integers, or you may get an error if \n4\n is an integer and \n5\n is a string.  \n\n\nIn the last instance above, you see that assigning types of variables helps to keep the program meaningful, as the operation \n+\n is not defined over an integer and a string in Python\n2\n.\n\n\nPython is a \ndynamically typed\n language.  The same variable can hold values of different types, and checking if the right type is used is done during the execution of the program.  Note that, the type is associated with the \nvalues\n, and the type of the variable changes depending on the value it holds.\n\n\nC, on the other hand, is a \nstatically typed\n language.  We need to \ndeclare\n every variable we use in the program and specify its type.  A variable can only hold values of the same type as the type of the variable, so we can't assign, for instance, a string to a variable of type \nint\n.  We check if the right type is used during the compilation of the program.\n\n\n1\n2\nint\n \nx\n \n=\n \n4\n;\n \n// ok\n\n\nint\n \ny\n \n=\n \n\"5\"\n;\n \n// error\n\n\n\n\n\n\n\nBy annotating each variable with its type, the C compiler also knows how much memory space is needed to store a variable.  \n\n\nAbstraction: Functions\n\n\nAnother important abstraction provided by a programming language is \nfunction\n (or \nprocedure\n).  This abstraction allows programmers to group a set of instructions and give it a name.  The named set of instructions may take one or more variables as input parameters, and return one or more values.   \n\n\nLike all other abstractions, defining functions allow us to think at a higher conceptual level.  By composing functions at increasingly higher level of abstractions, we can build programs with increasing level of complexity.\n\n\nDefining functions allow us to abstract away the implementation details from the caller.  Once a function is defined, we can change the way the function is implemented without affecting the code that calls the function, as long as the semantic and the \ninterface\n of the function remains the same.\n\n\nFunctions therefore is a critical mechanism for achieving \nseparation of concerns\n in a program.  We separate the concerns about how a particular function is implemented, from the concerns about how the function is used to perform a higher-level task.\n\n\nDefining functions also allow us to \nreuse\n code.  We do not have to repeatedly write the same chunk of code if we group the sequence of code into a function -- then we just need to call the function to invoke this sequence of code every time we need it.  If this chunk of code is properly written and debugged, then we can be pretty sure that everywhere the function is invoked, the code is correct\n3\n.\n\n\nC is a \nprocedural language\n.  A C program consists of functions, with the \nmain()\n function serves as the entry point to the program.  Since C is a statically type language, a C function has a return type, and each  function parameter (or \nargument\n) has a type as well.  (Note that this statement does not mean that C function must return a \nvalue\n.  If the function does not return a value, we define its return type as \nvoid\n.)\n\n\nRecall that the bits representing the instructions are also stored in the computer memory in a separate area from the data.  The group of instructions that belongs to the same function are stored together.  Just like we can refer to a variable using its memory address using its \nreference\n (or \npointer\n), we can refer to a function using the memory address of the entry point to the function.\n\n\nAbstraction: Composite Data type\n\n\nJust like functions allow programmers to group instructions, give it a name, and refer to it later, a \ncomposite data type\n allow programers to group \nprimitive types\n together, give it a name (a new type), and refer to it later.  This is another powerful abstraction in programming languages that help us to think at a higher conceptual level without worrying about the details.   Commonly used examples are mathematical objects such as complex numbers, 2D data points, multi-dimensional vectors, circles, etc, or everyday objects such as a person, a product, etc.\n\n\nDefining composite data type allows programmers to abstract away (and be separated from the concern of) how a complex data type is represented.\n\n\nFor instance, a circle on a 2D plane can be represented by the center (\nx\n, \ny\n) and its radius \nr\n, or it can be represented by the top left corner (\nx\n,\ny\n) and the width \nw\n of the bounding square.\n\n\nIn C, we build composite data type with \nstruct\n.  For example,\n\n\n1\n2\n3\n4\nstruct\n \ncircle\n \n{\n\n  \nfloat\n \nx\n,\n \ny\n;\n \n// (x,y) coordinate of the center.\n\n  \nfloat\n \nr\n;\n \n// radius\n\n\n}\n\n\n\n\n\n\n\nOnce we have the \nstruct\n defined, we are not completely shielded from its representation, until we write a set of functions that operates on the \ncircle\n composite type.  For instance,\n\n\n1\n2\n3\nfloat\n \ncircle_area\n(\ncircle\n \nc\n)\n \n{\n \n...\n \n};\n\n\nbool\n  \ncircle_contains_point\n(\ncircle\n \nc\n,\n \npoint\n \np\n)\n \n{\n \n...\n \n};\n\n  \n:\n\n\n\n\n\n\n\nImplementation of these functions obvious requires knowledge of how a circle is represented.  Once the set of functions that operates on and manipulate circles are available, we can use \ncircle\n type without worrying about the internal representation.  \n\n\nIf we decided to change the representation of a circle, then only the set of functions that operates on a circle type need to be changed, but not the code that uses circles to do other things.\n\n\nWe can imagine an \nabstraction barrier\n between the code that uses a composite data type along with its associated set of functions, and the code that define the data type along with the implementation of the functions.  Above the barrier, the concern is about using the composite data type to do useful things, while below the barrier, the concern is about how to represent and manipulate the composite data type.\n\n\nAbstraction: Class and Object (or, Encapsulation)\n\n\nWe can further bundle the composite data type and its associated functions together in another abstraction, called a \nclass\n.  A class is a data type with a group of functions associated with it.  We call the functions as \nmethods\n and the data in the class as \nfields\n (or \nmembers\n, or \nstates\n, or \nattributes\n4\n).   A well-designed class maintain the abstraction barrier, properly wrapped the barrier around the internal representation and implementation, and exposes just the right interface for others to use.\n\n\nJust like we can create variables of a given type, we can create \nobjects\n of a given class.  Objects are instances of a class, each allowing the same methods to be called, and each containing the same set of variables of the same types, but (possibly) storing different values.\n\n\nRecall that programs written in a procedural language such as a C consists of functions, with a \nmain()\n function as the entry point.  A program written in an \nobject-oriented language\n such as Java consists of classes, with one main class as the entry point.  One can view a running object-oriented (or OO) program as something that instantiates objects of different classes and orchestrates their interactions with each other by calling each others' methods.\n\n\nOne could argue that an object-oriented way of writing programs is much more natural, as it mirrors our world more closely.  If we look around us, we see objects all around us, and each object has a certain behavior and they allow certain actions.  We interact with the objects through their interfaces, and we rarely need to know the internals of the objects we used everyday (unless we try to repair it)\n5\n.  \n\n\nThis concept, of keeping the all the data and functions operating on the data related to a composite data type together within an abstraction barrier, is called \nencapsulation\n.\n\n\nBreaking the Abstraction Barrier\n\n\nIn the ideal case, the code above the abstraction barrier would just call the provided interface to use the composite data type.  There, however, may be cases where a programmer may intentionally or accidentally break the abstraction barrier.  \n\n\nConsider the case of implementing \ncircle\n as a C \nstruct\n.  Suppose someone wants to move the center of the circle \nc\n to a new position (\nx\n, \ny\n), instead of implementing a function \ncircle_move_to(c, x, y)\n (which would still keep the representation used under the barrier), the person wrote:\n\n\n1\n2\nc\n.\nx\n \n=\n \nx\n;\n\n\nc\n.\ny\n \n=\n \ny\n;\n\n\n\n\n\n\n\nThis code would still be correct, but the abstraction barrier is broken since we now make explicit assumption that there are two variables \nx\n and \ny\n inside the \ncircle\n data type that correspond to the center of the circle.  If one day, we want to represent a circle in a different way, then we have to carefully change all the code that read and write these variables \nx\n and \ny\n and update them.\n\n\n\n\nBreaking Python's Abstraction Barrier\n\n\nPython tries to prevent \naccidental\n access to internal representation by having a convention of prefixing the internal variables with \n_\n (one underscore) or \n__\n (two underscores).   This method, however, does not prevent a lazy programmer from directly accessing the variables and possibly planting a bug / error that will surface later.\n\n\n\n\nData Hiding\n\n\nMany OO languages allow programmers to explicitly specify if a field or a method can be accessed from outside the abstraction barrier.  Java, for instance, support \nprivate\n and \npublic\n access modifiers\n5\n.  A field or a method that is declared as \nprivate\n cannot be accessed from outside the class, and can only be accessed within the class.  On the other hand, as you can guess, a \npublic\n field or method can be accessed, modified, or invoked from outside the class.\n\n\nSuch mechanism to protect the abstraction barrier from being broken is called \ndata hiding\n or \ninformation hiding\n.  This protection is enforced in the \ncompiler\n during compile time.\n\n\nExample: The Circle class\n\n\nLet's put together the concepts of encapsulation, data hiding to define a \nCircle\n class in Java:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n/**\n\n\n * A Circle object encapsulates a circle on a 2D plane.  \n\n\n */\n\n\nclass\n \nCircle\n \n{\n\n  \nprivate\n \ndouble\n \nx\n;\n  \n// x-coordinate of the center\n\n  \nprivate\n \ndouble\n \ny\n;\n  \n// y-coordinate of the center\n\n  \nprivate\n \ndouble\n \nr\n;\n  \n// the length of the radius\n\n\n  \n/**\n\n\n   * Return the area of the circle.\n\n\n   */\n\n  \npublic\n \ndouble\n \ngetArea\n()\n \n{\n\n    \nreturn\n \n3.1415926\n*\nr\n*\nr\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Move the center of the circle to the new position (newX, newY)\n\n\n   */\n\n  \npublic\n \nvoid\n \nmoveTo\n(\ndouble\n \nnewX\n,\n \ndouble\n \nnewY\n)\n \n{\n\n    \nx\n \n=\n \nnewX\n;\n\n    \ny\n \n=\n \nnewY\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nThe class above is still missing many essential components, and not a complete program.\n\n\nConstructors, Accessors, and Mutators\n\n\nWith data hiding, we completely isolate the internals representation of a class using an abstraction barrier.  With no way for the user of the class to modify the fields directly, it is common for a class to provide methods to initialize and modify these internal fields (such as the \nmoveTo()\n method above).  A method that initializes an object is called a \nconstructor\n, and a method that retrieves or modifies the properties of the object is called the \naccessor\n (or \ngetter\n) or \nmutator\n (or \nsetter\n).\n\n\nA constructor method is a special method within the class.  It cannot be called directly, but is invoked automatically when an object is instantiated.   In Java, a constructor method has the same name as the class and has no return type.  A constructor can take in arguments just like other functions.  The class \nCircle\n can have a constructor such as the following:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\nclass\n \nCircle\n \n{\n\n    \n:\n\n  \n/**\n\n\n   * Create a circle centered on (centerX, centerY) with given radius\n\n\n  */\n\n  \npublic\n \nCircle\n(\ndouble\n \ncenterX\n,\n \ndouble\n \ncenterY\n,\n \ndouble\n \nradius\n)\n \n{\n\n    \nx\n \n=\n \ncenterX\n;\n\n    \ny\n \n=\n \ncenterY\n;\n\n    \nr\n \n=\n \nradius\n;\n\n  \n}\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nThe use of accessor and mutator methods is a bit controversial.   Suppose that we provide an accessor method and a mutator method for every private field, then we are actually exposing the internal representation, therefore breaking the encapsulation.  For instance:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\nclass\n \nCircle\n \n{\n\n    \n:\n\n\n  \npublic\n \ndouble\n \ngetX\n()\n \n{\n\n    \nreturn\n \nx\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetX\n(\ndouble\n \nnewX\n)\n \n{\n\n    \nx\n \n=\n \nnewX\n;\n\n  \n}\n\n\n  \npublic\n \ndouble\n \ngetY\n()\n \n{\n\n    \nreturn\n \ny\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetY\n(\ndouble\n \nnewY\n)\n \n{\n\n    \ny\n \n=\n \nnewY\n:\n\n  \n}\n\n\n  \npublic\n \ndouble\n \ngetR\n()\n \n{\n\n    \nreturn\n \nr\n;\n\n  \n}\n\n\n  \npublic\n \nvoid\n \nsetR\n(\ndouble\n \nnewR\n)\n \n{\n\n    \nr\n \n=\n \nnewR\n;\n\n  \n}\n\n    \n:\n\n\n}\n\n\n\n\n\n\n\nThe examples above are pretty pointless.  If we need to know the internal and do something with it, we are doing it wrong.  The right approach is to implement a method within the class that do whatever we want the class to do.   For instance, suppose that we want to know the circumference of the circle, one approach would be:\n\n\n1\n   \ndouble\n \ncircumference\n \n=\n \n2\n*\nc\n.\ngetR\n()*\n3.1415926\n;\n\n\n\n\n\n\n\nwhere c is a \nCircle\n object.\n\n\nA better approach would be to add a new method \ngetCircumference()\n in the \nCircle\n class, and call this instead:\n\n1\n   \ndouble\n \ncircumference\n \n=\n \nc\n.\ngetCircumference\n();\n\n\n\n\n\n\nThe better approach involves writing more lines of code, but it keeps the encapsulation in tact.\n\n\n\n\nConstructor in Python and JavaScript\n\n\nIn Python, the constructor is the \n__init__\n method.   In JavaScript, the constructor is simply called \nconstructor\n.\n\n\n\n\nClass Fields and Methods\n\n\nLet's look at the implementation of \ngetArea()\n above.  We use the constant \n\\(\\pi\\)\n but hardcoded it as 3.1415926.  Hardcoding such a magic number is a \nno no\n in terms of coding style.  This constant can appear in more than one places, and if we hardcode such a number, and want to change the precision of it later, we would need to trace down and change every occurrence.  Not only this introduces more work, but likely to introduce bugs.  \n\n\nIn C, we define it as a macro constant \nM_PI\n.  But how should we do this in Java?  This is where the ideal that a program consists of only objects with internal states that communicate with each other feel a bit constraining.  The constant \n\\(\\pi\\)\n is universal, and not really belong to any object (the value of Pi is the same for every circle!).  If we start to define a method \nsqrt()\n that computes the square root of a given number, this is a general function that is not associated with any object as well.\n\n\nA solution to this is to associate these global values and functions with a \nclass\n instead of with an \nobject\n.  For instance. Java predefines a \nMath\n class\n6\n that is populated with constants \nPI\n and \nE\n (for Euler's number \n\\(e\\)\n), along with a long list of mathematical functions.  To associate a method or a field with a class in Java, we declare them with the \nstatic\n keyword.  We can additionally add a keyword \nfinal\n to indicate that the value of the field will not change\n7\n.\n\n\n1\n2\n3\n4\n5\n6\nclass\n \nMath\n \n{\n\n  \n:\n\n  \npublic\n \nstatic\n \nfinal\n \ndouble\n \nPI\n \n=\n \n3.141592653589793\n;\n\n  \n:\n\n  \n:\n\n\n}\n\n\n\n\n\n\n\nWe call these fields and methods that are associated with a class as \nclass fields\n and \nclass methods\n, and fields and methods that are associated with an object as \ninstance fields\n and \ninstance methods\n.\n\n\n\n\nClass Fields and Methods in Python\n\n\nNote that, in Python, any variable declared within a \nclass\n block is a class field:\n\n1\n2\n3\nclass\n \nCircle\n:\n\n  \nx\n \n=\n \n0\n\n  \ny\n \n=\n \n0\n\n\n\n\n\nIn the above example, \nx\n and \ny\n are class fields, not instance fields.\n\n\n\n\nMemory Model for Objects\n\n\nVariables and functions are stored in the memory of the computers as bits, usually in two separate regions.  Since an object encapsulates both variables and functions, where are they stored?  \n\n\nDifferent implementations might stored the objects differently, but here is one way that we will follow for this class:\n\n\n\n\nIn the figure above, there are two objects of the same class.  An objects is referred to through its references, which is a pointer to memory location where the instance fields for the object is stored, along with a pointer to a \nmethod table\n.  A method table stores a table of pointers to the methods, along with a table to the class fields.    \n\n\nExample: The Circle class\n\n\nNow, let revise our \nCircle\n class to improve the code and make it a little more complete:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\nimport\n \njava.lang.Math\n;\n\n\n\n/**\n\n\n * A Circle object encapsulates a circle on a 2D plane.  \n\n\n */\n\n\nclass\n \nCircle\n \n{\n\n  \nprivate\n \ndouble\n \nx\n;\n  \n// x-coordinate of the center\n\n  \nprivate\n \ndouble\n \ny\n;\n  \n// y-coordinate of the center\n\n  \nprivate\n \ndouble\n \nr\n;\n  \n// the length of the radius\n\n\n  \n/**\n\n\n   * Create a circle centered on (centerX, centerY) with given radius\n\n\n  */\n\n  \npublic\n \nCircle\n(\ndouble\n \ncenterX\n,\n \ndouble\n \ncenterY\n,\n \ndouble\n \nradius\n)\n \n{\n\n    \nx\n \n=\n \ncenterX\n;\n\n    \ny\n \n=\n \ncenterY\n;\n\n    \nr\n \n=\n \nradius\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Return the area of the circle.\n\n\n   */\n\n  \npublic\n \ndouble\n \ngetArea\n()\n \n{\n\n    \nreturn\n \nMath\n.\nPI\n*\nr\n*\nr\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Return the circumference of the circle.\n\n\n   */\n\n  \npublic\n \ndouble\n \ngetCircumference\n()\n \n{\n\n    \nreturn\n \nMath\n.\nPI\n*\nr\n*\nr\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Move the center of the circle to the new position (newX, newY)\n\n\n   */\n\n  \npublic\n \nvoid\n \nmoveTo\n(\ndouble\n \nnewX\n,\n \ndouble\n \nnewY\n)\n \n{\n\n    \nx\n \n=\n \nnewX\n;\n\n    \ny\n \n=\n \nnewY\n;\n\n  \n}\n\n\n  \n/**\n\n\n   * Return true if the given point (testX, testY) is within the circle.\n\n\n   */\n\n  \npublic\n \nboolean\n \ncontains\n(\ndouble\n \ntestX\n,\n \ndouble\n \ntestY\n)\n \n{\n\n    \nreturn\n \nfalse\n;\n\n    \n// TODO: left as an exercise  \n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nCreating and Interacting with \nCircle\n objects\n\n\nTo use the \nCircle\n class, we can either:\n\n\n\n\ncreate a \nmain()\n function, compile and link with the \nCircle\n class, and create an executable program, just like we usually do with a C program, OR\n\n\nuse a new bleeding-edge tool called \njshell\n, which is part of Java 9 (to be released September 2017), and its \nread-evaluate-print loop\n (REPL) to help us quickly try out various features of Java.\n\n\n\n\nWe will write a complete Java program with \nmain()\n within two weeks, but for now, we will use \njshell\n to demonstrate the various language features of Java\n7\n.\n\n\nThe demonstration below loads the \nCircle\n class written above (with the \ncontains\n method completed) from a file named \nCircle.java\n8\n, and creates two \nCircle\n objects, \nc1\n and \nc2\n.  We use the \nnew\n keyword to tell Java to create an object of type \nCircle\n here, passing in the center and the radius.\n\n\n\n\n\n\n\n\n\n\n\n\n\nOften, the instructions and data are stored in different regions of the memory.\u00a0\n\u21a9\n\n\n\n\n\n\nJavascript would happily convert \n4\n into a string for you, and return \n45\n.\u00a0\n\u21a9\n\n\n\n\n\n\nassuming the parameters are passed in correctly.\u00a0\n\u21a9\n\n\n\n\n\n\nComputer scientists just can't decide on what to call this!\u00a0\n\u21a9\n\n\n\n\n\n\nOthers include \nprotected\n and the \ndefault\n modifier, but let's not sweat about the details for now.\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nThe class \nMath\n is provided by the package \njava.lang\n in Java.  A package is simply a set of related classes (and interfaces, but I have not told you what is an interface yet).  To use this class, we need to add the line \nimport\n \njava.lang.Math\n in the beginning of our program.\u00a0\n\u21a9\n\n\n\n\n\n\nYou can download and install \njshell\n yourself, as part of \nJava Development Kit version 9 (JDK 9)\n\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nWe use the convention of one public class per file, name the file with the exact name of the class (including capitalization), and include the extension \n.java\n to the filename.\u00a0\n\u21a9",
            "title": "1. Abstraction & Encapsulation"
        },
        {
            "location": "/lec1/index.html#lecture-1-abstraction-and-encapsulation",
            "text": "",
            "title": "Lecture 1: Abstraction and Encapsulation"
        },
        {
            "location": "/lec1/index.html#learning-objectives",
            "text": "After this lecture, students should:   recap some fundamental programming concepts, including the execution model of a program, abstractions over code and data, primitive and composite data types.  appreciate the importance of maintaining abstraction barrier in software development  understand the differences between statically and dynamically typed languages  understand the concepts of object-oriented programming, including encapsulation, data hiding, fields and methods, constructors, mutators/accessors, classes and objects, and their purposes of introducing them as a method of programming.  know the purpose and usage of Java keywords  class ,  public ,  private ,  final ,  static ,  import ,  new  be able to build a mental model for how an object is represented in Java",
            "title": "Learning Objectives"
        },
        {
            "location": "/lec1/index.html#what-exactly-is-a-program",
            "text": "A program is a set of instructions we issue to computers to manipulate data.  A programming language is a formal language that helps programmers specify precisely what are the instructions we issue to computers, using code that are often made up of keywords, symbols, and names.  Computers execute the instructions in their  processing units , and store the instructions and data in their  memory 1 .  The processing units recognizes the instructions based on the specific patterns of bits and manipulate data as a sequence of bits.  A programming language, however, is written at a higher level of  abstraction  (i.e., at a higher conceptual level), so that as a programmer, we only need to write a few lines of code to give complex instructions to the computer.  A  compiler  or  interpreter  is responsible for translating these programs written in high level language to  assembly code  or  machine code , i.e., bit patterns that the processing units can understand.  There are thousands of programming languages in existence.   C  is one of the languages that is a  low-level language  -- i.e., it provides very thin layer of abstractions on top of machine code.  On the other hand, languages such as  Python  and  JavaScript  are high-level languages.  As an example, in C, you can directly manage memory allocation.  In JavaScript and Python, you cannot.",
            "title": "What Exactly is a Program?"
        },
        {
            "location": "/lec1/index.html#abstraction-variable-and-type",
            "text": "One of the important abstractions that is provided by a programming language is  variable .  Data are stored in some location in the computer memory.  But we should not be referring to the memory location all the time.  First, referring to something like  0xFA49130E  is not user-friendly; Second, the location may change.  A  variable  is an abstraction that allows us to give a user friendly name to memory location.  We use the  variable name  whenever we want to access the  value  in that location, and  pointer to the variable  or  reference to the variable  whenever we want to refer to the address of the location.  Let's think a bit more about how sequence of bits is abstracted as data in a programming language.  At the machine level, these bits are just, well, bits.  We give the bits a  semantic  at the program level, e.g., we want to interpret the sequence of bits as numbers, letters, etc.  E.g., the number (integer, to be exact)  65  and the letter  A  all share the same sequence of bits  0100 00011  but are interpreted differently and possibly manipulated differently.    The  type  of a variable tells the compiler how to interpret the variable and how to manipulate the variable.    For instance, supposed that in Python, if you have two variables  x  and  y  storing the values  4  and  5  respectively, if you  print x + y , you may get  45  if  x  and  y  are strings, or you may get  9  if  x  and  y  are integers, or you may get an error if  4  is an integer and  5  is a string.    In the last instance above, you see that assigning types of variables helps to keep the program meaningful, as the operation  +  is not defined over an integer and a string in Python 2 .  Python is a  dynamically typed  language.  The same variable can hold values of different types, and checking if the right type is used is done during the execution of the program.  Note that, the type is associated with the  values , and the type of the variable changes depending on the value it holds.  C, on the other hand, is a  statically typed  language.  We need to  declare  every variable we use in the program and specify its type.  A variable can only hold values of the same type as the type of the variable, so we can't assign, for instance, a string to a variable of type  int .  We check if the right type is used during the compilation of the program.  1\n2 int   x   =   4 ;   // ok  int   y   =   \"5\" ;   // error    By annotating each variable with its type, the C compiler also knows how much memory space is needed to store a variable.",
            "title": "Abstraction: Variable and Type"
        },
        {
            "location": "/lec1/index.html#abstraction-functions",
            "text": "Another important abstraction provided by a programming language is  function  (or  procedure ).  This abstraction allows programmers to group a set of instructions and give it a name.  The named set of instructions may take one or more variables as input parameters, and return one or more values.     Like all other abstractions, defining functions allow us to think at a higher conceptual level.  By composing functions at increasingly higher level of abstractions, we can build programs with increasing level of complexity.  Defining functions allow us to abstract away the implementation details from the caller.  Once a function is defined, we can change the way the function is implemented without affecting the code that calls the function, as long as the semantic and the  interface  of the function remains the same.  Functions therefore is a critical mechanism for achieving  separation of concerns  in a program.  We separate the concerns about how a particular function is implemented, from the concerns about how the function is used to perform a higher-level task.  Defining functions also allow us to  reuse  code.  We do not have to repeatedly write the same chunk of code if we group the sequence of code into a function -- then we just need to call the function to invoke this sequence of code every time we need it.  If this chunk of code is properly written and debugged, then we can be pretty sure that everywhere the function is invoked, the code is correct 3 .  C is a  procedural language .  A C program consists of functions, with the  main()  function serves as the entry point to the program.  Since C is a statically type language, a C function has a return type, and each  function parameter (or  argument ) has a type as well.  (Note that this statement does not mean that C function must return a  value .  If the function does not return a value, we define its return type as  void .)  Recall that the bits representing the instructions are also stored in the computer memory in a separate area from the data.  The group of instructions that belongs to the same function are stored together.  Just like we can refer to a variable using its memory address using its  reference  (or  pointer ), we can refer to a function using the memory address of the entry point to the function.",
            "title": "Abstraction: Functions"
        },
        {
            "location": "/lec1/index.html#abstraction-composite-data-type",
            "text": "Just like functions allow programmers to group instructions, give it a name, and refer to it later, a  composite data type  allow programers to group  primitive types  together, give it a name (a new type), and refer to it later.  This is another powerful abstraction in programming languages that help us to think at a higher conceptual level without worrying about the details.   Commonly used examples are mathematical objects such as complex numbers, 2D data points, multi-dimensional vectors, circles, etc, or everyday objects such as a person, a product, etc.  Defining composite data type allows programmers to abstract away (and be separated from the concern of) how a complex data type is represented.  For instance, a circle on a 2D plane can be represented by the center ( x ,  y ) and its radius  r , or it can be represented by the top left corner ( x , y ) and the width  w  of the bounding square.  In C, we build composite data type with  struct .  For example,  1\n2\n3\n4 struct   circle   { \n   float   x ,   y ;   // (x,y) coordinate of the center. \n   float   r ;   // radius  }    Once we have the  struct  defined, we are not completely shielded from its representation, until we write a set of functions that operates on the  circle  composite type.  For instance,  1\n2\n3 float   circle_area ( circle   c )   {   ...   };  bool    circle_contains_point ( circle   c ,   point   p )   {   ...   }; \n   :    Implementation of these functions obvious requires knowledge of how a circle is represented.  Once the set of functions that operates on and manipulate circles are available, we can use  circle  type without worrying about the internal representation.    If we decided to change the representation of a circle, then only the set of functions that operates on a circle type need to be changed, but not the code that uses circles to do other things.  We can imagine an  abstraction barrier  between the code that uses a composite data type along with its associated set of functions, and the code that define the data type along with the implementation of the functions.  Above the barrier, the concern is about using the composite data type to do useful things, while below the barrier, the concern is about how to represent and manipulate the composite data type.",
            "title": "Abstraction: Composite Data type"
        },
        {
            "location": "/lec1/index.html#abstraction-class-and-object-or-encapsulation",
            "text": "We can further bundle the composite data type and its associated functions together in another abstraction, called a  class .  A class is a data type with a group of functions associated with it.  We call the functions as  methods  and the data in the class as  fields  (or  members , or  states , or  attributes 4 ).   A well-designed class maintain the abstraction barrier, properly wrapped the barrier around the internal representation and implementation, and exposes just the right interface for others to use.  Just like we can create variables of a given type, we can create  objects  of a given class.  Objects are instances of a class, each allowing the same methods to be called, and each containing the same set of variables of the same types, but (possibly) storing different values.  Recall that programs written in a procedural language such as a C consists of functions, with a  main()  function as the entry point.  A program written in an  object-oriented language  such as Java consists of classes, with one main class as the entry point.  One can view a running object-oriented (or OO) program as something that instantiates objects of different classes and orchestrates their interactions with each other by calling each others' methods.  One could argue that an object-oriented way of writing programs is much more natural, as it mirrors our world more closely.  If we look around us, we see objects all around us, and each object has a certain behavior and they allow certain actions.  We interact with the objects through their interfaces, and we rarely need to know the internals of the objects we used everyday (unless we try to repair it) 5 .    This concept, of keeping the all the data and functions operating on the data related to a composite data type together within an abstraction barrier, is called  encapsulation .",
            "title": "Abstraction: Class and Object (or, Encapsulation)"
        },
        {
            "location": "/lec1/index.html#breaking-the-abstraction-barrier",
            "text": "In the ideal case, the code above the abstraction barrier would just call the provided interface to use the composite data type.  There, however, may be cases where a programmer may intentionally or accidentally break the abstraction barrier.    Consider the case of implementing  circle  as a C  struct .  Suppose someone wants to move the center of the circle  c  to a new position ( x ,  y ), instead of implementing a function  circle_move_to(c, x, y)  (which would still keep the representation used under the barrier), the person wrote:  1\n2 c . x   =   x ;  c . y   =   y ;    This code would still be correct, but the abstraction barrier is broken since we now make explicit assumption that there are two variables  x  and  y  inside the  circle  data type that correspond to the center of the circle.  If one day, we want to represent a circle in a different way, then we have to carefully change all the code that read and write these variables  x  and  y  and update them.   Breaking Python's Abstraction Barrier  Python tries to prevent  accidental  access to internal representation by having a convention of prefixing the internal variables with  _  (one underscore) or  __  (two underscores).   This method, however, does not prevent a lazy programmer from directly accessing the variables and possibly planting a bug / error that will surface later.",
            "title": "Breaking the Abstraction Barrier"
        },
        {
            "location": "/lec1/index.html#data-hiding",
            "text": "Many OO languages allow programmers to explicitly specify if a field or a method can be accessed from outside the abstraction barrier.  Java, for instance, support  private  and  public  access modifiers 5 .  A field or a method that is declared as  private  cannot be accessed from outside the class, and can only be accessed within the class.  On the other hand, as you can guess, a  public  field or method can be accessed, modified, or invoked from outside the class.  Such mechanism to protect the abstraction barrier from being broken is called  data hiding  or  information hiding .  This protection is enforced in the  compiler  during compile time.",
            "title": "Data Hiding"
        },
        {
            "location": "/lec1/index.html#example-the-circle-class",
            "text": "Let's put together the concepts of encapsulation, data hiding to define a  Circle  class in Java:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 /**   * A Circle object encapsulates a circle on a 2D plane.     */  class   Circle   { \n   private   double   x ;    // x-coordinate of the center \n   private   double   y ;    // y-coordinate of the center \n   private   double   r ;    // the length of the radius \n\n   /**     * Return the area of the circle.     */ \n   public   double   getArea ()   { \n     return   3.1415926 * r * r ; \n   } \n\n   /**     * Move the center of the circle to the new position (newX, newY)     */ \n   public   void   moveTo ( double   newX ,   double   newY )   { \n     x   =   newX ; \n     y   =   newY ; \n   }  }    The class above is still missing many essential components, and not a complete program.",
            "title": "Example: The Circle class"
        },
        {
            "location": "/lec1/index.html#constructors-accessors-and-mutators",
            "text": "With data hiding, we completely isolate the internals representation of a class using an abstraction barrier.  With no way for the user of the class to modify the fields directly, it is common for a class to provide methods to initialize and modify these internal fields (such as the  moveTo()  method above).  A method that initializes an object is called a  constructor , and a method that retrieves or modifies the properties of the object is called the  accessor  (or  getter ) or  mutator  (or  setter ).  A constructor method is a special method within the class.  It cannot be called directly, but is invoked automatically when an object is instantiated.   In Java, a constructor method has the same name as the class and has no return type.  A constructor can take in arguments just like other functions.  The class  Circle  can have a constructor such as the following:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 class   Circle   { \n     : \n   /**     * Create a circle centered on (centerX, centerY) with given radius    */ \n   public   Circle ( double   centerX ,   double   centerY ,   double   radius )   { \n     x   =   centerX ; \n     y   =   centerY ; \n     r   =   radius ; \n   } \n     :  }    The use of accessor and mutator methods is a bit controversial.   Suppose that we provide an accessor method and a mutator method for every private field, then we are actually exposing the internal representation, therefore breaking the encapsulation.  For instance:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28 class   Circle   { \n     : \n\n   public   double   getX ()   { \n     return   x ; \n   } \n\n   public   void   setX ( double   newX )   { \n     x   =   newX ; \n   } \n\n   public   double   getY ()   { \n     return   y ; \n   } \n\n   public   void   setY ( double   newY )   { \n     y   =   newY : \n   } \n\n   public   double   getR ()   { \n     return   r ; \n   } \n\n   public   void   setR ( double   newR )   { \n     r   =   newR ; \n   } \n     :  }    The examples above are pretty pointless.  If we need to know the internal and do something with it, we are doing it wrong.  The right approach is to implement a method within the class that do whatever we want the class to do.   For instance, suppose that we want to know the circumference of the circle, one approach would be:  1     double   circumference   =   2 * c . getR ()* 3.1415926 ;    where c is a  Circle  object.  A better approach would be to add a new method  getCircumference()  in the  Circle  class, and call this instead: 1     double   circumference   =   c . getCircumference ();    The better approach involves writing more lines of code, but it keeps the encapsulation in tact.   Constructor in Python and JavaScript  In Python, the constructor is the  __init__  method.   In JavaScript, the constructor is simply called  constructor .",
            "title": "Constructors, Accessors, and Mutators"
        },
        {
            "location": "/lec1/index.html#class-fields-and-methods",
            "text": "Let's look at the implementation of  getArea()  above.  We use the constant  \\(\\pi\\)  but hardcoded it as 3.1415926.  Hardcoding such a magic number is a  no no  in terms of coding style.  This constant can appear in more than one places, and if we hardcode such a number, and want to change the precision of it later, we would need to trace down and change every occurrence.  Not only this introduces more work, but likely to introduce bugs.    In C, we define it as a macro constant  M_PI .  But how should we do this in Java?  This is where the ideal that a program consists of only objects with internal states that communicate with each other feel a bit constraining.  The constant  \\(\\pi\\)  is universal, and not really belong to any object (the value of Pi is the same for every circle!).  If we start to define a method  sqrt()  that computes the square root of a given number, this is a general function that is not associated with any object as well.  A solution to this is to associate these global values and functions with a  class  instead of with an  object .  For instance. Java predefines a  Math  class 6  that is populated with constants  PI  and  E  (for Euler's number  \\(e\\) ), along with a long list of mathematical functions.  To associate a method or a field with a class in Java, we declare them with the  static  keyword.  We can additionally add a keyword  final  to indicate that the value of the field will not change 7 .  1\n2\n3\n4\n5\n6 class   Math   { \n   : \n   public   static   final   double   PI   =   3.141592653589793 ; \n   : \n   :  }    We call these fields and methods that are associated with a class as  class fields  and  class methods , and fields and methods that are associated with an object as  instance fields  and  instance methods .   Class Fields and Methods in Python  Note that, in Python, any variable declared within a  class  block is a class field: 1\n2\n3 class   Circle : \n   x   =   0 \n   y   =   0   \nIn the above example,  x  and  y  are class fields, not instance fields.",
            "title": "Class Fields and Methods"
        },
        {
            "location": "/lec1/index.html#memory-model-for-objects",
            "text": "Variables and functions are stored in the memory of the computers as bits, usually in two separate regions.  Since an object encapsulates both variables and functions, where are they stored?    Different implementations might stored the objects differently, but here is one way that we will follow for this class:   In the figure above, there are two objects of the same class.  An objects is referred to through its references, which is a pointer to memory location where the instance fields for the object is stored, along with a pointer to a  method table .  A method table stores a table of pointers to the methods, along with a table to the class fields.",
            "title": "Memory Model for Objects"
        },
        {
            "location": "/lec1/index.html#example-the-circle-class_1",
            "text": "Now, let revise our  Circle  class to improve the code and make it a little more complete:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49 import   java.lang.Math ;  /**   * A Circle object encapsulates a circle on a 2D plane.     */  class   Circle   { \n   private   double   x ;    // x-coordinate of the center \n   private   double   y ;    // y-coordinate of the center \n   private   double   r ;    // the length of the radius \n\n   /**     * Create a circle centered on (centerX, centerY) with given radius    */ \n   public   Circle ( double   centerX ,   double   centerY ,   double   radius )   { \n     x   =   centerX ; \n     y   =   centerY ; \n     r   =   radius ; \n   } \n\n   /**     * Return the area of the circle.     */ \n   public   double   getArea ()   { \n     return   Math . PI * r * r ; \n   } \n\n   /**     * Return the circumference of the circle.     */ \n   public   double   getCircumference ()   { \n     return   Math . PI * r * r ; \n   } \n\n   /**     * Move the center of the circle to the new position (newX, newY)     */ \n   public   void   moveTo ( double   newX ,   double   newY )   { \n     x   =   newX ; \n     y   =   newY ; \n   } \n\n   /**     * Return true if the given point (testX, testY) is within the circle.     */ \n   public   boolean   contains ( double   testX ,   double   testY )   { \n     return   false ; \n     // TODO: left as an exercise   \n   }  }",
            "title": "Example: The Circle class"
        },
        {
            "location": "/lec1/index.html#creating-and-interacting-with-circle-objects",
            "text": "To use the  Circle  class, we can either:   create a  main()  function, compile and link with the  Circle  class, and create an executable program, just like we usually do with a C program, OR  use a new bleeding-edge tool called  jshell , which is part of Java 9 (to be released September 2017), and its  read-evaluate-print loop  (REPL) to help us quickly try out various features of Java.   We will write a complete Java program with  main()  within two weeks, but for now, we will use  jshell  to demonstrate the various language features of Java 7 .  The demonstration below loads the  Circle  class written above (with the  contains  method completed) from a file named  Circle.java 8 , and creates two  Circle  objects,  c1  and  c2 .  We use the  new  keyword to tell Java to create an object of type  Circle  here, passing in the center and the radius.       Often, the instructions and data are stored in different regions of the memory.\u00a0 \u21a9    Javascript would happily convert  4  into a string for you, and return  45 .\u00a0 \u21a9    assuming the parameters are passed in correctly.\u00a0 \u21a9    Computer scientists just can't decide on what to call this!\u00a0 \u21a9    Others include  protected  and the  default  modifier, but let's not sweat about the details for now.\u00a0 \u21a9 \u21a9    The class  Math  is provided by the package  java.lang  in Java.  A package is simply a set of related classes (and interfaces, but I have not told you what is an interface yet).  To use this class, we need to add the line  import   java.lang.Math  in the beginning of our program.\u00a0 \u21a9    You can download and install  jshell  yourself, as part of  Java Development Kit version 9 (JDK 9) \u00a0 \u21a9 \u21a9    We use the convention of one public class per file, name the file with the exact name of the class (including capitalization), and include the extension  .java  to the filename.\u00a0 \u21a9",
            "title": "Creating and Interacting with Circle objects"
        },
        {
            "location": "/exercise1/index.html",
            "text": "Exercise 1\n\n\nThis is an ungraded, optional exercise.\n\n\nIn the example from Lecture 1, we implemented a class \nCircle\n.  There, we store and pass around two \ndouble\n variables that corresponds to the x-coordinate and y-coordinate of a point.  The code would be neater if we create a second class \nPoint\n that encapsulates the concept of a point on 2D plane and the operations on points.\n\n\nImplement a new class \nPoint\n and modify the class \nCircle\n to use the class \nPoint\n.  Pay attention to what methods and fields (if any) you expose as \npublic\n outside of the abstraction barrier of a \nPoint\n object.\n\n\nYou will need to use \njshell\n from Java 1.9 (or JDK 9) to interact with your new classes.",
            "title": "1. Circles and Points"
        },
        {
            "location": "/exercise1/index.html#exercise-1",
            "text": "This is an ungraded, optional exercise.  In the example from Lecture 1, we implemented a class  Circle .  There, we store and pass around two  double  variables that corresponds to the x-coordinate and y-coordinate of a point.  The code would be neater if we create a second class  Point  that encapsulates the concept of a point on 2D plane and the operations on points.  Implement a new class  Point  and modify the class  Circle  to use the class  Point .  Pay attention to what methods and fields (if any) you expose as  public  outside of the abstraction barrier of a  Point  object.  You will need to use  jshell  from Java 1.9 (or JDK 9) to interact with your new classes.",
            "title": "Exercise 1"
        },
        {
            "location": "/lab1/index.html",
            "text": "Lab 1\n\n\nComing Soon\n\n\nNothing to see here (yet).\n\n\n:\n\n\n:\n\n\n:\n\n\n:\n\n\n:\n\n\n:\n\n\n:\n\n\n:\n\n\n:\n\n\n:",
            "title": 1
        },
        {
            "location": "/lab1/index.html#lab-1",
            "text": "",
            "title": "Lab 1"
        },
        {
            "location": "/lab1/index.html#coming-soon",
            "text": "Nothing to see here (yet).  :  :  :  :  :  :  :  :  :  :",
            "title": "Coming Soon"
        }
    ]
}